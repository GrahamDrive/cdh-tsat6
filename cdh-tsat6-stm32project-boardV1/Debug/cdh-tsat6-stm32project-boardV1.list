
cdh-tsat6-stm32project-boardV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a8  080049a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080049a8  080049a8  000149a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b0  080049b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049b4  080049b4  000149b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000000c  080049c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080049c4  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fa6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c9  00000000  00000000  00035fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  000388b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00039b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cf5  00000000  00000000  0003ad38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015817  00000000  00000000  0005fa2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4955  00000000  00000000  00075244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159b99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  00159bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004948 	.word	0x08004948

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004948 	.word	0x08004948

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <CAN_Boot>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
void CAN_Boot(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  		sFilterConfig;
	sFilterConfig.FilterIdHigh = 0x0000;
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 80004fe:	2301      	movs	r3, #1
 8000500:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000502:	230e      	movs	r3, #14
 8000504:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000506:	463b      	mov	r3, r7
 8000508:	4619      	mov	r1, r3
 800050a:	4807      	ldr	r0, [pc, #28]	; (8000528 <CAN_Boot+0x50>)
 800050c:	f000 ff27 	bl	800135e <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1); // Turn on CANBus
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <CAN_Boot+0x50>)
 8000512:	f000 ffee 	bl	80014f2 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000516:	2102      	movs	r1, #2
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <CAN_Boot+0x50>)
 800051a:	f001 fa10 	bl	800193e <HAL_CAN_ActivateNotification>
}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028

0800052c <CAN_Transmit_Message>:

/**
 * @brief Used to send messages over CAN
 * @param message A 8 byte message
 */
void CAN_Transmit_Message(CANMessage_t myMessage){
 800052c:	b580      	push	{r7, lr}
 800052e:	b08e      	sub	sp, #56	; 0x38
 8000530:	af00      	add	r7, sp, #0
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t txMailbox; // Transmit Mailbox
	CAN_TxHeaderTypeDef txMessage;
	
	// TX Message Parameters
	uint16_t ID = (myMessage.priority << 4) | (SOURCE_ID << 2) | (myMessage.DestinationID);
 8000538:	793b      	ldrb	r3, [r7, #4]
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	b21a      	sxth	r2, r3
 800053e:	2303      	movs	r3, #3
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	b21b      	sxth	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b21a      	sxth	r2, r3
 8000548:	797b      	ldrb	r3, [r7, #5]
 800054a:	b21b      	sxth	r3, r3
 800054c:	4313      	orrs	r3, r2
 800054e:	b21b      	sxth	r3, r3
 8000550:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t message[8] = {myMessage.command, myMessage.data[0], myMessage.data[1], myMessage.data[2], myMessage.data[3], myMessage.data[4], myMessage.data[5],myMessage.data[6]};
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	743b      	strb	r3, [r7, #16]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	747b      	strb	r3, [r7, #17]
 800055a:	7a3b      	ldrb	r3, [r7, #8]
 800055c:	74bb      	strb	r3, [r7, #18]
 800055e:	7a7b      	ldrb	r3, [r7, #9]
 8000560:	74fb      	strb	r3, [r7, #19]
 8000562:	7abb      	ldrb	r3, [r7, #10]
 8000564:	753b      	strb	r3, [r7, #20]
 8000566:	7afb      	ldrb	r3, [r7, #11]
 8000568:	757b      	strb	r3, [r7, #21]
 800056a:	7b3b      	ldrb	r3, [r7, #12]
 800056c:	75bb      	strb	r3, [r7, #22]
 800056e:	7b7b      	ldrb	r3, [r7, #13]
 8000570:	75fb      	strb	r3, [r7, #23]

	txMessage.StdId = ID;
 8000572:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000574:	61bb      	str	r3, [r7, #24]
	txMessage.IDE = CAN_ID_STD;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
	txMessage.RTR = CAN_RTR_DATA;
 800057a:	2300      	movs	r3, #0
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
	txMessage.DLC = MAX_CAN_DATA_LENGTH;
 800057e:	2308      	movs	r3, #8
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_CAN_AddTxMessage(&hcan1, &txMessage, message, &txMailbox);
 8000582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000586:	f107 0210 	add.w	r2, r7, #16
 800058a:	f107 0118 	add.w	r1, r7, #24
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <CAN_Transmit_Message+0x70>)
 8000590:	f000 fff3 	bl	800157a <HAL_CAN_AddTxMessage>
}
 8000594:	bf00      	nop
 8000596:	3738      	adds	r7, #56	; 0x38
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000028 	.word	0x20000028

080005a0 <CAN_Message_Received>:


/**
 * @brief Interrupt Handler for received CAN messages.
 */
void CAN_Message_Received(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0
	uint8_t rxData[8]; // Received data
	uint8_t receivedDestinationId; // ID of Received Message

	// Message Sent To Queue
	/* Get RX message */
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessage, rxData);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	f107 0218 	add.w	r2, r7, #24
 80005ae:	2100      	movs	r1, #0
 80005b0:	481c      	ldr	r0, [pc, #112]	; (8000624 <CAN_Message_Received+0x84>)
 80005b2:	f001 f8b2 	bl	800171a <HAL_CAN_GetRxMessage>
	receivedDestinationId = RECEIVED_DESTINATION_ID_MASK & rxMessage.StdId;
 80005b6:	69bb      	ldr	r3, [r7, #24]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2203      	movs	r2, #3
 80005bc:	4013      	ands	r3, r2
 80005be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(receivedDestinationId == SOURCE_ID){
 80005c2:	2203      	movs	r2, #3
 80005c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d126      	bne.n	800061a <CAN_Message_Received+0x7a>
		// *NOTE* program custom handling per your subsystem here.
		CANMessage_t ping;
		ping.DestinationID = 0x2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	717b      	strb	r3, [r7, #5]
		ping.command = rxData[0];
 80005d0:	7c3b      	ldrb	r3, [r7, #16]
 80005d2:	71bb      	strb	r3, [r7, #6]
		ping.priority = 1;
 80005d4:	2301      	movs	r3, #1
 80005d6:	713b      	strb	r3, [r7, #4]
		for(uint8_t i = 0; i <= 7; i++){
 80005d8:	2300      	movs	r3, #0
 80005da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80005de:	e013      	b.n	8000608 <CAN_Message_Received+0x68>
			ping.data[i] = rxData[i+1] + 1;
 80005e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005e4:	3301      	adds	r3, #1
 80005e6:	3338      	adds	r3, #56	; 0x38
 80005e8:	443b      	add	r3, r7
 80005ea:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 80005ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005f2:	3201      	adds	r2, #1
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	3338      	adds	r3, #56	; 0x38
 80005f8:	443b      	add	r3, r7
 80005fa:	f803 2c31 	strb.w	r2, [r3, #-49]
		for(uint8_t i = 0; i <= 7; i++){
 80005fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000602:	3301      	adds	r3, #1
 8000604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800060c:	2b07      	cmp	r3, #7
 800060e:	d9e7      	bls.n	80005e0 <CAN_Message_Received+0x40>
		}
		CAN_Transmit_Message(ping);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000616:	f7ff ff89 	bl	800052c <CAN_Transmit_Message>
	}
}
 800061a:	bf00      	nop
 800061c:	3738      	adds	r7, #56	; 0x38
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000028 	.word	0x20000028

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fd3e 	bl	80010ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f839 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f9d7 	bl	80009e8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800063a:	f000 f889 	bl	8000750 <MX_CAN1_Init>
  MX_SPI1_Init();
 800063e:	f000 f8e9 	bl	8000814 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000642:	f000 f925 	bl	8000890 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000646:	f000 f961 	bl	800090c <MX_SPI3_Init>
  MX_UART4_Init();
 800064a:	f000 f99d 	bl	8000988 <MX_UART4_Init>
  MX_RTC_Init();
 800064e:	f000 f8b9 	bl	80007c4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  CANMessage_t static testMessage;
  	  	testMessage.DestinationID = 0x3;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <main+0x78>)
 8000654:	2203      	movs	r2, #3
 8000656:	705a      	strb	r2, [r3, #1]
  	  	testMessage.command = 0x1;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <main+0x78>)
 800065a:	2201      	movs	r2, #1
 800065c:	709a      	strb	r2, [r3, #2]
  	  	for(uint8_t index = 0; index <= 7; index++){
 800065e:	2300      	movs	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	e007      	b.n	8000674 <main+0x4c>
  	  		testMessage.data[index] = index;
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <main+0x78>)
 8000668:	4413      	add	r3, r2
 800066a:	79fa      	ldrb	r2, [r7, #7]
 800066c:	70da      	strb	r2, [r3, #3]
  	  	for(uint8_t index = 0; index <= 7; index++){
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	3301      	adds	r3, #1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b07      	cmp	r3, #7
 8000678:	d9f4      	bls.n	8000664 <main+0x3c>
  	  	}
  	  	testMessage.priority = 0x1;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <main+0x78>)
 800067c:	2201      	movs	r2, #1
 800067e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8000680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <main+0x7c>)
 8000686:	f001 fe23 	bl	80022d0 <HAL_GPIO_TogglePin>
	  CAN_Transmit_Message(testMessage);
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <main+0x78>)
 800068c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000690:	f7ff ff4c 	bl	800052c <CAN_Transmit_Message>
	  HAL_Delay(500);
 8000694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000698:	f000 fd42 	bl	8001120 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 800069c:	e7f0      	b.n	8000680 <main+0x58>
 800069e:	bf00      	nop
 80006a0:	20000224 	.word	0x20000224
 80006a4:	48000400 	.word	0x48000400

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	; 0x58
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	; 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 f93e 	bl	8004938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ce:	f001 fe27 	bl	8002320 <HAL_PWREx_ControlVoltageScaling>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d8:	f000 fa4a 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80006dc:	2318      	movs	r3, #24
 80006de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ec:	2360      	movs	r3, #96	; 0x60
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f4:	2301      	movs	r3, #1
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006fc:	2314      	movs	r3, #20
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000700:	2307      	movs	r3, #7
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fe5b 	bl	80023cc <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800071c:	f000 fa28 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	2102      	movs	r1, #2
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fa5b 	bl	8002bf4 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000744:	f000 fa14 	bl	8000b70 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3758      	adds	r7, #88	; 0x58
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_CAN1_Init+0x6c>)
 8000756:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <MX_CAN1_Init+0x70>)
 8000758:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_CAN1_Init+0x6c>)
 800075c:	2210      	movs	r2, #16
 800075e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_CAN1_Init+0x6c>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_CAN1_Init+0x6c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_CAN1_Init+0x6c>)
 8000770:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000774:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_CAN1_Init+0x6c>)
 8000778:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800077c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_CAN1_Init+0x6c>)
 8000780:	2200      	movs	r2, #0
 8000782:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_CAN1_Init+0x6c>)
 8000786:	2200      	movs	r2, #0
 8000788:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_CAN1_Init+0x6c>)
 800078c:	2200      	movs	r2, #0
 800078e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_CAN1_Init+0x6c>)
 8000792:	2200      	movs	r2, #0
 8000794:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_CAN1_Init+0x6c>)
 8000798:	2200      	movs	r2, #0
 800079a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_CAN1_Init+0x6c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <MX_CAN1_Init+0x6c>)
 80007a4:	f000 fce0 	bl	8001168 <HAL_CAN_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80007ae:	f000 f9df 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_Boot();
 80007b2:	f7ff fe91 	bl	80004d8 <CAN_Boot>
  /* USER CODE END CAN1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000028 	.word	0x20000028
 80007c0:	40006400 	.word	0x40006400

080007c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_RTC_Init+0x48>)
 80007ca:	4a11      	ldr	r2, [pc, #68]	; (8000810 <MX_RTC_Init+0x4c>)
 80007cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_RTC_Init+0x48>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_RTC_Init+0x48>)
 80007d6:	227f      	movs	r2, #127	; 0x7f
 80007d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_RTC_Init+0x48>)
 80007dc:	22ff      	movs	r2, #255	; 0xff
 80007de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <MX_RTC_Init+0x48>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_RTC_Init+0x48>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <MX_RTC_Init+0x48>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_RTC_Init+0x48>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_RTC_Init+0x48>)
 80007fa:	f002 ffaf 	bl	800375c <HAL_RTC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000804:	f000 f9b4 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000050 	.word	0x20000050
 8000810:	40002800 	.word	0x40002800

08000814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_SPI1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_SPI1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_SPI1_Init+0x74>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI1_Init+0x74>)
 800082e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000832:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_SPI1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI1_Init+0x74>)
 8000842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000846:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_SPI1_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI1_Init+0x74>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_SPI1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI1_Init+0x74>)
 800086e:	2208      	movs	r2, #8
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_SPI1_Init+0x74>)
 8000874:	f003 f884 	bl	8003980 <HAL_SPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 f977 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000074 	.word	0x20000074
 800088c:	40013000 	.word	0x40013000

08000890 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_SPI2_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_SPI2_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_SPI2_Init+0x74>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_SPI2_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_SPI2_Init+0x74>)
 80008aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_SPI2_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_SPI2_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_SPI2_Init+0x74>)
 80008be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_SPI2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_SPI2_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_SPI2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_SPI2_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_SPI2_Init+0x74>)
 80008de:	2207      	movs	r2, #7
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_SPI2_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_SPI2_Init+0x74>)
 80008ea:	2208      	movs	r2, #8
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_SPI2_Init+0x74>)
 80008f0:	f003 f846 	bl	8003980 <HAL_SPI_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 f939 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000d8 	.word	0x200000d8
 8000908:	40003800 	.word	0x40003800

0800090c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_SPI3_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_SPI3_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_SPI3_Init+0x74>)
 8000918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800091c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_SPI3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000924:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_SPI3_Init+0x74>)
 8000926:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800092a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_SPI3_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_SPI3_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_SPI3_Init+0x74>)
 800093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_SPI3_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_SPI3_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_SPI3_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_SPI3_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_SPI3_Init+0x74>)
 800095a:	2207      	movs	r2, #7
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_SPI3_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_SPI3_Init+0x74>)
 8000966:	2208      	movs	r2, #8
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_SPI3_Init+0x74>)
 800096c:	f003 f808 	bl	8003980 <HAL_SPI_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 f8fb 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000013c 	.word	0x2000013c
 8000984:	40003c00 	.word	0x40003c00

08000988 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_UART4_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_UART4_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_UART4_Init+0x58>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_UART4_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_UART4_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_UART4_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_UART4_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_UART4_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_UART4_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_UART4_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_UART4_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_UART4_Init+0x58>)
 80009cc:	f003 fb0c 	bl	8003fe8 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 f8cb 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200001a0 	.word	0x200001a0
 80009e4:	40004c00 	.word	0x40004c00

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a43      	ldr	r2, [pc, #268]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a3d      	ldr	r2, [pc, #244]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a37      	ldr	r2, [pc, #220]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <MX_GPIO_Init+0x140>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WDI_Pin|M_nRESET_Pin|UHF_nCS_Pin|FLASH_nCS_Pin
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f240 11d3 	movw	r1, #467	; 0x1d3
 8000a64:	4831      	ldr	r0, [pc, #196]	; (8000b2c <MX_GPIO_Init+0x144>)
 8000a66:	f001 fc1b 	bl	80022a0 <HAL_GPIO_WritePin>
                          |FLASH_nHOLD_Pin|UHF_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_FSH_Pin|CAM_ON_Pin|MRAM_nWP_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f248 010c 	movw	r1, #32780	; 0x800c
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f001 fc14 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|FLASH_nWP_Pin
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f641 41c4 	movw	r1, #7364	; 0x1cc4
 8000a7e:	482c      	ldr	r0, [pc, #176]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000a80:	f001 fc0e 	bl	80022a0 <HAL_GPIO_WritePin>
                          |RELEASE_nEN_Pin|RELEASE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MRAM_nCS_GPIO_Port, MRAM_nCS_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2104      	movs	r1, #4
 8000a88:	482a      	ldr	r0, [pc, #168]	; (8000b34 <MX_GPIO_Init+0x14c>)
 8000a8a:	f001 fc09 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WDI_Pin M_nRESET_Pin UHF_nCS_Pin FLASH_nCS_Pin
                           FLASH_nHOLD_Pin UHF_SDN_Pin */
  GPIO_InitStruct.Pin = WDI_Pin|M_nRESET_Pin|UHF_nCS_Pin|FLASH_nCS_Pin
 8000a8e:	f240 13d3 	movw	r3, #467	; 0x1d3
 8000a92:	617b      	str	r3, [r7, #20]
                          |FLASH_nHOLD_Pin|UHF_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4821      	ldr	r0, [pc, #132]	; (8000b2c <MX_GPIO_Init+0x144>)
 8000aa8:	f001 fa80 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_FSH_Pin CAM_ON_Pin MRAM_nWP_Pin */
  GPIO_InitStruct.Pin = CAM_FSH_Pin|CAM_ON_Pin|MRAM_nWP_Pin;
 8000aac:	f248 030c 	movw	r3, #32780	; 0x800c
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f001 fa70 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : UHF_nIRQ_Pin */
  GPIO_InitStruct.Pin = UHF_nIRQ_Pin;
 8000acc:	2320      	movs	r3, #32
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UHF_nIRQ_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4812      	ldr	r0, [pc, #72]	; (8000b2c <MX_GPIO_Init+0x144>)
 8000ae2:	f001 fa63 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin FLASH_nWP_Pin
                           RELEASE_nEN_Pin RELEASE_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|FLASH_nWP_Pin
 8000ae6:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 8000aea:	617b      	str	r3, [r7, #20]
                          |RELEASE_nEN_Pin|RELEASE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_GPIO_Init+0x148>)
 8000b00:	f001 fa54 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : MRAM_nCS_Pin */
  GPIO_InitStruct.Pin = MRAM_nCS_Pin;
 8000b04:	2304      	movs	r3, #4
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MRAM_nCS_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <MX_GPIO_Init+0x14c>)
 8000b1c:	f001 fa46 	bl	8001fac <HAL_GPIO_Init>

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48000c00 	.word	0x48000c00

08000b38 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	CAN_Message_Received();
 8000b40:	f7ff fd2e 	bl	80005a0 <CAN_Message_Received>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5e:	f000 fabf 	bl	80010e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40001000 	.word	0x40001000

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <HAL_CAN_MspInit+0x90>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d131      	bne.n	8000c4a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_CAN_MspInit+0x94>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <HAL_CAN_MspInit+0x94>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_CAN_MspInit+0x94>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_CAN_MspInit+0x94>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <HAL_CAN_MspInit+0x94>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_CAN_MspInit+0x94>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c28:	2309      	movs	r3, #9
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f001 f9b9 	bl	8001fac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2014      	movs	r0, #20
 8000c40:	f001 f98a 	bl	8001f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c44:	2014      	movs	r0, #20
 8000c46:	f001 f9a3 	bl	8001f90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40006400 	.word	0x40006400
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09c      	sub	sp, #112	; 0x70
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	2268      	movs	r2, #104	; 0x68
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fe63 	bl	8004938 <memset>
  if(hrtc->Instance==RTC)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_RTC_MspInit+0x58>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d117      	bne.n	8000cac <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c86:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fa07 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c98:	f7ff ff6a 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_RTC_MspInit+0x5c>)
 8000c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <HAL_RTC_MspInit+0x5c>)
 8000ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3770      	adds	r7, #112	; 0x70
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40002800 	.word	0x40002800
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <HAL_SPI_MspInit+0x138>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d129      	bne.n	8000d32 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce2:	4a45      	ldr	r2, [pc, #276]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cea:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf2:	623b      	str	r3, [r7, #32]
 8000cf4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a3f      	ldr	r2, [pc, #252]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d0e:	23e0      	movs	r3, #224	; 0xe0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f001 f93e 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d30:	e05c      	b.n	8000dec <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI2)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a31      	ldr	r2, [pc, #196]	; (8000dfc <HAL_SPI_MspInit+0x140>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d129      	bne.n	8000d90 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d3c:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	4a2d      	ldr	r2, [pc, #180]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d46:	6593      	str	r3, [r2, #88]	; 0x58
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d50:	61bb      	str	r3, [r7, #24]
 8000d52:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	4a27      	ldr	r2, [pc, #156]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d60:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d6c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	481d      	ldr	r0, [pc, #116]	; (8000e00 <HAL_SPI_MspInit+0x144>)
 8000d8a:	f001 f90f 	bl	8001fac <HAL_GPIO_Init>
}
 8000d8e:	e02d      	b.n	8000dec <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1b      	ldr	r2, [pc, #108]	; (8000e04 <HAL_SPI_MspInit+0x148>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d128      	bne.n	8000dec <HAL_SPI_MspInit+0x130>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	4a16      	ldr	r2, [pc, #88]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_SPI_MspInit+0x13c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000dca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ddc:	2306      	movs	r3, #6
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <HAL_SPI_MspInit+0x14c>)
 8000de8:	f001 f8e0 	bl	8001fac <HAL_GPIO_Init>
}
 8000dec:	bf00      	nop
 8000dee:	3738      	adds	r7, #56	; 0x38
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40013000 	.word	0x40013000
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40003800 	.word	0x40003800
 8000e00:	48000400 	.word	0x48000400
 8000e04:	40003c00 	.word	0x40003c00
 8000e08:	48000800 	.word	0x48000800

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0a4      	sub	sp, #144	; 0x90
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2268      	movs	r2, #104	; 0x68
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fd83 	bl	8004938 <memset>
  if(huart->Instance==UART4)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <HAL_UART_MspInit+0xb0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d13a      	bne.n	8000eb2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 f929 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e54:	f7ff fe8c 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5c:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e62:	6593      	str	r3, [r2, #88]	; 0x58
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_UART_MspInit+0xb4>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f001 f87d 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3790      	adds	r7, #144	; 0x90
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004c00 	.word	0x40004c00
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	; 0x38
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <HAL_InitTick+0xe0>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <HAL_InitTick+0xe0>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <HAL_InitTick+0xe0>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eea:	f107 0210 	add.w	r2, r7, #16
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 f841 	bl	8002f7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f04:	f002 f80e 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8000f08:	6378      	str	r0, [r7, #52]	; 0x34
 8000f0a:	e004      	b.n	8000f16 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f0c:	f002 f80a 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8000f10:	4603      	mov	r3, r0
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f18:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <HAL_InitTick+0xe4>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	0c9b      	lsrs	r3, r3, #18
 8000f20:	3b01      	subs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <HAL_InitTick+0xe8>)
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <HAL_InitTick+0xec>)
 8000f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <HAL_InitTick+0xe8>)
 8000f2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f32:	4a1e      	ldr	r2, [pc, #120]	; (8000fac <HAL_InitTick+0xe8>)
 8000f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_InitTick+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_InitTick+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_InitTick+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f4a:	4818      	ldr	r0, [pc, #96]	; (8000fac <HAL_InitTick+0xe8>)
 8000f4c:	f002 fdbb 	bl	8003ac6 <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d11b      	bne.n	8000f96 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f5e:	4813      	ldr	r0, [pc, #76]	; (8000fac <HAL_InitTick+0xe8>)
 8000f60:	f002 fe12 	bl	8003b88 <HAL_TIM_Base_Start_IT>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d111      	bne.n	8000f96 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f72:	2036      	movs	r0, #54	; 0x36
 8000f74:	f001 f80c 	bl	8001f90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	d808      	bhi.n	8000f90 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	2036      	movs	r0, #54	; 0x36
 8000f84:	f000 ffe8 	bl	8001f58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_InitTick+0xf0>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e002      	b.n	8000f96 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3738      	adds	r7, #56	; 0x38
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	431bde83 	.word	0x431bde83
 8000fac:	20000230 	.word	0x20000230
 8000fb0:	40001000 	.word	0x40001000
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <CAN1_RX0_IRQHandler+0x10>)
 8001016:	f000 fcb8 	bl	800198a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000028 	.word	0x20000028

08001024 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM6_DAC_IRQHandler+0x10>)
 800102a:	f002 fe09 	bl	8003c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000230 	.word	0x20000230

08001038 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <SystemInit+0x20>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <SystemInit+0x20>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001094 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001060:	f7ff ffea 	bl	8001038 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <LoopForever+0x6>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	; (800109c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <LoopForever+0xe>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	; (80010a8 <LoopForever+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f003 fc31 	bl	80048f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800108e:	f7ff facb 	bl	8000628 <main>

08001092 <LoopForever>:

LoopForever:
    b LoopForever
 8001092:	e7fe      	b.n	8001092 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001094:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010a0:	080049b8 	.word	0x080049b8
  ldr r2, =_sbss
 80010a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010a8:	20000280 	.word	0x20000280

080010ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC1_IRQHandler>

080010ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 ff42 	bl	8001f42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010be:	200f      	movs	r0, #15
 80010c0:	f7ff ff00 	bl	8000ec4 <HAL_InitTick>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	e001      	b.n	80010d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d0:	f7ff fd54 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	2000027c 	.word	0x2000027c

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000027c 	.word	0x2000027c

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008

08001168 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0ed      	b.n	8001356 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fd1c 	bl	8000bc4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800119c:	f7ff ffb4 	bl	8001108 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011a2:	e012      	b.n	80011ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a4:	f7ff ffb0 	bl	8001108 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b0a      	cmp	r3, #10
 80011b0:	d90b      	bls.n	80011ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2205      	movs	r2, #5
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0c5      	b.n	8001356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0e5      	beq.n	80011a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0202 	bic.w	r2, r2, #2
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e8:	f7ff ff8e 	bl	8001108 <HAL_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ee:	e012      	b.n	8001216 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f0:	f7ff ff8a 	bl	8001108 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d90b      	bls.n	8001216 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2205      	movs	r2, #5
 800120e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e09f      	b.n	8001356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1e5      	bne.n	80011f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7e1b      	ldrb	r3, [r3, #24]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d108      	bne.n	800123e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e007      	b.n	800124e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7e5b      	ldrb	r3, [r3, #25]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d108      	bne.n	8001268 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e007      	b.n	8001278 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001276:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d108      	bne.n	8001292 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0220 	orr.w	r2, r2, #32
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e007      	b.n	80012a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0220 	bic.w	r2, r2, #32
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7edb      	ldrb	r3, [r3, #27]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d108      	bne.n	80012bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0210 	bic.w	r2, r2, #16
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e007      	b.n	80012cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0210 	orr.w	r2, r2, #16
 80012ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7f1b      	ldrb	r3, [r3, #28]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d108      	bne.n	80012e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0208 	orr.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e007      	b.n	80012f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0208 	bic.w	r2, r2, #8
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7f5b      	ldrb	r3, [r3, #29]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d108      	bne.n	8001310 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0204 	orr.w	r2, r2, #4
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e007      	b.n	8001320 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0204 	bic.w	r2, r2, #4
 800131e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	ea42 0103 	orr.w	r1, r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	1e5a      	subs	r2, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800135e:	b480      	push	{r7}
 8001360:	b087      	sub	sp, #28
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001374:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001376:	7cfb      	ldrb	r3, [r7, #19]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d003      	beq.n	8001384 <HAL_CAN_ConfigFilter+0x26>
 800137c:	7cfb      	ldrb	r3, [r7, #19]
 800137e:	2b02      	cmp	r3, #2
 8001380:	f040 80aa 	bne.w	80014d8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800138a:	f043 0201 	orr.w	r2, r3, #1
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	2201      	movs	r2, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d123      	bne.n	8001406 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	401a      	ands	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3248      	adds	r2, #72	; 0x48
 80013e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013fc:	6979      	ldr	r1, [r7, #20]
 80013fe:	3348      	adds	r3, #72	; 0x48
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d122      	bne.n	8001454 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	431a      	orrs	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800142e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3248      	adds	r2, #72	; 0x48
 8001434:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001448:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800144a:	6979      	ldr	r1, [r7, #20]
 800144c:	3348      	adds	r3, #72	; 0x48
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d109      	bne.n	8001470 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43db      	mvns	r3, r3
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800146e:	e007      	b.n	8001480 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	431a      	orrs	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800149a:	e007      	b.n	80014ac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d107      	bne.n	80014c4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	431a      	orrs	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014ca:	f023 0201 	bic.w	r2, r3, #1
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e006      	b.n	80014e6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d12e      	bne.n	8001564 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2202      	movs	r2, #2
 800150a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800151e:	f7ff fdf3 	bl	8001108 <HAL_GetTick>
 8001522:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001524:	e012      	b.n	800154c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001526:	f7ff fdef 	bl	8001108 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b0a      	cmp	r3, #10
 8001532:	d90b      	bls.n	800154c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e012      	b.n	8001572 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1e5      	bne.n	8001526 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	e006      	b.n	8001572 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
  }
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800157a:	b480      	push	{r7}
 800157c:	b089      	sub	sp, #36	; 0x24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d003      	beq.n	80015a6 <HAL_CAN_AddTxMessage+0x2c>
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	f040 80ad 	bne.w	8001700 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10a      	bne.n	80015c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d105      	bne.n	80015c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8095 	beq.w	80016f0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	0e1b      	lsrs	r3, r3, #24
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015d0:	2201      	movs	r2, #1
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	409a      	lsls	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10d      	bne.n	80015fe <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	6809      	ldr	r1, [r1, #0]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3318      	adds	r3, #24
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	440b      	add	r3, r1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e00f      	b.n	800161e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001608:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800160e:	68f9      	ldr	r1, [r7, #12]
 8001610:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001612:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3318      	adds	r3, #24
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	440b      	add	r3, r1
 800161c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6819      	ldr	r1, [r3, #0]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3318      	adds	r3, #24
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	440b      	add	r3, r1
 800162e:	3304      	adds	r3, #4
 8001630:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	7d1b      	ldrb	r3, [r3, #20]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d111      	bne.n	800165e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3318      	adds	r3, #24
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	4413      	add	r3, r2
 8001646:	3304      	adds	r3, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	6811      	ldr	r1, [r2, #0]
 800164e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3318      	adds	r3, #24
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	440b      	add	r3, r1
 800165a:	3304      	adds	r3, #4
 800165c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3307      	adds	r3, #7
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	061a      	lsls	r2, r3, #24
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3306      	adds	r3, #6
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3305      	adds	r3, #5
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	4313      	orrs	r3, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	3204      	adds	r2, #4
 800167e:	7812      	ldrb	r2, [r2, #0]
 8001680:	4610      	mov	r0, r2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	6811      	ldr	r1, [r2, #0]
 8001686:	ea43 0200 	orr.w	r2, r3, r0
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	440b      	add	r3, r1
 8001690:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001694:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3303      	adds	r3, #3
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	061a      	lsls	r2, r3, #24
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3302      	adds	r3, #2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3301      	adds	r3, #1
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	4313      	orrs	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	4610      	mov	r0, r2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	6811      	ldr	r1, [r2, #0]
 80016bc:	ea43 0200 	orr.w	r2, r3, r0
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	440b      	add	r3, r1
 80016c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80016ca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3318      	adds	r3, #24
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4413      	add	r3, r2
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	6811      	ldr	r1, [r2, #0]
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3318      	adds	r3, #24
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	440b      	add	r3, r1
 80016ea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e00e      	b.n	800170e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e006      	b.n	800170e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
  }
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800171a:	b480      	push	{r7}
 800171c:	b087      	sub	sp, #28
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d003      	beq.n	800173e <HAL_CAN_GetRxMessage+0x24>
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b02      	cmp	r3, #2
 800173a:	f040 80f3 	bne.w	8001924 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10e      	bne.n	8001762 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d116      	bne.n	8001780 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0e7      	b.n	8001932 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0d8      	b.n	8001932 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	331b      	adds	r3, #27
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0204 	and.w	r2, r3, #4
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	331b      	adds	r3, #27
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0d5b      	lsrs	r3, r3, #21
 80017ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	331b      	adds	r3, #27
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	331b      	adds	r3, #27
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0202 	and.w	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	331b      	adds	r3, #27
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	3304      	adds	r3, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 020f 	and.w	r2, r3, #15
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	331b      	adds	r3, #27
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	4413      	add	r3, r2
 800180a:	3304      	adds	r3, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b2da      	uxtb	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	331b      	adds	r3, #27
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	4413      	add	r3, r2
 8001822:	3304      	adds	r3, #4
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	b29a      	uxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0a1a      	lsrs	r2, r3, #8
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0c1a      	lsrs	r2, r3, #16
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	3302      	adds	r3, #2
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4413      	add	r3, r2
 8001882:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0e1a      	lsrs	r2, r3, #24
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3303      	adds	r3, #3
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3304      	adds	r3, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	0a1a      	lsrs	r2, r3, #8
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	3305      	adds	r3, #5
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0c1a      	lsrs	r2, r3, #16
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	3306      	adds	r3, #6
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0e1a      	lsrs	r2, r3, #24
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	3307      	adds	r3, #7
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d108      	bne.n	8001910 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0220 	orr.w	r2, r2, #32
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	e007      	b.n	8001920 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0220 	orr.w	r2, r2, #32
 800191e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	e006      	b.n	8001932 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
  }
}
 8001932:	4618      	mov	r0, r3
 8001934:	371c      	adds	r7, #28
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d002      	beq.n	800195c <HAL_CAN_ActivateNotification+0x1e>
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d109      	bne.n	8001970 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6959      	ldr	r1, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	e006      	b.n	800197e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
  }
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b08a      	sub	sp, #40	; 0x28
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d07c      	beq.n	8001aca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d023      	beq.n	8001a22 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f983 	bl	8001cf8 <HAL_CAN_TxMailbox0CompleteCallback>
 80019f2:	e016      	b.n	8001a22 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
 8001a06:	e00c      	b.n	8001a22 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d004      	beq.n	8001a1c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	e002      	b.n	8001a22 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f989 	bl	8001d34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d024      	beq.n	8001a76 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f963 	bl	8001d0c <HAL_CAN_TxMailbox1CompleteCallback>
 8001a46:	e016      	b.n	8001a76 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5a:	e00c      	b.n	8001a76 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	e002      	b.n	8001a76 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f969 	bl	8001d48 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d024      	beq.n	8001aca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f943 	bl	8001d20 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a9a:	e016      	b.n	8001aca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
 8001aae:	e00c      	b.n	8001aca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	e002      	b.n	8001aca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f949 	bl	8001d5c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00c      	beq.n	8001aee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2210      	movs	r2, #16
 8001aec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00b      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2208      	movs	r2, #8
 8001b08:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f930 	bl	8001d70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff f805 	bl	8000b38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00c      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2210      	movs	r2, #16
 8001b50:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00b      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f912 	bl	8001d98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f8f9 	bl	8001d84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2210      	movs	r2, #16
 8001bac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8fc 	bl	8001dac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2208      	movs	r2, #8
 8001bce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f8f5 	bl	8001dc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d07b      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d072      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d043      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03e      	beq.n	8001cd0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c58:	2b60      	cmp	r3, #96	; 0x60
 8001c5a:	d02b      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x32a>
 8001c5c:	2b60      	cmp	r3, #96	; 0x60
 8001c5e:	d82e      	bhi.n	8001cbe <HAL_CAN_IRQHandler+0x334>
 8001c60:	2b50      	cmp	r3, #80	; 0x50
 8001c62:	d022      	beq.n	8001caa <HAL_CAN_IRQHandler+0x320>
 8001c64:	2b50      	cmp	r3, #80	; 0x50
 8001c66:	d82a      	bhi.n	8001cbe <HAL_CAN_IRQHandler+0x334>
 8001c68:	2b40      	cmp	r3, #64	; 0x40
 8001c6a:	d019      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x316>
 8001c6c:	2b40      	cmp	r3, #64	; 0x40
 8001c6e:	d826      	bhi.n	8001cbe <HAL_CAN_IRQHandler+0x334>
 8001c70:	2b30      	cmp	r3, #48	; 0x30
 8001c72:	d010      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x30c>
 8001c74:	2b30      	cmp	r3, #48	; 0x30
 8001c76:	d822      	bhi.n	8001cbe <HAL_CAN_IRQHandler+0x334>
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d002      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x2f8>
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d005      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c80:	e01d      	b.n	8001cbe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8a:	e019      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	f043 0310 	orr.w	r3, r3, #16
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c94:	e014      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c9e:	e00f      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ca8:	e00a      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cb2:	e005      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cbc:	e000      	b.n	8001cc0 <HAL_CAN_IRQHandler+0x336>
            break;
 8001cbe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f872 	bl	8001dd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4907      	ldr	r1, [pc, #28]	; (8001e84 <__NVIC_EnableIRQ+0x38>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ff4c 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6a:	f7ff ff61 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001f6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	6978      	ldr	r0, [r7, #20]
 8001f76:	f7ff ffb1 	bl	8001edc <NVIC_EncodePriority>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff80 	bl	8001e88 <__NVIC_SetPriority>
}
 8001f88:	bf00      	nop
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff54 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fba:	e154      	b.n	8002266 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8146 	beq.w	8002260 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d005      	beq.n	8001fec <HAL_GPIO_Init+0x40>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d130      	bne.n	800204e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002022:	2201      	movs	r2, #1
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 0201 	and.w	r2, r3, #1
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b03      	cmp	r3, #3
 8002058:	d017      	beq.n	800208a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d123      	bne.n	80020de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	6939      	ldr	r1, [r7, #16]
 80020da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0203 	and.w	r2, r3, #3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80a0 	beq.w	8002260 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002120:	4b58      	ldr	r3, [pc, #352]	; (8002284 <HAL_GPIO_Init+0x2d8>)
 8002122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002124:	4a57      	ldr	r2, [pc, #348]	; (8002284 <HAL_GPIO_Init+0x2d8>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6613      	str	r3, [r2, #96]	; 0x60
 800212c:	4b55      	ldr	r3, [pc, #340]	; (8002284 <HAL_GPIO_Init+0x2d8>)
 800212e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002138:	4a53      	ldr	r2, [pc, #332]	; (8002288 <HAL_GPIO_Init+0x2dc>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002162:	d019      	beq.n	8002198 <HAL_GPIO_Init+0x1ec>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a49      	ldr	r2, [pc, #292]	; (800228c <HAL_GPIO_Init+0x2e0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <HAL_GPIO_Init+0x1e8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a48      	ldr	r2, [pc, #288]	; (8002290 <HAL_GPIO_Init+0x2e4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d00d      	beq.n	8002190 <HAL_GPIO_Init+0x1e4>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a47      	ldr	r2, [pc, #284]	; (8002294 <HAL_GPIO_Init+0x2e8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <HAL_GPIO_Init+0x1e0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_GPIO_Init+0x2ec>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d101      	bne.n	8002188 <HAL_GPIO_Init+0x1dc>
 8002184:	2304      	movs	r3, #4
 8002186:	e008      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002188:	2307      	movs	r3, #7
 800218a:	e006      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 800218c:	2303      	movs	r3, #3
 800218e:	e004      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002190:	2302      	movs	r3, #2
 8002192:	e002      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002198:	2300      	movs	r3, #0
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	f002 0203 	and.w	r2, r2, #3
 80021a0:	0092      	lsls	r2, r2, #2
 80021a2:	4093      	lsls	r3, r2
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021aa:	4937      	ldr	r1, [pc, #220]	; (8002288 <HAL_GPIO_Init+0x2dc>)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021e2:	4b2e      	ldr	r3, [pc, #184]	; (800229c <HAL_GPIO_Init+0x2f0>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002206:	4a25      	ldr	r2, [pc, #148]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800220c:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_GPIO_Init+0x2f0>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002230:	4a1a      	ldr	r2, [pc, #104]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_GPIO_Init+0x2f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800225a:	4a10      	ldr	r2, [pc, #64]	; (800229c <HAL_GPIO_Init+0x2f0>)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3301      	adds	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	f47f aea3 	bne.w	8001fbc <HAL_GPIO_Init+0x10>
  }
}
 8002276:	bf00      	nop
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40021000 	.word	0x40021000
 8002288:	40010000 	.word	0x40010000
 800228c:	48000400 	.word	0x48000400
 8002290:	48000800 	.word	0x48000800
 8002294:	48000c00 	.word	0x48000c00
 8002298:	48001000 	.word	0x48001000
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43d9      	mvns	r1, r3
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	400b      	ands	r3, r1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_PWREx_GetVoltageRange+0x18>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40007000 	.word	0x40007000

08002320 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232e:	d130      	bne.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800233c:	d038      	beq.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002348:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2232      	movs	r2, #50	; 0x32
 8002354:	fb02 f303 	mul.w	r3, r2, r3
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0c9b      	lsrs	r3, r3, #18
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002364:	e002      	b.n	800236c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3b01      	subs	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002378:	d102      	bne.n	8002380 <HAL_PWREx_ControlVoltageScaling+0x60>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f2      	bne.n	8002366 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238c:	d110      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e00f      	b.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239e:	d007      	beq.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a8:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40007000 	.word	0x40007000
 80023c4:	20000000 	.word	0x20000000
 80023c8:	431bde83 	.word	0x431bde83

080023cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	f000 bc02 	b.w	8002be4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e0:	4b96      	ldr	r3, [pc, #600]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ea:	4b94      	ldr	r3, [pc, #592]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80e4 	beq.w	80025ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_RCC_OscConfig+0x4c>
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b0c      	cmp	r3, #12
 800240c:	f040 808b 	bne.w	8002526 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b01      	cmp	r3, #1
 8002414:	f040 8087 	bne.w	8002526 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002418:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x64>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e3d9      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1a      	ldr	r2, [r3, #32]
 8002434:	4b81      	ldr	r3, [pc, #516]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_RCC_OscConfig+0x7e>
 8002440:	4b7e      	ldr	r3, [pc, #504]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002448:	e005      	b.n	8002456 <HAL_RCC_OscConfig+0x8a>
 800244a:	4b7c      	ldr	r3, [pc, #496]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800244c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002456:	4293      	cmp	r3, r2
 8002458:	d223      	bcs.n	80024a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fdbe 	bl	8002fe0 <RCC_SetFlashLatencyFromMSIRange>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e3ba      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800246e:	4b73      	ldr	r3, [pc, #460]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a72      	ldr	r2, [pc, #456]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	496d      	ldr	r1, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800248c:	4b6b      	ldr	r3, [pc, #428]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	4968      	ldr	r1, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	e025      	b.n	80024ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a2:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4960      	ldr	r1, [pc, #384]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c0:	4b5e      	ldr	r3, [pc, #376]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	495b      	ldr	r1, [pc, #364]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fd7e 	bl	8002fe0 <RCC_SetFlashLatencyFromMSIRange>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e37a      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ee:	f000 fc81 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	4950      	ldr	r1, [pc, #320]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	fa22 f303 	lsr.w	r3, r2, r3
 800250a:	4a4e      	ldr	r2, [pc, #312]	; (8002644 <HAL_RCC_OscConfig+0x278>)
 800250c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800250e:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <HAL_RCC_OscConfig+0x27c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fcd6 	bl	8000ec4 <HAL_InitTick>
 8002518:	4603      	mov	r3, r0
 800251a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d052      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	e35e      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d032      	beq.n	8002594 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800252e:	4b43      	ldr	r3, [pc, #268]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a42      	ldr	r2, [pc, #264]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800253a:	f7fe fde5 	bl	8001108 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002542:	f7fe fde1 	bl	8001108 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e347      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002554:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a35      	ldr	r2, [pc, #212]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002566:	f043 0308 	orr.w	r3, r3, #8
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4930      	ldr	r1, [pc, #192]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257e:	4b2f      	ldr	r3, [pc, #188]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	492b      	ldr	r1, [pc, #172]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
 8002592:	e01a      	b.n	80025ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a28      	ldr	r2, [pc, #160]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fdb2 	bl	8001108 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025a8:	f7fe fdae 	bl	8001108 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e314      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1dc>
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d073      	beq.n	80026be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_OscConfig+0x21c>
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d10e      	bne.n	8002600 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d063      	beq.n	80026bc <HAL_RCC_OscConfig+0x2f0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d15f      	bne.n	80026bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e2f1      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x24c>
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a0b      	ldr	r2, [pc, #44]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e025      	b.n	8002664 <HAL_RCC_OscConfig+0x298>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002620:	d114      	bne.n	800264c <HAL_RCC_OscConfig+0x280>
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a02      	ldr	r2, [pc, #8]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e013      	b.n	8002664 <HAL_RCC_OscConfig+0x298>
 800263c:	40021000 	.word	0x40021000
 8002640:	08004960 	.word	0x08004960
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004
 800264c:	4ba0      	ldr	r3, [pc, #640]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a9f      	ldr	r2, [pc, #636]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b9d      	ldr	r3, [pc, #628]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a9c      	ldr	r2, [pc, #624]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fd4c 	bl	8001108 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fd48 	bl	8001108 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e2ae      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002686:	4b92      	ldr	r3, [pc, #584]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x2a8>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fd38 	bl	8001108 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe fd34 	bl	8001108 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e29a      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ae:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x2d0>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d060      	beq.n	800278c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_OscConfig+0x310>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d119      	bne.n	800270a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d116      	bne.n	800270a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026dc:	4b7c      	ldr	r3, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x328>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e277      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	4973      	ldr	r1, [pc, #460]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002708:	e040      	b.n	800278c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d023      	beq.n	800275a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002712:	4b6f      	ldr	r3, [pc, #444]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a6e      	ldr	r2, [pc, #440]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe fcf3 	bl	8001108 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002726:	f7fe fcef 	bl	8001108 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e255      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002738:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	061b      	lsls	r3, r3, #24
 8002752:	495f      	ldr	r1, [pc, #380]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
 8002758:	e018      	b.n	800278c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fccf 	bl	8001108 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe fccb 	bl	8001108 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e231      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d03c      	beq.n	8002812 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01c      	beq.n	80027da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a0:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a6:	4a4a      	ldr	r2, [pc, #296]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fcaa 	bl	8001108 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe fca6 	bl	8001108 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e20c      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80027cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ef      	beq.n	80027b8 <HAL_RCC_OscConfig+0x3ec>
 80027d8:	e01b      	b.n	8002812 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80027dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e0:	4a3b      	ldr	r2, [pc, #236]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe fc8d 	bl	8001108 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f2:	f7fe fc89 	bl	8001108 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1ef      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002804:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ef      	bne.n	80027f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80a6 	beq.w	800296c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283a:	6593      	str	r3, [r2, #88]	; 0x58
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002848:	2301      	movs	r3, #1
 800284a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284c:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x508>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d118      	bne.n	800288a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002858:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_RCC_OscConfig+0x508>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <HAL_RCC_OscConfig+0x508>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002864:	f7fe fc50 	bl	8001108 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800286c:	f7fe fc4c 	bl	8001108 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1b2      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_RCC_OscConfig+0x508>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4d8>
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	4a0d      	ldr	r2, [pc, #52]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028a2:	e029      	b.n	80028f8 <HAL_RCC_OscConfig+0x52c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b05      	cmp	r3, #5
 80028aa:	d115      	bne.n	80028d8 <HAL_RCC_OscConfig+0x50c>
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a03      	ldr	r2, [pc, #12]	; (80028d0 <HAL_RCC_OscConfig+0x504>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028cc:	e014      	b.n	80028f8 <HAL_RCC_OscConfig+0x52c>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
 80028d8:	4b9a      	ldr	r3, [pc, #616]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	4a99      	ldr	r2, [pc, #612]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e8:	4b96      	ldr	r3, [pc, #600]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	4a95      	ldr	r2, [pc, #596]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d016      	beq.n	800292e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe fc02 	bl	8001108 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002906:	e00a      	b.n	800291e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe fbfe 	bl	8001108 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e162      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291e:	4b89      	ldr	r3, [pc, #548]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ed      	beq.n	8002908 <HAL_RCC_OscConfig+0x53c>
 800292c:	e015      	b.n	800295a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fbeb 	bl	8001108 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fbe7 	bl	8001108 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e14b      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800294c:	4b7d      	ldr	r3, [pc, #500]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ed      	bne.n	8002936 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295a:	7ffb      	ldrb	r3, [r7, #31]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d105      	bne.n	800296c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002960:	4b78      	ldr	r3, [pc, #480]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	4a77      	ldr	r2, [pc, #476]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d03c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01c      	beq.n	80029ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002980:	4b70      	ldr	r3, [pc, #448]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002982:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002986:	4a6f      	ldr	r2, [pc, #444]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe fbba 	bl	8001108 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002998:	f7fe fbb6 	bl	8001108 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e11c      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029aa:	4b66      	ldr	r3, [pc, #408]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 80029ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ef      	beq.n	8002998 <HAL_RCC_OscConfig+0x5cc>
 80029b8:	e01b      	b.n	80029f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029ba:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 80029bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029c0:	4a60      	ldr	r2, [pc, #384]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe fb9d 	bl	8001108 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029d2:	f7fe fb99 	bl	8001108 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e0ff      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80029e4:	4b57      	ldr	r3, [pc, #348]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 80029e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ef      	bne.n	80029d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80f3 	beq.w	8002be2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	f040 80c9 	bne.w	8002b98 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a06:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f003 0203 	and.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d12c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	3b01      	subs	r3, #1
 8002a26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d123      	bne.n	8002a74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d11b      	bne.n	8002a74 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d113      	bne.n	8002a74 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	085b      	lsrs	r3, r3, #1
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d06b      	beq.n	8002b4c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d062      	beq.n	8002b40 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a7a:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0ac      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a96:	f7fe fb37 	bl	8001108 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7fe fb33 	bl	8001108 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e099      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCC_OscConfig+0x77c>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002acc:	3a01      	subs	r2, #1
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	4311      	orrs	r1, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ad6:	0212      	lsls	r2, r2, #8
 8002ad8:	4311      	orrs	r1, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ade:	0852      	lsrs	r2, r2, #1
 8002ae0:	3a01      	subs	r2, #1
 8002ae2:	0552      	lsls	r2, r2, #21
 8002ae4:	4311      	orrs	r1, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aea:	0852      	lsrs	r2, r2, #1
 8002aec:	3a01      	subs	r2, #1
 8002aee:	0652      	lsls	r2, r2, #25
 8002af0:	4311      	orrs	r1, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af6:	06d2      	lsls	r2, r2, #27
 8002af8:	430a      	orrs	r2, r1
 8002afa:	4912      	ldr	r1, [pc, #72]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0f      	ldr	r2, [pc, #60]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b18:	f7fe faf6 	bl	8001108 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe faf2 	bl	8001108 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e058      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_RCC_OscConfig+0x778>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3e:	e050      	b.n	8002be2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e04f      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
 8002b44:	40021000 	.word	0x40021000
 8002b48:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4c:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d144      	bne.n	8002be2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a23      	ldr	r2, [pc, #140]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b64:	4b21      	ldr	r3, [pc, #132]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a20      	ldr	r2, [pc, #128]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b70:	f7fe faca 	bl	8001108 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe fac6 	bl	8001108 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e02c      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x7ac>
 8002b96:	e024      	b.n	8002be2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d01f      	beq.n	8002bde <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a12      	ldr	r2, [pc, #72]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe faad 	bl	8001108 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe faa9 	bl	8001108 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e00f      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	4905      	ldr	r1, [pc, #20]	; (8002bec <HAL_RCC_OscConfig+0x820>)
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCC_OscConfig+0x824>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]
 8002bdc:	e001      	b.n	8002be2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	feeefffc 	.word	0xfeeefffc

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0e7      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b75      	ldr	r3, [pc, #468]	; (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d910      	bls.n	8002c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 0207 	bic.w	r2, r3, #7
 8002c1e:	4970      	ldr	r1, [pc, #448]	; (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0cf      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	4b66      	ldr	r3, [pc, #408]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d908      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c54:	4b63      	ldr	r3, [pc, #396]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	4960      	ldr	r1, [pc, #384]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d04c      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7a:	4b5a      	ldr	r3, [pc, #360]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0a6      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	4b54      	ldr	r3, [pc, #336]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d115      	bne.n	8002cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e09a      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002caa:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e08e      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cba:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e086      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 0203 	bic.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4943      	ldr	r1, [pc, #268]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cdc:	f7fe fa14 	bl	8001108 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce4:	f7fe fa10 	bl	8001108 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e06e      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 020c 	and.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1eb      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d208      	bcs.n	8002d3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	492b      	ldr	r1, [pc, #172]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d3a:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d210      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 0207 	bic.w	r2, r3, #7
 8002d50:	4923      	ldr	r1, [pc, #140]	; (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d58:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e036      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d76:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4918      	ldr	r1, [pc, #96]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d009      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4910      	ldr	r1, [pc, #64]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da8:	f000 f824 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <HAL_RCC_ClockConfig+0x1f0>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	490b      	ldr	r1, [pc, #44]	; (8002de8 <HAL_RCC_ClockConfig+0x1f4>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc4:	4a09      	ldr	r2, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x1f8>)
 8002dc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_RCC_ClockConfig+0x1fc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f879 	bl	8000ec4 <HAL_InitTick>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40022000 	.word	0x40022000
 8002de4:	40021000 	.word	0x40021000
 8002de8:	08004960 	.word	0x08004960
 8002dec:	20000000 	.word	0x20000000
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d121      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d11e      	bne.n	8002e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e28:	4b34      	ldr	r3, [pc, #208]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e34:	4b31      	ldr	r3, [pc, #196]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	e005      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e44:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e50:	4a2b      	ldr	r2, [pc, #172]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d102      	bne.n	8002e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e004      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e78:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d134      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e82:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d003      	beq.n	8002e9a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xac>
 8002e98:	e005      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e9c:	617b      	str	r3, [r7, #20]
      break;
 8002e9e:	e005      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ea2:	617b      	str	r3, [r7, #20]
      break;
 8002ea4:	e002      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	617b      	str	r3, [r7, #20]
      break;
 8002eaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	fb03 f202 	mul.w	r2, r3, r2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ed2:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	0e5b      	lsrs	r3, r3, #25
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	3301      	adds	r3, #1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eec:	69bb      	ldr	r3, [r7, #24]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	08004978 	.word	0x08004978
 8002f04:	00f42400 	.word	0x00f42400
 8002f08:	007a1200 	.word	0x007a1200

08002f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000000 	.word	0x20000000

08002f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f28:	f7ff fff0 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0a1b      	lsrs	r3, r3, #8
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4904      	ldr	r1, [pc, #16]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08004970 	.word	0x08004970

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f54:	f7ff ffda 	bl	8002f0c <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	0adb      	lsrs	r3, r3, #11
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4904      	ldr	r1, [pc, #16]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	08004970 	.word	0x08004970

08002f7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	220f      	movs	r2, #15
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0203 	and.w	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	08db      	lsrs	r3, r3, #3
 8002fb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_RCC_GetClockConfig+0x60>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0207 	and.w	r2, r3, #7
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	601a      	str	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40022000 	.word	0x40022000

08002fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ff8:	f7ff f984 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 8002ffc:	6178      	str	r0, [r7, #20]
 8002ffe:	e014      	b.n	800302a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6593      	str	r3, [r2, #88]	; 0x58
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003018:	f7ff f974 	bl	8002304 <HAL_PWREx_GetVoltageRange>
 800301c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003030:	d10b      	bne.n	800304a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d919      	bls.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2ba0      	cmp	r3, #160	; 0xa0
 800303c:	d902      	bls.n	8003044 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800303e:	2302      	movs	r3, #2
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	e013      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003044:	2301      	movs	r3, #1
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	e010      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d902      	bls.n	8003056 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003050:	2303      	movs	r3, #3
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	e00a      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b80      	cmp	r3, #128	; 0x80
 800305a:	d102      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800305c:	2302      	movs	r3, #2
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e004      	b.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b70      	cmp	r3, #112	; 0x70
 8003066:	d101      	bne.n	800306c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003068:	2301      	movs	r3, #1
 800306a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 0207 	bic.w	r2, r3, #7
 8003074:	4909      	ldr	r1, [pc, #36]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	429a      	cmp	r2, r3
 8003088:	d001      	beq.n	800308e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	40022000 	.word	0x40022000

080030a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030a8:	2300      	movs	r3, #0
 80030aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030ac:	2300      	movs	r3, #0
 80030ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d031      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030c4:	d01a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80030c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ca:	d814      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030d4:	d10f      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80030d6:	4b5d      	ldr	r3, [pc, #372]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a5c      	ldr	r2, [pc, #368]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030e2:	e00c      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fa44 	bl	8003578 <RCCEx_PLLSAI1_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030f4:	e003      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	74fb      	strb	r3, [r7, #19]
      break;
 80030fa:	e000      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80030fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003104:	4b51      	ldr	r3, [pc, #324]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	494e      	ldr	r1, [pc, #312]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800311a:	e001      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	7cfb      	ldrb	r3, [r7, #19]
 800311e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 809e 	beq.w	800326a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003132:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00d      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	4a3f      	ldr	r2, [pc, #252]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	6593      	str	r3, [r2, #88]	; 0x58
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003160:	2301      	movs	r3, #1
 8003162:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a39      	ldr	r2, [pc, #228]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800316a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003170:	f7fd ffca 	bl	8001108 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003176:	e009      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fd ffc6 	bl	8001108 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d902      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	74fb      	strb	r3, [r7, #19]
        break;
 800318a:	e005      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800318c:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ef      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d15a      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01e      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d019      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	4a1f      	ldr	r2, [pc, #124]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031d6:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	4a1b      	ldr	r2, [pc, #108]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031e6:	4a19      	ldr	r2, [pc, #100]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d016      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fd ff86 	bl	8001108 <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fe:	e00b      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f7fd ff82 	bl	8001108 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	; 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d902      	bls.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	74fb      	strb	r3, [r7, #19]
            break;
 8003216:	e006      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ec      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800323a:	4904      	ldr	r1, [pc, #16]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003242:	e009      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	74bb      	strb	r3, [r7, #18]
 8003248:	e006      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003258:	7c7b      	ldrb	r3, [r7, #17]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325e:	4b9e      	ldr	r3, [pc, #632]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	4a9d      	ldr	r2, [pc, #628]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003268:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003276:	4b98      	ldr	r3, [pc, #608]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f023 0203 	bic.w	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4994      	ldr	r1, [pc, #592]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003298:	4b8f      	ldr	r3, [pc, #572]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f023 020c 	bic.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	498c      	ldr	r1, [pc, #560]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ba:	4b87      	ldr	r3, [pc, #540]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	4983      	ldr	r1, [pc, #524]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032dc:	4b7e      	ldr	r3, [pc, #504]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	497b      	ldr	r1, [pc, #492]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003304:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	4972      	ldr	r1, [pc, #456]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003320:	4b6d      	ldr	r3, [pc, #436]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003326:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	496a      	ldr	r1, [pc, #424]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003342:	4b65      	ldr	r3, [pc, #404]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003350:	4961      	ldr	r1, [pc, #388]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003364:	4b5c      	ldr	r3, [pc, #368]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003372:	4959      	ldr	r1, [pc, #356]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003386:	4b54      	ldr	r3, [pc, #336]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	4950      	ldr	r1, [pc, #320]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033a8:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	4948      	ldr	r1, [pc, #288]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ca:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033d0:	f023 0203 	bic.w	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	493f      	ldr	r1, [pc, #252]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d028      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033ec:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	4937      	ldr	r1, [pc, #220]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800340a:	d106      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340c:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4a31      	ldr	r2, [pc, #196]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003416:	60d3      	str	r3, [r2, #12]
 8003418:	e011      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003422:	d10c      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	2101      	movs	r1, #1
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f8a4 	bl	8003578 <RCCEx_PLLSAI1_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d028      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800344a:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003458:	491f      	ldr	r1, [pc, #124]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003468:	d106      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003474:	60d3      	str	r3, [r2, #12]
 8003476:	e011      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003480:	d10c      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	2101      	movs	r1, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f000 f875 	bl	8003578 <RCCEx_PLLSAI1_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02b      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a8:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4908      	ldr	r1, [pc, #32]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c6:	d109      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c8:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a02      	ldr	r2, [pc, #8]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034d2:	60d3      	str	r3, [r2, #12]
 80034d4:	e014      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2101      	movs	r1, #1
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f843 	bl	8003578 <RCCEx_PLLSAI1_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01c      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	4916      	ldr	r1, [pc, #88]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800352a:	d10c      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	2102      	movs	r1, #2
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f820 	bl	8003578 <RCCEx_PLLSAI1_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003560:	4904      	ldr	r1, [pc, #16]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003568:	7cbb      	ldrb	r3, [r7, #18]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40021000 	.word	0x40021000

08003578 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003586:	4b74      	ldr	r3, [pc, #464]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d018      	beq.n	80035c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003592:	4b71      	ldr	r3, [pc, #452]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0203 	and.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d10d      	bne.n	80035be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
       ||
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035aa:	4b6b      	ldr	r3, [pc, #428]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
       ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d047      	beq.n	800364e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
 80035c2:	e044      	b.n	800364e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d018      	beq.n	80035fe <RCCEx_PLLSAI1_Config+0x86>
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d825      	bhi.n	800361c <RCCEx_PLLSAI1_Config+0xa4>
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d002      	beq.n	80035da <RCCEx_PLLSAI1_Config+0x62>
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d009      	beq.n	80035ec <RCCEx_PLLSAI1_Config+0x74>
 80035d8:	e020      	b.n	800361c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035da:	4b5f      	ldr	r3, [pc, #380]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11d      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ea:	e01a      	b.n	8003622 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035ec:	4b5a      	ldr	r3, [pc, #360]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d116      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fc:	e013      	b.n	8003626 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035fe:	4b56      	ldr	r3, [pc, #344]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10f      	bne.n	800362a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800360a:	4b53      	ldr	r3, [pc, #332]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800361a:	e006      	b.n	800362a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	e004      	b.n	800362c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003622:	bf00      	nop
 8003624:	e002      	b.n	800362c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800362a:	bf00      	nop
    }

    if(status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10d      	bne.n	800364e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003632:	4b49      	ldr	r3, [pc, #292]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	430b      	orrs	r3, r1
 8003648:	4943      	ldr	r1, [pc, #268]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800364a:	4313      	orrs	r3, r2
 800364c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d17c      	bne.n	800374e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003654:	4b40      	ldr	r3, [pc, #256]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a3f      	ldr	r2, [pc, #252]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800365a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800365e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003660:	f7fd fd52 	bl	8001108 <HAL_GetTick>
 8003664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003666:	e009      	b.n	800367c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003668:	f7fd fd4e 	bl	8001108 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d902      	bls.n	800367c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	73fb      	strb	r3, [r7, #15]
        break;
 800367a:	e005      	b.n	8003688 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800367c:	4b36      	ldr	r3, [pc, #216]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ef      	bne.n	8003668 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d15f      	bne.n	800374e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d110      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003694:	4b30      	ldr	r3, [pc, #192]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800369c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6892      	ldr	r2, [r2, #8]
 80036a4:	0211      	lsls	r1, r2, #8
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68d2      	ldr	r2, [r2, #12]
 80036aa:	06d2      	lsls	r2, r2, #27
 80036ac:	430a      	orrs	r2, r1
 80036ae:	492a      	ldr	r1, [pc, #168]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	610b      	str	r3, [r1, #16]
 80036b4:	e027      	b.n	8003706 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d112      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036bc:	4b26      	ldr	r3, [pc, #152]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6892      	ldr	r2, [r2, #8]
 80036cc:	0211      	lsls	r1, r2, #8
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6912      	ldr	r2, [r2, #16]
 80036d2:	0852      	lsrs	r2, r2, #1
 80036d4:	3a01      	subs	r2, #1
 80036d6:	0552      	lsls	r2, r2, #21
 80036d8:	430a      	orrs	r2, r1
 80036da:	491f      	ldr	r1, [pc, #124]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	610b      	str	r3, [r1, #16]
 80036e0:	e011      	b.n	8003706 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	0211      	lsls	r1, r2, #8
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6952      	ldr	r2, [r2, #20]
 80036f8:	0852      	lsrs	r2, r2, #1
 80036fa:	3a01      	subs	r2, #1
 80036fc:	0652      	lsls	r2, r2, #25
 80036fe:	430a      	orrs	r2, r1
 8003700:	4915      	ldr	r1, [pc, #84]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003702:	4313      	orrs	r3, r2
 8003704:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003706:	4b14      	ldr	r3, [pc, #80]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a13      	ldr	r2, [pc, #76]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800370c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003710:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003712:	f7fd fcf9 	bl	8001108 <HAL_GetTick>
 8003716:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003718:	e009      	b.n	800372e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800371a:	f7fd fcf5 	bl	8001108 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d902      	bls.n	800372e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	73fb      	strb	r3, [r7, #15]
          break;
 800372c:	e005      	b.n	800373a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0ef      	beq.n	800371a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	4903      	ldr	r1, [pc, #12]	; (8003758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800374a:	4313      	orrs	r3, r2
 800374c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	40021000 	.word	0x40021000

0800375c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d06c      	beq.n	8003848 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fa6a 	bl	8000c5c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	22ca      	movs	r2, #202	; 0xca
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2253      	movs	r2, #83	; 0x53
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f87c 	bl	800389e <RTC_EnterInitMode>
 80037a6:	4603      	mov	r3, r0
 80037a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d14b      	bne.n	8003848 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80037be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6899      	ldr	r1, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68d2      	ldr	r2, [r2, #12]
 80037ea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6919      	ldr	r1, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	041a      	lsls	r2, r3, #16
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f87f 	bl	8003904 <RTC_ExitInitMode>
 8003806:	4603      	mov	r3, r0
 8003808:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d11b      	bne.n	8003848 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0203 	bic.w	r2, r2, #3
 800381e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	22ff      	movs	r2, #255	; 0xff
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003868:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800386a:	f7fd fc4d 	bl	8001108 <HAL_GetTick>
 800386e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003870:	e009      	b.n	8003886 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003872:	f7fd fc49 	bl	8001108 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003880:	d901      	bls.n	8003886 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e007      	b.n	8003896 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ee      	beq.n	8003872 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d120      	bne.n	80038fa <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80038c2:	f7fd fc21 	bl	8001108 <HAL_GetTick>
 80038c6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80038c8:	e00d      	b.n	80038e6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80038ca:	f7fd fc1d 	bl	8001108 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038d8:	d905      	bls.n	80038e6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2203      	movs	r2, #3
 80038e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <RTC_EnterInitMode+0x5c>
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d1e7      	bne.n	80038ca <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <RTC_ExitInitMode+0x78>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a19      	ldr	r2, [pc, #100]	; (800397c <RTC_ExitInitMode+0x78>)
 8003916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <RTC_ExitInitMode+0x78>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10c      	bne.n	8003942 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff92 	bl	8003852 <HAL_RTC_WaitForSynchro>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01e      	beq.n	8003972 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2203      	movs	r2, #3
 8003938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e017      	b.n	8003972 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <RTC_ExitInitMode+0x78>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4a0d      	ldr	r2, [pc, #52]	; (800397c <RTC_ExitInitMode+0x78>)
 8003948:	f023 0320 	bic.w	r3, r3, #32
 800394c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff7f 	bl	8003852 <HAL_RTC_WaitForSynchro>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2203      	movs	r2, #3
 800395e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <RTC_ExitInitMode+0x78>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <RTC_ExitInitMode+0x78>)
 800396c:	f043 0320 	orr.w	r3, r3, #32
 8003970:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40002800 	.word	0x40002800

08003980 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e095      	b.n	8003abe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d108      	bne.n	80039ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039a2:	d009      	beq.n	80039b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	61da      	str	r2, [r3, #28]
 80039aa:	e005      	b.n	80039b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd f972 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039f8:	d902      	bls.n	8003a00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e002      	b.n	8003a06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a0e:	d007      	beq.n	8003a20 <HAL_SPI_Init+0xa0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a18:	d002      	beq.n	8003a20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	ea42 0103 	orr.w	r1, r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	f003 0204 	and.w	r2, r3, #4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a9c:	ea42 0103 	orr.w	r1, r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e049      	b.n	8003b6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f841 	bl	8003b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f000 f9e3 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d001      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e040      	b.n	8003c22 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	; (8003c30 <HAL_TIM_Base_Start_IT+0xa8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x58>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bca:	d009      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x58>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <HAL_TIM_Base_Start_IT+0xac>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x58>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d115      	bne.n	8003c0c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <HAL_TIM_Base_Start_IT+0xb4>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d015      	beq.n	8003c1e <HAL_TIM_Base_Start_IT+0x96>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d011      	beq.n	8003c1e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0a:	e008      	b.n	8003c1e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e000      	b.n	8003c20 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40012c00 	.word	0x40012c00
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	00010007 	.word	0x00010007

08003c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d122      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d11b      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0202 	mvn.w	r2, #2
 8003c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f905 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f8f7 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f908 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d122      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d11b      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0204 	mvn.w	r2, #4
 8003cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8db 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003cdc:	e005      	b.n	8003cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8cd 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f8de 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d122      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d11b      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0208 	mvn.w	r2, #8
 8003d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2204      	movs	r2, #4
 8003d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8b1 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f8a3 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f8b4 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d122      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b10      	cmp	r3, #16
 8003d5e:	d11b      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0210 	mvn.w	r2, #16
 8003d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f887 	bl	8003e92 <HAL_TIM_IC_CaptureCallback>
 8003d84:	e005      	b.n	8003d92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f879 	bl	8003e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f88a 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d10e      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0201 	mvn.w	r2, #1
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fc fec4 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b80      	cmp	r3, #128	; 0x80
 8003dd0:	d10e      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ddc:	2b80      	cmp	r3, #128	; 0x80
 8003dde:	d107      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8e8 	bl	8003fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfe:	d10e      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f8db 	bl	8003fd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d10e      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b40      	cmp	r3, #64	; 0x40
 8003e38:	d107      	bne.n	8003e4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f838 	bl	8003eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d10e      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d107      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f06f 0220 	mvn.w	r2, #32
 8003e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f89b 	bl	8003fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a2e      	ldr	r2, [pc, #184]	; (8003f9c <TIM_Base_SetConfig+0xcc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_Base_SetConfig+0x28>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d003      	beq.n	8003ef8 <TIM_Base_SetConfig+0x28>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <TIM_Base_SetConfig+0xd0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d108      	bne.n	8003f0a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <TIM_Base_SetConfig+0xcc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00f      	beq.n	8003f32 <TIM_Base_SetConfig+0x62>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f18:	d00b      	beq.n	8003f32 <TIM_Base_SetConfig+0x62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <TIM_Base_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <TIM_Base_SetConfig+0x62>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <TIM_Base_SetConfig+0xd4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_Base_SetConfig+0x62>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <TIM_Base_SetConfig+0xd8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d108      	bne.n	8003f44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <TIM_Base_SetConfig+0xcc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_Base_SetConfig+0xb0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <TIM_Base_SetConfig+0xd4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0xb0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <TIM_Base_SetConfig+0xd8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d103      	bne.n	8003f88 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	615a      	str	r2, [r3, #20]
}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400

08003fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e040      	b.n	800407c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fc fefe 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f82c 	bl	8004084 <UART_SetConfig>
 800402c:	4603      	mov	r3, r0
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e022      	b.n	800407c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 faa6 	bl	8004590 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb2d 	bl	80046d4 <UART_CheckIdleState>
 800407a:	4603      	mov	r3, r0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004088:	b08a      	sub	sp, #40	; 0x28
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	431a      	orrs	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4ba5      	ldr	r3, [pc, #660]	; (8004348 <UART_SetConfig+0x2c4>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040bc:	430b      	orrs	r3, r1
 80040be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a9a      	ldr	r2, [pc, #616]	; (800434c <UART_SetConfig+0x2c8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ec:	4313      	orrs	r3, r2
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	430a      	orrs	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a91      	ldr	r2, [pc, #580]	; (8004350 <UART_SetConfig+0x2cc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d126      	bne.n	800415c <UART_SetConfig+0xd8>
 800410e:	4b91      	ldr	r3, [pc, #580]	; (8004354 <UART_SetConfig+0x2d0>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b03      	cmp	r3, #3
 800411a:	d81b      	bhi.n	8004154 <UART_SetConfig+0xd0>
 800411c:	a201      	add	r2, pc, #4	; (adr r2, 8004124 <UART_SetConfig+0xa0>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004135 	.word	0x08004135
 8004128:	08004145 	.word	0x08004145
 800412c:	0800413d 	.word	0x0800413d
 8004130:	0800414d 	.word	0x0800414d
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413a:	e0d6      	b.n	80042ea <UART_SetConfig+0x266>
 800413c:	2302      	movs	r3, #2
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004142:	e0d2      	b.n	80042ea <UART_SetConfig+0x266>
 8004144:	2304      	movs	r3, #4
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414a:	e0ce      	b.n	80042ea <UART_SetConfig+0x266>
 800414c:	2308      	movs	r3, #8
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004152:	e0ca      	b.n	80042ea <UART_SetConfig+0x266>
 8004154:	2310      	movs	r3, #16
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415a:	e0c6      	b.n	80042ea <UART_SetConfig+0x266>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a7d      	ldr	r2, [pc, #500]	; (8004358 <UART_SetConfig+0x2d4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d138      	bne.n	80041d8 <UART_SetConfig+0x154>
 8004166:	4b7b      	ldr	r3, [pc, #492]	; (8004354 <UART_SetConfig+0x2d0>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f003 030c 	and.w	r3, r3, #12
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d82d      	bhi.n	80041d0 <UART_SetConfig+0x14c>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0xf8>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080041d1 	.word	0x080041d1
 8004184:	080041d1 	.word	0x080041d1
 8004188:	080041d1 	.word	0x080041d1
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041d1 	.word	0x080041d1
 8004194:	080041d1 	.word	0x080041d1
 8004198:	080041d1 	.word	0x080041d1
 800419c:	080041b9 	.word	0x080041b9
 80041a0:	080041d1 	.word	0x080041d1
 80041a4:	080041d1 	.word	0x080041d1
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041c9 	.word	0x080041c9
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e098      	b.n	80042ea <UART_SetConfig+0x266>
 80041b8:	2302      	movs	r3, #2
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041be:	e094      	b.n	80042ea <UART_SetConfig+0x266>
 80041c0:	2304      	movs	r3, #4
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c6:	e090      	b.n	80042ea <UART_SetConfig+0x266>
 80041c8:	2308      	movs	r3, #8
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ce:	e08c      	b.n	80042ea <UART_SetConfig+0x266>
 80041d0:	2310      	movs	r3, #16
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d6:	e088      	b.n	80042ea <UART_SetConfig+0x266>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5f      	ldr	r2, [pc, #380]	; (800435c <UART_SetConfig+0x2d8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d125      	bne.n	800422e <UART_SetConfig+0x1aa>
 80041e2:	4b5c      	ldr	r3, [pc, #368]	; (8004354 <UART_SetConfig+0x2d0>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041ec:	2b30      	cmp	r3, #48	; 0x30
 80041ee:	d016      	beq.n	800421e <UART_SetConfig+0x19a>
 80041f0:	2b30      	cmp	r3, #48	; 0x30
 80041f2:	d818      	bhi.n	8004226 <UART_SetConfig+0x1a2>
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d00a      	beq.n	800420e <UART_SetConfig+0x18a>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d814      	bhi.n	8004226 <UART_SetConfig+0x1a2>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <UART_SetConfig+0x182>
 8004200:	2b10      	cmp	r3, #16
 8004202:	d008      	beq.n	8004216 <UART_SetConfig+0x192>
 8004204:	e00f      	b.n	8004226 <UART_SetConfig+0x1a2>
 8004206:	2300      	movs	r3, #0
 8004208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420c:	e06d      	b.n	80042ea <UART_SetConfig+0x266>
 800420e:	2302      	movs	r3, #2
 8004210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004214:	e069      	b.n	80042ea <UART_SetConfig+0x266>
 8004216:	2304      	movs	r3, #4
 8004218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421c:	e065      	b.n	80042ea <UART_SetConfig+0x266>
 800421e:	2308      	movs	r3, #8
 8004220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004224:	e061      	b.n	80042ea <UART_SetConfig+0x266>
 8004226:	2310      	movs	r3, #16
 8004228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422c:	e05d      	b.n	80042ea <UART_SetConfig+0x266>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a4b      	ldr	r2, [pc, #300]	; (8004360 <UART_SetConfig+0x2dc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d125      	bne.n	8004284 <UART_SetConfig+0x200>
 8004238:	4b46      	ldr	r3, [pc, #280]	; (8004354 <UART_SetConfig+0x2d0>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004242:	2bc0      	cmp	r3, #192	; 0xc0
 8004244:	d016      	beq.n	8004274 <UART_SetConfig+0x1f0>
 8004246:	2bc0      	cmp	r3, #192	; 0xc0
 8004248:	d818      	bhi.n	800427c <UART_SetConfig+0x1f8>
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d00a      	beq.n	8004264 <UART_SetConfig+0x1e0>
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d814      	bhi.n	800427c <UART_SetConfig+0x1f8>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <UART_SetConfig+0x1d8>
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d008      	beq.n	800426c <UART_SetConfig+0x1e8>
 800425a:	e00f      	b.n	800427c <UART_SetConfig+0x1f8>
 800425c:	2300      	movs	r3, #0
 800425e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004262:	e042      	b.n	80042ea <UART_SetConfig+0x266>
 8004264:	2302      	movs	r3, #2
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426a:	e03e      	b.n	80042ea <UART_SetConfig+0x266>
 800426c:	2304      	movs	r3, #4
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004272:	e03a      	b.n	80042ea <UART_SetConfig+0x266>
 8004274:	2308      	movs	r3, #8
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427a:	e036      	b.n	80042ea <UART_SetConfig+0x266>
 800427c:	2310      	movs	r3, #16
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e032      	b.n	80042ea <UART_SetConfig+0x266>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a30      	ldr	r2, [pc, #192]	; (800434c <UART_SetConfig+0x2c8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d12a      	bne.n	80042e4 <UART_SetConfig+0x260>
 800428e:	4b31      	ldr	r3, [pc, #196]	; (8004354 <UART_SetConfig+0x2d0>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800429c:	d01a      	beq.n	80042d4 <UART_SetConfig+0x250>
 800429e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042a2:	d81b      	bhi.n	80042dc <UART_SetConfig+0x258>
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a8:	d00c      	beq.n	80042c4 <UART_SetConfig+0x240>
 80042aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ae:	d815      	bhi.n	80042dc <UART_SetConfig+0x258>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <UART_SetConfig+0x238>
 80042b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b8:	d008      	beq.n	80042cc <UART_SetConfig+0x248>
 80042ba:	e00f      	b.n	80042dc <UART_SetConfig+0x258>
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e012      	b.n	80042ea <UART_SetConfig+0x266>
 80042c4:	2302      	movs	r3, #2
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	e00e      	b.n	80042ea <UART_SetConfig+0x266>
 80042cc:	2304      	movs	r3, #4
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e00a      	b.n	80042ea <UART_SetConfig+0x266>
 80042d4:	2308      	movs	r3, #8
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042da:	e006      	b.n	80042ea <UART_SetConfig+0x266>
 80042dc:	2310      	movs	r3, #16
 80042de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e2:	e002      	b.n	80042ea <UART_SetConfig+0x266>
 80042e4:	2310      	movs	r3, #16
 80042e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a17      	ldr	r2, [pc, #92]	; (800434c <UART_SetConfig+0x2c8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	f040 808b 	bne.w	800440c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d834      	bhi.n	8004368 <UART_SetConfig+0x2e4>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <UART_SetConfig+0x280>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004329 	.word	0x08004329
 8004308:	08004369 	.word	0x08004369
 800430c:	08004331 	.word	0x08004331
 8004310:	08004369 	.word	0x08004369
 8004314:	08004337 	.word	0x08004337
 8004318:	08004369 	.word	0x08004369
 800431c:	08004369 	.word	0x08004369
 8004320:	08004369 	.word	0x08004369
 8004324:	0800433f 	.word	0x0800433f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004328:	f7fe fdfc 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 800432c:	61f8      	str	r0, [r7, #28]
        break;
 800432e:	e021      	b.n	8004374 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <UART_SetConfig+0x2e0>)
 8004332:	61fb      	str	r3, [r7, #28]
        break;
 8004334:	e01e      	b.n	8004374 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004336:	f7fe fd5d 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800433a:	61f8      	str	r0, [r7, #28]
        break;
 800433c:	e01a      	b.n	8004374 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004342:	61fb      	str	r3, [r7, #28]
        break;
 8004344:	e016      	b.n	8004374 <UART_SetConfig+0x2f0>
 8004346:	bf00      	nop
 8004348:	efff69f3 	.word	0xefff69f3
 800434c:	40008000 	.word	0x40008000
 8004350:	40013800 	.word	0x40013800
 8004354:	40021000 	.word	0x40021000
 8004358:	40004400 	.word	0x40004400
 800435c:	40004800 	.word	0x40004800
 8004360:	40004c00 	.word	0x40004c00
 8004364:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004372:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80fa 	beq.w	8004570 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	429a      	cmp	r2, r3
 800438a:	d305      	bcc.n	8004398 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	429a      	cmp	r2, r3
 8004396:	d903      	bls.n	80043a0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800439e:	e0e7      	b.n	8004570 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2200      	movs	r2, #0
 80043a4:	461c      	mov	r4, r3
 80043a6:	4615      	mov	r5, r2
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	022b      	lsls	r3, r5, #8
 80043b2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043b6:	0222      	lsls	r2, r4, #8
 80043b8:	68f9      	ldr	r1, [r7, #12]
 80043ba:	6849      	ldr	r1, [r1, #4]
 80043bc:	0849      	lsrs	r1, r1, #1
 80043be:	2000      	movs	r0, #0
 80043c0:	4688      	mov	r8, r1
 80043c2:	4681      	mov	r9, r0
 80043c4:	eb12 0a08 	adds.w	sl, r2, r8
 80043c8:	eb43 0b09 	adc.w	fp, r3, r9
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043da:	4650      	mov	r0, sl
 80043dc:	4659      	mov	r1, fp
 80043de:	f7fb fef9 	bl	80001d4 <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4613      	mov	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f0:	d308      	bcc.n	8004404 <UART_SetConfig+0x380>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f8:	d204      	bcs.n	8004404 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	e0b5      	b.n	8004570 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800440a:	e0b1      	b.n	8004570 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004414:	d15d      	bne.n	80044d2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004416:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800441a:	2b08      	cmp	r3, #8
 800441c:	d827      	bhi.n	800446e <UART_SetConfig+0x3ea>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <UART_SetConfig+0x3a0>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004449 	.word	0x08004449
 8004428:	08004451 	.word	0x08004451
 800442c:	08004459 	.word	0x08004459
 8004430:	0800446f 	.word	0x0800446f
 8004434:	0800445f 	.word	0x0800445f
 8004438:	0800446f 	.word	0x0800446f
 800443c:	0800446f 	.word	0x0800446f
 8004440:	0800446f 	.word	0x0800446f
 8004444:	08004467 	.word	0x08004467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe fd6c 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 800444c:	61f8      	str	r0, [r7, #28]
        break;
 800444e:	e014      	b.n	800447a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004450:	f7fe fd7e 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8004454:	61f8      	str	r0, [r7, #28]
        break;
 8004456:	e010      	b.n	800447a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b4c      	ldr	r3, [pc, #304]	; (800458c <UART_SetConfig+0x508>)
 800445a:	61fb      	str	r3, [r7, #28]
        break;
 800445c:	e00d      	b.n	800447a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fcc9 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8004462:	61f8      	str	r0, [r7, #28]
        break;
 8004464:	e009      	b.n	800447a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	61fb      	str	r3, [r7, #28]
        break;
 800446c:	e005      	b.n	800447a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d077      	beq.n	8004570 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	005a      	lsls	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	441a      	add	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d916      	bls.n	80044ca <UART_SetConfig+0x446>
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d212      	bcs.n	80044ca <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f023 030f 	bic.w	r3, r3, #15
 80044ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	8afb      	ldrh	r3, [r7, #22]
 80044bc:	4313      	orrs	r3, r2
 80044be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	8afa      	ldrh	r2, [r7, #22]
 80044c6:	60da      	str	r2, [r3, #12]
 80044c8:	e052      	b.n	8004570 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044d0:	e04e      	b.n	8004570 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d827      	bhi.n	800452a <UART_SetConfig+0x4a6>
 80044da:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x45c>)
 80044dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe fd0e 	bl	8002f24 <HAL_RCC_GetPCLK1Freq>
 8004508:	61f8      	str	r0, [r7, #28]
        break;
 800450a:	e014      	b.n	8004536 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe fd20 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 8004510:	61f8      	str	r0, [r7, #28]
        break;
 8004512:	e010      	b.n	8004536 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b1d      	ldr	r3, [pc, #116]	; (800458c <UART_SetConfig+0x508>)
 8004516:	61fb      	str	r3, [r7, #28]
        break;
 8004518:	e00d      	b.n	8004536 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fe fc6b 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 800451e:	61f8      	str	r0, [r7, #28]
        break;
 8004520:	e009      	b.n	8004536 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	61fb      	str	r3, [r7, #28]
        break;
 8004528:	e005      	b.n	8004536 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004534:	bf00      	nop
    }

    if (pclk != 0U)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d019      	beq.n	8004570 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	085a      	lsrs	r2, r3, #1
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	441a      	add	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d909      	bls.n	800456a <UART_SetConfig+0x4e6>
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d205      	bcs.n	800456a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60da      	str	r2, [r3, #12]
 8004568:	e002      	b.n	8004570 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800457c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004580:	4618      	mov	r0, r3
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458a:	bf00      	nop
 800458c:	00f42400 	.word	0x00f42400

08004590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01a      	beq.n	80046a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800468e:	d10a      	bne.n	80046a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	605a      	str	r2, [r3, #4]
  }
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af02      	add	r7, sp, #8
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046e4:	f7fc fd10 	bl	8001108 <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d10e      	bne.n	8004716 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f82d 	bl	8004766 <UART_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e023      	b.n	800475e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b04      	cmp	r3, #4
 8004722:	d10e      	bne.n	8004742 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f817 	bl	8004766 <UART_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e00d      	b.n	800475e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2220      	movs	r2, #32
 8004746:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b09c      	sub	sp, #112	; 0x70
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004776:	e0a5      	b.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	f000 80a1 	beq.w	80048c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004782:	f7fc fcc1 	bl	8001108 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800478e:	429a      	cmp	r2, r3
 8004790:	d302      	bcc.n	8004798 <UART_WaitOnFlagUntilTimeout+0x32>
 8004792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004794:	2b00      	cmp	r3, #0
 8004796:	d13e      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047ac:	667b      	str	r3, [r7, #100]	; 0x64
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e6      	bne.n	8004798 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	663b      	str	r3, [r7, #96]	; 0x60
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3308      	adds	r3, #8
 80047e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80047ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e067      	b.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d04f      	beq.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800482e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004832:	d147      	bne.n	80048c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800483c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
 800485e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3308      	adds	r3, #8
 8004876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	613b      	str	r3, [r7, #16]
   return(result);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	66bb      	str	r3, [r7, #104]	; 0x68
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004890:	623a      	str	r2, [r7, #32]
 8004892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	69f9      	ldr	r1, [r7, #28]
 8004896:	6a3a      	ldr	r2, [r7, #32]
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	61bb      	str	r3, [r7, #24]
   return(result);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e010      	b.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4013      	ands	r3, r2
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	429a      	cmp	r2, r3
 80048e0:	f43f af4a 	beq.w	8004778 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3770      	adds	r7, #112	; 0x70
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <__libc_init_array>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	4d0d      	ldr	r5, [pc, #52]	; (8004928 <__libc_init_array+0x38>)
 80048f4:	4c0d      	ldr	r4, [pc, #52]	; (800492c <__libc_init_array+0x3c>)
 80048f6:	1b64      	subs	r4, r4, r5
 80048f8:	10a4      	asrs	r4, r4, #2
 80048fa:	2600      	movs	r6, #0
 80048fc:	42a6      	cmp	r6, r4
 80048fe:	d109      	bne.n	8004914 <__libc_init_array+0x24>
 8004900:	4d0b      	ldr	r5, [pc, #44]	; (8004930 <__libc_init_array+0x40>)
 8004902:	4c0c      	ldr	r4, [pc, #48]	; (8004934 <__libc_init_array+0x44>)
 8004904:	f000 f820 	bl	8004948 <_init>
 8004908:	1b64      	subs	r4, r4, r5
 800490a:	10a4      	asrs	r4, r4, #2
 800490c:	2600      	movs	r6, #0
 800490e:	42a6      	cmp	r6, r4
 8004910:	d105      	bne.n	800491e <__libc_init_array+0x2e>
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	f855 3b04 	ldr.w	r3, [r5], #4
 8004918:	4798      	blx	r3
 800491a:	3601      	adds	r6, #1
 800491c:	e7ee      	b.n	80048fc <__libc_init_array+0xc>
 800491e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004922:	4798      	blx	r3
 8004924:	3601      	adds	r6, #1
 8004926:	e7f2      	b.n	800490e <__libc_init_array+0x1e>
 8004928:	080049b0 	.word	0x080049b0
 800492c:	080049b0 	.word	0x080049b0
 8004930:	080049b0 	.word	0x080049b0
 8004934:	080049b4 	.word	0x080049b4

08004938 <memset>:
 8004938:	4402      	add	r2, r0
 800493a:	4603      	mov	r3, r0
 800493c:	4293      	cmp	r3, r2
 800493e:	d100      	bne.n	8004942 <memset+0xa>
 8004940:	4770      	bx	lr
 8004942:	f803 1b01 	strb.w	r1, [r3], #1
 8004946:	e7f9      	b.n	800493c <memset+0x4>

08004948 <_init>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr

08004954 <_fini>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr
