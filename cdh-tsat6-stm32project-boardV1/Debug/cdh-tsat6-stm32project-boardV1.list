
cdh-tsat6-stm32project-boardV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800534c  0800534c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800534c  0800534c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800534c  0800534c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  20000074  080053c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001230  080053c8  00021230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e43  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b5  00000000  00000000  00038ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  0003db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262bc  00000000  00000000  0003efb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a5f  00000000  00000000  00065274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8a32  00000000  00000000  0007ccd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165705  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  00165758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800525c 	.word	0x0800525c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800525c 	.word	0x0800525c

080001e0 <CAN_Boot>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
void CAN_Boot(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b08a      	sub	sp, #40	; 0x28
 80001e4:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  		sFilterConfig;
	sFilterConfig.FilterIdHigh = 0x0000;
 80001e6:	2300      	movs	r3, #0
 80001e8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001fe:	2300      	movs	r3, #0
 8000200:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000202:	2301      	movs	r3, #1
 8000204:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000206:	2301      	movs	r3, #1
 8000208:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800020a:	230e      	movs	r3, #14
 800020c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800020e:	463b      	mov	r3, r7
 8000210:	4619      	mov	r1, r3
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <CAN_Boot+0x50>)
 8000214:	f000 fe77 	bl	8000f06 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1); // Turn on CANBus
 8000218:	4805      	ldr	r0, [pc, #20]	; (8000230 <CAN_Boot+0x50>)
 800021a:	f000 ff3e 	bl	800109a <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800021e:	2102      	movs	r1, #2
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <CAN_Boot+0x50>)
 8000222:	f001 f960 	bl	80014e6 <HAL_CAN_ActivateNotification>
}
 8000226:	bf00      	nop
 8000228:	3728      	adds	r7, #40	; 0x28
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000344 	.word	0x20000344

08000234 <CAN_Transmit_Message>:

/**
 * @brief Used to send messages over CAN
 * @param message A 8 byte message
 */
void CAN_Transmit_Message(CANMessage_t myMessage){
 8000234:	b580      	push	{r7, lr}
 8000236:	b08e      	sub	sp, #56	; 0x38
 8000238:	af00      	add	r7, sp, #0
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t txMailbox; // Transmit Mailbox
	CAN_TxHeaderTypeDef txMessage;
	
	// TX Message Parameters
	uint16_t ID = (myMessage.priority << 4) | (SOURCE_ID << 2) | (myMessage.DestinationID);
 8000240:	793b      	ldrb	r3, [r7, #4]
 8000242:	011b      	lsls	r3, r3, #4
 8000244:	b21a      	sxth	r2, r3
 8000246:	2303      	movs	r3, #3
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	b21b      	sxth	r3, r3
 800024c:	4313      	orrs	r3, r2
 800024e:	b21a      	sxth	r2, r3
 8000250:	797b      	ldrb	r3, [r7, #5]
 8000252:	b21b      	sxth	r3, r3
 8000254:	4313      	orrs	r3, r2
 8000256:	b21b      	sxth	r3, r3
 8000258:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t message[8] = {myMessage.command, myMessage.data[0], myMessage.data[1], myMessage.data[2], myMessage.data[3], myMessage.data[4], myMessage.data[5],myMessage.data[6]};
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	743b      	strb	r3, [r7, #16]
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	747b      	strb	r3, [r7, #17]
 8000262:	7a3b      	ldrb	r3, [r7, #8]
 8000264:	74bb      	strb	r3, [r7, #18]
 8000266:	7a7b      	ldrb	r3, [r7, #9]
 8000268:	74fb      	strb	r3, [r7, #19]
 800026a:	7abb      	ldrb	r3, [r7, #10]
 800026c:	753b      	strb	r3, [r7, #20]
 800026e:	7afb      	ldrb	r3, [r7, #11]
 8000270:	757b      	strb	r3, [r7, #21]
 8000272:	7b3b      	ldrb	r3, [r7, #12]
 8000274:	75bb      	strb	r3, [r7, #22]
 8000276:	7b7b      	ldrb	r3, [r7, #13]
 8000278:	75fb      	strb	r3, [r7, #23]

	txMessage.StdId = ID;
 800027a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800027c:	61bb      	str	r3, [r7, #24]
	txMessage.IDE = CAN_ID_STD;
 800027e:	2300      	movs	r3, #0
 8000280:	623b      	str	r3, [r7, #32]
	txMessage.RTR = CAN_RTR_DATA;
 8000282:	2300      	movs	r3, #0
 8000284:	627b      	str	r3, [r7, #36]	; 0x24
	txMessage.DLC = MAX_CAN_DATA_LENGTH;
 8000286:	2308      	movs	r3, #8
 8000288:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_CAN_AddTxMessage(&hcan1, &txMessage, message, &txMailbox);
 800028a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028e:	f107 0210 	add.w	r2, r7, #16
 8000292:	f107 0118 	add.w	r1, r7, #24
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <CAN_Transmit_Message+0x70>)
 8000298:	f000 ff43 	bl	8001122 <HAL_CAN_AddTxMessage>
}
 800029c:	bf00      	nop
 800029e:	3738      	adds	r7, #56	; 0x38
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000344 	.word	0x20000344

080002a8 <CAN_Message_Received>:


/**
 * @brief Interrupt Handler for received CAN messages.
 */
void CAN_Message_Received(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08e      	sub	sp, #56	; 0x38
 80002ac:	af00      	add	r7, sp, #0
	uint8_t rxData[8]; // Received data
	uint8_t receivedDestinationId; // ID of Received Message

	// Message Sent To Queue
	/* Get RX message */
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessage, rxData);
 80002ae:	f107 0310 	add.w	r3, r7, #16
 80002b2:	f107 0218 	add.w	r2, r7, #24
 80002b6:	2100      	movs	r1, #0
 80002b8:	481b      	ldr	r0, [pc, #108]	; (8000328 <CAN_Message_Received+0x80>)
 80002ba:	f001 f802 	bl	80012c2 <HAL_CAN_GetRxMessage>
	receivedDestinationId = RECEIVED_DESTINATION_ID_MASK & rxMessage.StdId;
 80002be:	69bb      	ldr	r3, [r7, #24]
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	2203      	movs	r2, #3
 80002c4:	4013      	ands	r3, r2
 80002c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(receivedDestinationId == SOURCE_ID){
 80002ca:	2203      	movs	r2, #3
 80002cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d124      	bne.n	800031e <CAN_Message_Received+0x76>
		CANMessage_t ping;
		ping.DestinationID = 0x2;
 80002d4:	2302      	movs	r3, #2
 80002d6:	717b      	strb	r3, [r7, #5]
		ping.command = rxData[0];
 80002d8:	7c3b      	ldrb	r3, [r7, #16]
 80002da:	71bb      	strb	r3, [r7, #6]
		ping.priority = 1;
 80002dc:	2301      	movs	r3, #1
 80002de:	713b      	strb	r3, [r7, #4]
		for(uint8_t i = 0; i >= 7; i++){
 80002e0:	2300      	movs	r3, #0
 80002e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80002e6:	e011      	b.n	800030c <CAN_Message_Received+0x64>
			ping.data[i] = rxData[i+1];
 80002e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002ec:	1c5a      	adds	r2, r3, #1
 80002ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002f2:	3238      	adds	r2, #56	; 0x38
 80002f4:	443a      	add	r2, r7
 80002f6:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 80002fa:	3338      	adds	r3, #56	; 0x38
 80002fc:	443b      	add	r3, r7
 80002fe:	f803 2c31 	strb.w	r2, [r3, #-49]
		for(uint8_t i = 0; i >= 7; i++){
 8000302:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000306:	3301      	adds	r3, #1
 8000308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800030c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000310:	2b06      	cmp	r3, #6
 8000312:	d8e9      	bhi.n	80002e8 <CAN_Message_Received+0x40>
		}
		CAN_Transmit_Message(ping);
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800031a:	f7ff ff8b 	bl	8000234 <CAN_Transmit_Message>
	}
}
 800031e:	bf00      	nop
 8000320:	3738      	adds	r7, #56	; 0x38
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000344 	.word	0x20000344

0800032c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	4a07      	ldr	r2, [pc, #28]	; (8000358 <vApplicationGetIdleTaskMemory+0x2c>)
 800033c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	4a06      	ldr	r2, [pc, #24]	; (800035c <vApplicationGetIdleTaskMemory+0x30>)
 8000342:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2280      	movs	r2, #128	; 0x80
 8000348:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000090 	.word	0x20000090
 800035c:	20000144 	.word	0x20000144

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b5b0      	push	{r4, r5, r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000366:	f000 fc9a 	bl	8000c9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f825 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f000 f99d 	bl	80006ac <MX_GPIO_Init>
  MX_CAN1_Init();
 8000372:	f000 f87f 	bl	8000474 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000376:	f000 f8df 	bl	8000538 <MX_SPI1_Init>
  MX_SPI2_Init();
 800037a:	f000 f91b 	bl	80005b4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800037e:	f000 f957 	bl	8000630 <MX_SPI3_Init>
  MX_RTC_Init();
 8000382:	f000 f8b1 	bl	80004e8 <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <main+0x50>)
 8000388:	1d3c      	adds	r4, r7, #4
 800038a:	461d      	mov	r5, r3
 800038c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f003 fc10 	bl	8003bc2 <osThreadCreate>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4a03      	ldr	r2, [pc, #12]	; (80003b4 <main+0x54>)
 80003a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003a8:	f003 fc04 	bl	8003bb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <main+0x4c>
 80003ae:	bf00      	nop
 80003b0:	08005280 	.word	0x08005280
 80003b4:	200004bc 	.word	0x200004bc

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b096      	sub	sp, #88	; 0x58
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	2244      	movs	r2, #68	; 0x44
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 fe7e 	bl	80050c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	463b      	mov	r3, r7
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003de:	f001 fd83 	bl	8001ee8 <HAL_PWREx_ControlVoltageScaling>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003e8:	f000 fa30 	bl	800084c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80003ec:	f001 fd5e 	bl	8001eac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80003f0:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <SystemClock_Config+0xb8>)
 80003f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003f6:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <SystemClock_Config+0xb8>)
 80003f8:	f023 0318 	bic.w	r3, r3, #24
 80003fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000400:	2305      	movs	r3, #5
 8000402:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800040a:	2301      	movs	r3, #1
 800040c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040e:	2302      	movs	r3, #2
 8000410:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000412:	2303      	movs	r3, #3
 8000414:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000416:	2301      	movs	r3, #1
 8000418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800041a:	2314      	movs	r3, #20
 800041c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800041e:	2307      	movs	r3, #7
 8000420:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000422:	2302      	movs	r3, #2
 8000424:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000426:	2302      	movs	r3, #2
 8000428:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	4618      	mov	r0, r3
 8000430:	f001 fdb0 	bl	8001f94 <HAL_RCC_OscConfig>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800043a:	f000 fa07 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043e:	230f      	movs	r3, #15
 8000440:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000442:	2303      	movs	r3, #3
 8000444:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000452:	463b      	mov	r3, r7
 8000454:	2104      	movs	r1, #4
 8000456:	4618      	mov	r0, r3
 8000458:	f002 f9b0 	bl	80027bc <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000462:	f000 f9f3 	bl	800084c <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3758      	adds	r7, #88	; 0x58
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000

08000474 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_CAN1_Init+0x6c>)
 800047a:	4a1a      	ldr	r2, [pc, #104]	; (80004e4 <MX_CAN1_Init+0x70>)
 800047c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_CAN1_Init+0x6c>)
 8000480:	2210      	movs	r2, #16
 8000482:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <MX_CAN1_Init+0x6c>)
 8000486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800048a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800048c:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_CAN1_Init+0x6c>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <MX_CAN1_Init+0x6c>)
 8000494:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000498:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <MX_CAN1_Init+0x6c>)
 800049c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80004a0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <MX_CAN1_Init+0x6c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <MX_CAN1_Init+0x6c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_CAN1_Init+0x6c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <MX_CAN1_Init+0x6c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_CAN1_Init+0x6c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <MX_CAN1_Init+0x6c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80004c6:	4806      	ldr	r0, [pc, #24]	; (80004e0 <MX_CAN1_Init+0x6c>)
 80004c8:	f000 fc22 	bl	8000d10 <HAL_CAN_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80004d2:	f000 f9bb 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_Boot();
 80004d6:	f7ff fe83 	bl	80001e0 <CAN_Boot>
  /* USER CODE END CAN1_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000344 	.word	0x20000344
 80004e4:	40006400 	.word	0x40006400

080004e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80004ec:	4b10      	ldr	r3, [pc, #64]	; (8000530 <MX_RTC_Init+0x48>)
 80004ee:	4a11      	ldr	r2, [pc, #68]	; (8000534 <MX_RTC_Init+0x4c>)
 80004f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_RTC_Init+0x48>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <MX_RTC_Init+0x48>)
 80004fa:	227f      	movs	r2, #127	; 0x7f
 80004fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_RTC_Init+0x48>)
 8000500:	22ff      	movs	r2, #255	; 0xff
 8000502:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <MX_RTC_Init+0x48>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_RTC_Init+0x48>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <MX_RTC_Init+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_RTC_Init+0x48>)
 8000518:	2200      	movs	r2, #0
 800051a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <MX_RTC_Init+0x48>)
 800051e:	f002 feeb 	bl	80032f8 <HAL_RTC_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000528:	f000 f990 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000036c 	.word	0x2000036c
 8000534:	40002800 	.word	0x40002800

08000538 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_SPI1_Init+0x74>)
 800053e:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <MX_SPI1_Init+0x78>)
 8000540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_SPI1_Init+0x74>)
 8000544:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_SPI1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_SPI1_Init+0x74>)
 8000552:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000556:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <MX_SPI1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <MX_SPI1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_SPI1_Init+0x74>)
 8000566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800056a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_SPI1_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_SPI1_Init+0x74>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_SPI1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_SPI1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_SPI1_Init+0x74>)
 8000586:	2207      	movs	r2, #7
 8000588:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <MX_SPI1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_SPI1_Init+0x74>)
 8000592:	2208      	movs	r2, #8
 8000594:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_SPI1_Init+0x74>)
 8000598:	f002 ffc0 	bl	800351c <HAL_SPI_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005a2:	f000 f953 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000390 	.word	0x20000390
 80005b0:	40013000 	.word	0x40013000

080005b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_SPI2_Init+0x74>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <MX_SPI2_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_SPI2_Init+0x74>)
 80005c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_SPI2_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_SPI2_Init+0x74>)
 80005ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_SPI2_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_SPI2_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_SPI2_Init+0x74>)
 80005e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_SPI2_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_SPI2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_SPI2_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_SPI2_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_SPI2_Init+0x74>)
 8000602:	2207      	movs	r2, #7
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_SPI2_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_SPI2_Init+0x74>)
 800060e:	2208      	movs	r2, #8
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_SPI2_Init+0x74>)
 8000614:	f002 ff82 	bl	800351c <HAL_SPI_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 f915 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200003f4 	.word	0x200003f4
 800062c:	40003800 	.word	0x40003800

08000630 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_SPI3_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <MX_SPI3_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_SPI3_Init+0x74>)
 800063c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000640:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_SPI3_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_SPI3_Init+0x74>)
 800064a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800064e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_SPI3_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_SPI3_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_SPI3_Init+0x74>)
 800065e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000662:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_SPI3_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_SPI3_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_SPI3_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_SPI3_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_SPI3_Init+0x74>)
 800067e:	2207      	movs	r2, #7
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_SPI3_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_SPI3_Init+0x74>)
 800068a:	2208      	movs	r2, #8
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_SPI3_Init+0x74>)
 8000690:	f002 ff44 	bl	800351c <HAL_SPI_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 f8d7 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000458 	.word	0x20000458
 80006a8:	40003c00 	.word	0x40003c00

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <MX_GPIO_Init+0x100>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a39      	ldr	r2, [pc, #228]	; (80007ac <MX_GPIO_Init+0x100>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b37      	ldr	r3, [pc, #220]	; (80007ac <MX_GPIO_Init+0x100>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <MX_GPIO_Init+0x100>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a33      	ldr	r2, [pc, #204]	; (80007ac <MX_GPIO_Init+0x100>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <MX_GPIO_Init+0x100>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <MX_GPIO_Init+0x100>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a2d      	ldr	r2, [pc, #180]	; (80007ac <MX_GPIO_Init+0x100>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <MX_GPIO_Init+0x100>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <MX_GPIO_Init+0x100>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a27      	ldr	r2, [pc, #156]	; (80007ac <MX_GPIO_Init+0x100>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <MX_GPIO_Init+0x100>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLASH__HOLD_Pin|FLASH__WP_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <MX_GPIO_Init+0x104>)
 800072a:	f001 fb8d 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH__CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000734:	481f      	ldr	r0, [pc, #124]	; (80007b4 <MX_GPIO_Init+0x108>)
 8000736:	f001 fb87 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|MRAM__CS_Pin|MRAM__WP_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000744:	f001 fb80 	bl	8001e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH__HOLD_Pin FLASH__WP_Pin */
  GPIO_InitStruct.Pin = FLASH__HOLD_Pin|FLASH__WP_Pin;
 8000748:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_GPIO_Init+0x104>)
 8000762:	f001 f9f7 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH__CS_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = FLASH__CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000766:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_GPIO_Init+0x108>)
 8000780:	f001 f9e8 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : WDI_Pin MRAM__CS_Pin MRAM__WP_Pin */
  GPIO_InitStruct.Pin = WDI_Pin|MRAM__CS_Pin|MRAM__WP_Pin;
 8000784:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f001 f9d8 	bl	8001b54 <HAL_GPIO_Init>

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000400 	.word	0x48000400
 80007b4:	48000800 	.word	0x48000800

080007b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	CAN_Message_Received();
 80007c0:	f7ff fd72 	bl	80002a8 <CAN_Message_Received>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	CANMessage_t static testMessage;
	testMessage.DestinationID = 0x3;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <StartDefaultTask+0x54>)
 80007d6:	2203      	movs	r2, #3
 80007d8:	705a      	strb	r2, [r3, #1]
	testMessage.command = 0x1;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <StartDefaultTask+0x54>)
 80007dc:	2201      	movs	r2, #1
 80007de:	709a      	strb	r2, [r3, #2]
	for(uint8_t index = 0; index >= 7; index++){
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e007      	b.n	80007f6 <StartDefaultTask+0x2a>
		testMessage.data[index] = index;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <StartDefaultTask+0x54>)
 80007ea:	4413      	add	r3, r2
 80007ec:	7bfa      	ldrb	r2, [r7, #15]
 80007ee:	70da      	strb	r2, [r3, #3]
	for(uint8_t index = 0; index >= 7; index++){
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	3301      	adds	r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b06      	cmp	r3, #6
 80007fa:	d8f4      	bhi.n	80007e6 <StartDefaultTask+0x1a>
	}
	testMessage.priority = 0x1;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <StartDefaultTask+0x54>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); // flash led
 8000802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000806:	4807      	ldr	r0, [pc, #28]	; (8000824 <StartDefaultTask+0x58>)
 8000808:	f001 fb36 	bl	8001e78 <HAL_GPIO_TogglePin>
	  CAN_Transmit_Message(testMessage);
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <StartDefaultTask+0x54>)
 800080e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000812:	f7ff fd0f 	bl	8000234 <CAN_Transmit_Message>
	  osDelay(500);
 8000816:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081a:	f003 fa1e 	bl	8003c5a <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); // flash led
 800081e:	e7f0      	b.n	8000802 <StartDefaultTask+0x36>
 8000820:	200004c0 	.word	0x200004c0
 8000824:	48000400 	.word	0x48000400

08000828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d101      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083a:	f000 fa49 	bl	8000cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40001000 	.word	0x40001000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_MspInit+0x4c>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	; 0x60
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_MspInit+0x4c>)
 800086c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_MspInit+0x4c>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000880:	6593      	str	r3, [r2, #88]	; 0x58
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	210f      	movs	r1, #15
 8000892:	f06f 0001 	mvn.w	r0, #1
 8000896:	f001 f933 	bl	8001b00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <HAL_CAN_MspInit+0x8c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d130      	bne.n	800092c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <HAL_CAN_MspInit+0x90>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <HAL_CAN_MspInit+0x90>)
 80008d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d4:	6593      	str	r3, [r2, #88]	; 0x58
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_CAN_MspInit+0x90>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_CAN_MspInit+0x90>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <HAL_CAN_MspInit+0x90>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_CAN_MspInit+0x90>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 800090c:	230a      	movs	r3, #10
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <HAL_CAN_MspInit+0x94>)
 8000918:	f001 f91c 	bl	8001b54 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2105      	movs	r1, #5
 8000920:	2014      	movs	r0, #20
 8000922:	f001 f8ed 	bl	8001b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000926:	2014      	movs	r0, #20
 8000928:	f001 f906 	bl	8001b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40006400 	.word	0x40006400
 8000938:	40021000 	.word	0x40021000
 800093c:	48000400 	.word	0x48000400

08000940 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b09c      	sub	sp, #112	; 0x70
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	2268      	movs	r2, #104	; 0x68
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f004 fbb9 	bl	80050c8 <memset>
  if(hrtc->Instance==RTC)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_RTC_MspInit+0x58>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d117      	bne.n	8000990 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000964:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4618      	mov	r0, r3
 8000972:	f002 f963 	bl	8002c3c <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800097c:	f7ff ff66 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_RTC_MspInit+0x5c>)
 8000982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <HAL_RTC_MspInit+0x5c>)
 8000988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800098c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000990:	bf00      	nop
 8000992:	3770      	adds	r7, #112	; 0x70
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40002800 	.word	0x40002800
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a54      	ldr	r2, [pc, #336]	; (8000b10 <HAL_SPI_MspInit+0x170>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d129      	bne.n	8000a16 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009c2:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	4a53      	ldr	r2, [pc, #332]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 80009c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009cc:	6613      	str	r3, [r2, #96]	; 0x60
 80009ce:	4b51      	ldr	r3, [pc, #324]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009d6:	623b      	str	r3, [r7, #32]
 80009d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b4e      	ldr	r3, [pc, #312]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a4d      	ldr	r2, [pc, #308]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009f2:	23c2      	movs	r3, #194	; 0xc2
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a02:	2305      	movs	r3, #5
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f001 f8a0 	bl	8001b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a14:	e078      	b.n	8000b08 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI2)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a3f      	ldr	r2, [pc, #252]	; (8000b18 <HAL_SPI_MspInit+0x178>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d145      	bne.n	8000aac <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a20:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	4a3b      	ldr	r2, [pc, #236]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2c:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a38:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	4a35      	ldr	r2, [pc, #212]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a54:	4a2f      	ldr	r2, [pc, #188]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	f003 0302 	and.w	r3, r3, #2
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a78:	2305      	movs	r3, #5
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	4826      	ldr	r0, [pc, #152]	; (8000b1c <HAL_SPI_MspInit+0x17c>)
 8000a84:	f001 f866 	bl	8001b54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9a:	2305      	movs	r3, #5
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	481e      	ldr	r0, [pc, #120]	; (8000b20 <HAL_SPI_MspInit+0x180>)
 8000aa6:	f001 f855 	bl	8001b54 <HAL_GPIO_Init>
}
 8000aaa:	e02d      	b.n	8000b08 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI3)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <HAL_SPI_MspInit+0x184>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d128      	bne.n	8000b08 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_SPI_MspInit+0x174>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ae6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af8:	2306      	movs	r3, #6
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <HAL_SPI_MspInit+0x17c>)
 8000b04:	f001 f826 	bl	8001b54 <HAL_GPIO_Init>
}
 8000b08:	bf00      	nop
 8000b0a:	3738      	adds	r7, #56	; 0x38
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40013000 	.word	0x40013000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40003800 	.word	0x40003800
 8000b1c:	48000800 	.word	0x48000800
 8000b20:	48000400 	.word	0x48000400
 8000b24:	40003c00 	.word	0x40003c00

08000b28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2036      	movs	r0, #54	; 0x36
 8000b3e:	f000 ffdf 	bl	8001b00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b42:	2036      	movs	r0, #54	; 0x36
 8000b44:	f000 fff8 	bl	8001b38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <HAL_InitTick+0x9c>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_InitTick+0x9c>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6593      	str	r3, [r2, #88]	; 0x58
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_InitTick+0x9c>)
 8000b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b60:	f107 0210 	add.w	r2, r7, #16
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 ffd4 	bl	8002b18 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b70:	f001 ffbc 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8000b74:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <HAL_InitTick+0xa0>)
 8000b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7e:	0c9b      	lsrs	r3, r3, #18
 8000b80:	3b01      	subs	r3, #1
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_InitTick+0xa4>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <HAL_InitTick+0xa8>)
 8000b88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_InitTick+0xa4>)
 8000b8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b90:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_InitTick+0xa4>)
 8000b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b96:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_InitTick+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <HAL_InitTick+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <HAL_InitTick+0xa4>)
 8000ba6:	f002 fd5c 	bl	8003662 <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d104      	bne.n	8000bba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <HAL_InitTick+0xa4>)
 8000bb2:	f002 fdb7 	bl	8003724 <HAL_TIM_Base_Start_IT>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	431bde83 	.word	0x431bde83
 8000bcc:	200004cc 	.word	0x200004cc
 8000bd0:	40001000 	.word	0x40001000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <CAN1_RX0_IRQHandler+0x10>)
 8000c06:	f000 fc94 	bl	8001532 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000344 	.word	0x20000344

08000c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <TIM6_DAC_IRQHandler+0x10>)
 8000c1a:	f002 fddf 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200004cc 	.word	0x200004cc

08000c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	; (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f004 f9ff 	bl	800507c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7e:	f7ff fb6f 	bl	8000360 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c84:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c90:	08005354 	.word	0x08005354
  ldr r2, =_sbss
 8000c94:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c98:	20001230 	.word	0x20001230

08000c9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_IRQHandler>

08000c9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 ff1e 	bl	8001aea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f7ff ff3a 	bl	8000b28 <HAL_InitTick>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	e001      	b.n	8000cc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc0:	f7ff fdca 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000518 	.word	0x20000518

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000518 	.word	0x20000518

08000d10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e0ed      	b.n	8000efe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fdba 	bl	80008a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0201 	orr.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d44:	f7ff ffd8 	bl	8000cf8 <HAL_GetTick>
 8000d48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d4a:	e012      	b.n	8000d72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d4c:	f7ff ffd4 	bl	8000cf8 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	2b0a      	cmp	r3, #10
 8000d58:	d90b      	bls.n	8000d72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2205      	movs	r2, #5
 8000d6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e0c5      	b.n	8000efe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0e5      	beq.n	8000d4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0202 	bic.w	r2, r2, #2
 8000d8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d90:	f7ff ffb2 	bl	8000cf8 <HAL_GetTick>
 8000d94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d96:	e012      	b.n	8000dbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d98:	f7ff ffae 	bl	8000cf8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b0a      	cmp	r3, #10
 8000da4:	d90b      	bls.n	8000dbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000daa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2205      	movs	r2, #5
 8000db6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e09f      	b.n	8000efe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1e5      	bne.n	8000d98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7e1b      	ldrb	r3, [r3, #24]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d108      	bne.n	8000de6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	e007      	b.n	8000df6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7e5b      	ldrb	r3, [r3, #25]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d108      	bne.n	8000e10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	e007      	b.n	8000e20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7e9b      	ldrb	r3, [r3, #26]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d108      	bne.n	8000e3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0220 	orr.w	r2, r2, #32
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e007      	b.n	8000e4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0220 	bic.w	r2, r2, #32
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7edb      	ldrb	r3, [r3, #27]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d108      	bne.n	8000e64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0210 	bic.w	r2, r2, #16
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e007      	b.n	8000e74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f042 0210 	orr.w	r2, r2, #16
 8000e72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7f1b      	ldrb	r3, [r3, #28]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d108      	bne.n	8000e8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0208 	orr.w	r2, r2, #8
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e007      	b.n	8000e9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0208 	bic.w	r2, r2, #8
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7f5b      	ldrb	r3, [r3, #29]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d108      	bne.n	8000eb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 0204 	orr.w	r2, r2, #4
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e007      	b.n	8000ec8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0204 	bic.w	r2, r2, #4
 8000ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	ea42 0103 	orr.w	r1, r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	1e5a      	subs	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f1e:	7cfb      	ldrb	r3, [r7, #19]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d003      	beq.n	8000f2c <HAL_CAN_ConfigFilter+0x26>
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	f040 80aa 	bne.w	8001080 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f32:	f043 0201 	orr.w	r2, r3, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	2201      	movs	r2, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d123      	bne.n	8000fae <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	401a      	ands	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3248      	adds	r2, #72	; 0x48
 8000f8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fa4:	6979      	ldr	r1, [r7, #20]
 8000fa6:	3348      	adds	r3, #72	; 0x48
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	440b      	add	r3, r1
 8000fac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d122      	bne.n	8000ffc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fd6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3248      	adds	r2, #72	; 0x48
 8000fdc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ff0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ff2:	6979      	ldr	r1, [r7, #20]
 8000ff4:	3348      	adds	r3, #72	; 0x48
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001016:	e007      	b.n	8001028 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001042:	e007      	b.n	8001054 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d107      	bne.n	800106c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	431a      	orrs	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001072:	f023 0201 	bic.w	r2, r3, #1
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	e006      	b.n	800108e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
  }
}
 800108e:	4618      	mov	r0, r3
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d12e      	bne.n	800110c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2202      	movs	r2, #2
 80010b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010c6:	f7ff fe17 	bl	8000cf8 <HAL_GetTick>
 80010ca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010cc:	e012      	b.n	80010f4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ce:	f7ff fe13 	bl	8000cf8 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b0a      	cmp	r3, #10
 80010da:	d90b      	bls.n	80010f4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2205      	movs	r2, #5
 80010ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e012      	b.n	800111a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1e5      	bne.n	80010ce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	e006      	b.n	800111a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
  }
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001122:	b480      	push	{r7}
 8001124:	b089      	sub	sp, #36	; 0x24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001136:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001140:	7ffb      	ldrb	r3, [r7, #31]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d003      	beq.n	800114e <HAL_CAN_AddTxMessage+0x2c>
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	2b02      	cmp	r3, #2
 800114a:	f040 80ad 	bne.w	80012a8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10a      	bne.n	800116e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800115e:	2b00      	cmp	r3, #0
 8001160:	d105      	bne.n	800116e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 8095 	beq.w	8001298 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	0e1b      	lsrs	r3, r3, #24
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001178:	2201      	movs	r2, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	409a      	lsls	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10d      	bne.n	80011a6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	6809      	ldr	r1, [r1, #0]
 8001198:	431a      	orrs	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3318      	adds	r3, #24
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	440b      	add	r3, r1
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e00f      	b.n	80011c6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011b6:	68f9      	ldr	r1, [r7, #12]
 80011b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3318      	adds	r3, #24
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	440b      	add	r3, r1
 80011c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6819      	ldr	r1, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3318      	adds	r3, #24
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	440b      	add	r3, r1
 80011d6:	3304      	adds	r3, #4
 80011d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	7d1b      	ldrb	r3, [r3, #20]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d111      	bne.n	8001206 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3318      	adds	r3, #24
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	3304      	adds	r3, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	6811      	ldr	r1, [r2, #0]
 80011f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3318      	adds	r3, #24
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	440b      	add	r3, r1
 8001202:	3304      	adds	r3, #4
 8001204:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3307      	adds	r3, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	061a      	lsls	r2, r3, #24
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3306      	adds	r3, #6
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	041b      	lsls	r3, r3, #16
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3305      	adds	r3, #5
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	4313      	orrs	r3, r2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	3204      	adds	r2, #4
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	4610      	mov	r0, r2
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	ea43 0200 	orr.w	r2, r3, r0
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	440b      	add	r3, r1
 8001238:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800123c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3303      	adds	r3, #3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	061a      	lsls	r2, r3, #24
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3302      	adds	r3, #2
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	041b      	lsls	r3, r3, #16
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3301      	adds	r3, #1
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	4313      	orrs	r3, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	7812      	ldrb	r2, [r2, #0]
 800125e:	4610      	mov	r0, r2
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	6811      	ldr	r1, [r2, #0]
 8001264:	ea43 0200 	orr.w	r2, r3, r0
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	440b      	add	r3, r1
 800126e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001272:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3318      	adds	r3, #24
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	6811      	ldr	r1, [r2, #0]
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3318      	adds	r3, #24
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	440b      	add	r3, r1
 8001292:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	e00e      	b.n	80012b6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e006      	b.n	80012b6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
  }
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012c2:	b480      	push	{r7}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d003      	beq.n	80012e6 <HAL_CAN_GetRxMessage+0x24>
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	f040 80f3 	bne.w	80014cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10e      	bne.n	800130a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d116      	bne.n	8001328 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e0e7      	b.n	80014da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d107      	bne.n	8001328 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e0d8      	b.n	80014da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	331b      	adds	r3, #27
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	4413      	add	r3, r2
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0204 	and.w	r2, r3, #4
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	331b      	adds	r3, #27
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	4413      	add	r3, r2
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0d5b      	lsrs	r3, r3, #21
 8001356:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e00b      	b.n	8001378 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	331b      	adds	r3, #27
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	4413      	add	r3, r2
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	08db      	lsrs	r3, r3, #3
 8001370:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	331b      	adds	r3, #27
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0202 	and.w	r2, r3, #2
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	331b      	adds	r3, #27
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	3304      	adds	r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 020f 	and.w	r2, r3, #15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	331b      	adds	r3, #27
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	4413      	add	r3, r2
 80013b2:	3304      	adds	r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	331b      	adds	r3, #27
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	4413      	add	r3, r2
 80013ca:	3304      	adds	r3, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	4413      	add	r3, r2
 80013e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0a1a      	lsrs	r2, r3, #8
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4413      	add	r3, r2
 8001410:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0c1a      	lsrs	r2, r3, #16
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3302      	adds	r3, #2
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	4413      	add	r3, r2
 800142a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0e1a      	lsrs	r2, r3, #24
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3303      	adds	r3, #3
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3304      	adds	r3, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4413      	add	r3, r2
 800145c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0a1a      	lsrs	r2, r3, #8
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3305      	adds	r3, #5
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0c1a      	lsrs	r2, r3, #16
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3306      	adds	r3, #6
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	4413      	add	r3, r2
 8001490:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0e1a      	lsrs	r2, r3, #24
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	3307      	adds	r3, #7
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d108      	bne.n	80014b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0220 	orr.w	r2, r2, #32
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	e007      	b.n	80014c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	691a      	ldr	r2, [r3, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0220 	orr.w	r2, r2, #32
 80014c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e006      	b.n	80014da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
  }
}
 80014da:	4618      	mov	r0, r3
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d002      	beq.n	8001504 <HAL_CAN_ActivateNotification+0x1e>
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d109      	bne.n	8001518 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6959      	ldr	r1, [r3, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	e006      	b.n	8001526 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
  }
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b08a      	sub	sp, #40	; 0x28
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d07c      	beq.n	8001672 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d023      	beq.n	80015ca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f983 	bl	80018a0 <HAL_CAN_TxMailbox0CompleteCallback>
 800159a:	e016      	b.n	80015ca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e00c      	b.n	80015ca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	e002      	b.n	80015ca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f989 	bl	80018dc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d024      	beq.n	800161e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f963 	bl	80018b4 <HAL_CAN_TxMailbox1CompleteCallback>
 80015ee:	e016      	b.n	800161e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
 8001602:	e00c      	b.n	800161e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	e002      	b.n	800161e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f969 	bl	80018f0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d024      	beq.n	8001672 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001630:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f943 	bl	80018c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001642:	e016      	b.n	8001672 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
 8001656:	e00c      	b.n	8001672 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
 800166a:	e002      	b.n	8001672 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f949 	bl	8001904 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00c      	beq.n	8001696 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 0310 	and.w	r3, r3, #16
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2210      	movs	r2, #16
 8001694:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2208      	movs	r2, #8
 80016b0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f930 	bl	8001918 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff f871 	bl	80007b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00c      	beq.n	80016fa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2210      	movs	r2, #16
 80016f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00b      	beq.n	800171c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2208      	movs	r2, #8
 8001714:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f912 	bl	8001940 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f8f9 	bl	800192c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2210      	movs	r2, #16
 8001754:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8fc 	bl	8001954 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2208      	movs	r2, #8
 8001776:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f8f5 	bl	8001968 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d07b      	beq.n	8001880 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d072      	beq.n	8001878 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d043      	beq.n	8001878 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d03e      	beq.n	8001878 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001800:	2b60      	cmp	r3, #96	; 0x60
 8001802:	d02b      	beq.n	800185c <HAL_CAN_IRQHandler+0x32a>
 8001804:	2b60      	cmp	r3, #96	; 0x60
 8001806:	d82e      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001808:	2b50      	cmp	r3, #80	; 0x50
 800180a:	d022      	beq.n	8001852 <HAL_CAN_IRQHandler+0x320>
 800180c:	2b50      	cmp	r3, #80	; 0x50
 800180e:	d82a      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001810:	2b40      	cmp	r3, #64	; 0x40
 8001812:	d019      	beq.n	8001848 <HAL_CAN_IRQHandler+0x316>
 8001814:	2b40      	cmp	r3, #64	; 0x40
 8001816:	d826      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001818:	2b30      	cmp	r3, #48	; 0x30
 800181a:	d010      	beq.n	800183e <HAL_CAN_IRQHandler+0x30c>
 800181c:	2b30      	cmp	r3, #48	; 0x30
 800181e:	d822      	bhi.n	8001866 <HAL_CAN_IRQHandler+0x334>
 8001820:	2b10      	cmp	r3, #16
 8001822:	d002      	beq.n	800182a <HAL_CAN_IRQHandler+0x2f8>
 8001824:	2b20      	cmp	r3, #32
 8001826:	d005      	beq.n	8001834 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001828:	e01d      	b.n	8001866 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001832:	e019      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800183c:	e014      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001846:	e00f      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001850:	e00a      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800185a:	e005      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001864:	e000      	b.n	8001868 <HAL_CAN_IRQHandler+0x336>
            break;
 8001866:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699a      	ldr	r2, [r3, #24]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001876:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2204      	movs	r2, #4
 800187e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f872 	bl	800197c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001898:	bf00      	nop
 800189a:	3728      	adds	r7, #40	; 0x28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff4c 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b12:	f7ff ff61 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	6978      	ldr	r0, [r7, #20]
 8001b1e:	f7ff ffb1 	bl	8001a84 <NVIC_EncodePriority>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff80 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b30:	bf00      	nop
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff54 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e154      	b.n	8001e0e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8146 	beq.w	8001e08 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d005      	beq.n	8001b94 <HAL_GPIO_Init+0x40>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d130      	bne.n	8001bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 0201 	and.w	r2, r3, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d017      	beq.n	8001c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d123      	bne.n	8001c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0203 	and.w	r2, r3, #3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80a0 	beq.w	8001e08 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc8:	4b58      	ldr	r3, [pc, #352]	; (8001e2c <HAL_GPIO_Init+0x2d8>)
 8001cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ccc:	4a57      	ldr	r2, [pc, #348]	; (8001e2c <HAL_GPIO_Init+0x2d8>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd4:	4b55      	ldr	r3, [pc, #340]	; (8001e2c <HAL_GPIO_Init+0x2d8>)
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce0:	4a53      	ldr	r2, [pc, #332]	; (8001e30 <HAL_GPIO_Init+0x2dc>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d0a:	d019      	beq.n	8001d40 <HAL_GPIO_Init+0x1ec>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a49      	ldr	r2, [pc, #292]	; (8001e34 <HAL_GPIO_Init+0x2e0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d013      	beq.n	8001d3c <HAL_GPIO_Init+0x1e8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <HAL_GPIO_Init+0x2e4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00d      	beq.n	8001d38 <HAL_GPIO_Init+0x1e4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a47      	ldr	r2, [pc, #284]	; (8001e3c <HAL_GPIO_Init+0x2e8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x1e0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a46      	ldr	r2, [pc, #280]	; (8001e40 <HAL_GPIO_Init+0x2ec>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d101      	bne.n	8001d30 <HAL_GPIO_Init+0x1dc>
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	e008      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d30:	2307      	movs	r3, #7
 8001d32:	e006      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d34:	2303      	movs	r3, #3
 8001d36:	e004      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e002      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_GPIO_Init+0x1ee>
 8001d40:	2300      	movs	r3, #0
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	f002 0203 	and.w	r2, r2, #3
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d52:	4937      	ldr	r1, [pc, #220]	; (8001e30 <HAL_GPIO_Init+0x2dc>)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d84:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dae:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd8:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f aea3 	bne.w	8001b64 <HAL_GPIO_Init+0x10>
  }
}
 8001e1e:	bf00      	nop
 8001e20:	bf00      	nop
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	48000400 	.word	0x48000400
 8001e38:	48000800 	.word	0x48000800
 8001e3c:	48000c00 	.word	0x48000c00
 8001e40:	48001000 	.word	0x48001000
 8001e44:	40010400 	.word	0x40010400

08001e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	807b      	strh	r3, [r7, #2]
 8001e54:	4613      	mov	r3, r2
 8001e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e58:	787b      	ldrb	r3, [r7, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43d9      	mvns	r1, r3
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	400b      	ands	r3, r1
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40007000 	.word	0x40007000

08001ecc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef6:	d130      	bne.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f04:	d038      	beq.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2232      	movs	r2, #50	; 0x32
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0c9b      	lsrs	r3, r3, #18
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f2c:	e002      	b.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f40:	d102      	bne.n	8001f48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f2      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f54:	d110      	bne.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e00f      	b.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f66:	d007      	beq.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f70:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40007000 	.word	0x40007000
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f000 bc02 	b.w	80027ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa8:	4b96      	ldr	r3, [pc, #600]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb2:	4b94      	ldr	r3, [pc, #592]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80e4 	beq.w	8002192 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4c>
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	f040 808b 	bne.w	80020ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	f040 8087 	bne.w	80020ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe0:	4b88      	ldr	r3, [pc, #544]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x64>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e3d9      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	4b81      	ldr	r3, [pc, #516]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_RCC_OscConfig+0x7e>
 8002008:	4b7e      	ldr	r3, [pc, #504]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	e005      	b.n	800201e <HAL_RCC_OscConfig+0x8a>
 8002012:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201e:	4293      	cmp	r3, r2
 8002020:	d223      	bcs.n	800206a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fda8 	bl	8002b7c <RCC_SetFlashLatencyFromMSIRange>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e3ba      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a72      	ldr	r2, [pc, #456]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b70      	ldr	r3, [pc, #448]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	496d      	ldr	r1, [pc, #436]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002054:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	4968      	ldr	r1, [pc, #416]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
 8002068:	e025      	b.n	80020b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800206a:	4b66      	ldr	r3, [pc, #408]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a65      	ldr	r2, [pc, #404]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4960      	ldr	r1, [pc, #384]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002084:	4313      	orrs	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002088:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	495b      	ldr	r1, [pc, #364]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fd68 	bl	8002b7c <RCC_SetFlashLatencyFromMSIRange>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e37a      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b6:	f000 fc81 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b51      	ldr	r3, [pc, #324]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	4950      	ldr	r1, [pc, #320]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80020c8:	5ccb      	ldrb	r3, [r1, r3]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	4a4e      	ldr	r2, [pc, #312]	; (800220c <HAL_RCC_OscConfig+0x278>)
 80020d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020d6:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fd24 	bl	8000b28 <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d052      	beq.n	8002190 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	e35e      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d032      	beq.n	800215c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a42      	ldr	r2, [pc, #264]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002102:	f7fe fdf9 	bl	8000cf8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800210a:	f7fe fdf5 	bl	8000cf8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e347      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211c:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a35      	ldr	r2, [pc, #212]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212e:	f043 0308 	orr.w	r3, r3, #8
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b33      	ldr	r3, [pc, #204]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4930      	ldr	r1, [pc, #192]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	492b      	ldr	r1, [pc, #172]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
 800215a:	e01a      	b.n	8002192 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800215c:	4b29      	ldr	r3, [pc, #164]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002168:	f7fe fdc6 	bl	8000cf8 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002170:	f7fe fdc2 	bl	8000cf8 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e314      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x1dc>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d073      	beq.n	8002286 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_OscConfig+0x21c>
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d10e      	bne.n	80021c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d063      	beq.n	8002284 <HAL_RCC_OscConfig+0x2f0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d15f      	bne.n	8002284 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e2f1      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d0:	d106      	bne.n	80021e0 <HAL_RCC_OscConfig+0x24c>
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e025      	b.n	800222c <HAL_RCC_OscConfig+0x298>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e8:	d114      	bne.n	8002214 <HAL_RCC_OscConfig+0x280>
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a02      	ldr	r2, [pc, #8]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	e013      	b.n	800222c <HAL_RCC_OscConfig+0x298>
 8002204:	40021000 	.word	0x40021000
 8002208:	080052a4 	.word	0x080052a4
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004
 8002214:	4ba0      	ldr	r3, [pc, #640]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a9f      	ldr	r2, [pc, #636]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b9d      	ldr	r3, [pc, #628]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a9c      	ldr	r2, [pc, #624]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fd60 	bl	8000cf8 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe fd5c 	bl	8000cf8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e2ae      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224e:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x2a8>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fd4c 	bl	8000cf8 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe fd48 	bl	8000cf8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e29a      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x2d0>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d060      	beq.n	8002354 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b04      	cmp	r3, #4
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_OscConfig+0x310>
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d119      	bne.n	80022d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d116      	bne.n	80022d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a4:	4b7c      	ldr	r3, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_OscConfig+0x328>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e277      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	4973      	ldr	r1, [pc, #460]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d0:	e040      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d023      	beq.n	8002322 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022da:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fd07 	bl	8000cf8 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fd03 	bl	8000cf8 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e255      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002300:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	495f      	ldr	r1, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	e018      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a5c      	ldr	r2, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe fce3 	bl	8000cf8 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7fe fcdf 	bl	8000cf8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e231      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03c      	beq.n	80023da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236e:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fcbe 	bl	8000cf8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fcba 	bl	8000cf8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e20c      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ef      	beq.n	8002380 <HAL_RCC_OscConfig+0x3ec>
 80023a0:	e01b      	b.n	80023da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a8:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe fca1 	bl	8000cf8 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ba:	f7fe fc9d 	bl	8000cf8 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1ef      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ef      	bne.n	80023ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80a6 	beq.w	8002534 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002402:	6593      	str	r3, [r2, #88]	; 0x58
 8002404:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002410:	2301      	movs	r3, #1
 8002412:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d118      	bne.n	8002452 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242c:	f7fe fc64 	bl	8000cf8 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe fc60 	bl	8000cf8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1b2      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x4d8>
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800246a:	e029      	b.n	80024c0 <HAL_RCC_OscConfig+0x52c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b05      	cmp	r3, #5
 8002472:	d115      	bne.n	80024a0 <HAL_RCC_OscConfig+0x50c>
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	4a03      	ldr	r2, [pc, #12]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x52c>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
 80024a0:	4b9a      	ldr	r3, [pc, #616]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	4a99      	ldr	r2, [pc, #612]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b0:	4b96      	ldr	r3, [pc, #600]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	4a95      	ldr	r2, [pc, #596]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d016      	beq.n	80024f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe fc16 	bl	8000cf8 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fc12 	bl	8000cf8 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e162      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e6:	4b89      	ldr	r3, [pc, #548]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ed      	beq.n	80024d0 <HAL_RCC_OscConfig+0x53c>
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe fbff 	bl	8000cf8 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fbfb 	bl	8000cf8 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e14b      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002514:	4b7d      	ldr	r3, [pc, #500]	; (800270c <HAL_RCC_OscConfig+0x778>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ed      	bne.n	80024fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002522:	7ffb      	ldrb	r3, [r7, #31]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b78      	ldr	r3, [pc, #480]	; (800270c <HAL_RCC_OscConfig+0x778>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	4a77      	ldr	r2, [pc, #476]	; (800270c <HAL_RCC_OscConfig+0x778>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03c      	beq.n	80025ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01c      	beq.n	8002582 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002548:	4b70      	ldr	r3, [pc, #448]	; (800270c <HAL_RCC_OscConfig+0x778>)
 800254a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254e:	4a6f      	ldr	r2, [pc, #444]	; (800270c <HAL_RCC_OscConfig+0x778>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fbce 	bl	8000cf8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002560:	f7fe fbca 	bl	8000cf8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e11c      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002572:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_OscConfig+0x778>)
 8002574:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ef      	beq.n	8002560 <HAL_RCC_OscConfig+0x5cc>
 8002580:	e01b      	b.n	80025ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002582:	4b62      	ldr	r3, [pc, #392]	; (800270c <HAL_RCC_OscConfig+0x778>)
 8002584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002588:	4a60      	ldr	r2, [pc, #384]	; (800270c <HAL_RCC_OscConfig+0x778>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7fe fbb1 	bl	8000cf8 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800259a:	f7fe fbad 	bl	8000cf8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0ff      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025ac:	4b57      	ldr	r3, [pc, #348]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80025ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ef      	bne.n	800259a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80f3 	beq.w	80027aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	f040 80c9 	bne.w	8002760 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025ce:	4b4f      	ldr	r3, [pc, #316]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	429a      	cmp	r2, r3
 80025e0:	d12c      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	3b01      	subs	r3, #1
 80025ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d123      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d11b      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d113      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	3b01      	subs	r3, #1
 8002622:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d109      	bne.n	800263c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	3b01      	subs	r3, #1
 8002636:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d06b      	beq.n	8002714 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d062      	beq.n	8002708 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002642:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_RCC_OscConfig+0x778>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0ac      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002652:	4b2e      	ldr	r3, [pc, #184]	; (800270c <HAL_RCC_OscConfig+0x778>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2d      	ldr	r2, [pc, #180]	; (800270c <HAL_RCC_OscConfig+0x778>)
 8002658:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800265c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800265e:	f7fe fb4b 	bl	8000cf8 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe fb47 	bl	8000cf8 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e099      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x778>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_RCC_OscConfig+0x778>)
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <HAL_RCC_OscConfig+0x77c>)
 800268a:	4013      	ands	r3, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002694:	3a01      	subs	r2, #1
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	4311      	orrs	r1, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800269e:	0212      	lsls	r2, r2, #8
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026a6:	0852      	lsrs	r2, r2, #1
 80026a8:	3a01      	subs	r2, #1
 80026aa:	0552      	lsls	r2, r2, #21
 80026ac:	4311      	orrs	r1, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026b2:	0852      	lsrs	r2, r2, #1
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0652      	lsls	r2, r2, #25
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026be:	06d2      	lsls	r2, r2, #27
 80026c0:	430a      	orrs	r2, r1
 80026c2:	4912      	ldr	r1, [pc, #72]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80026ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d4:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a0c      	ldr	r2, [pc, #48]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80026da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026e0:	f7fe fb0a 	bl	8000cf8 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe fb06 	bl	8000cf8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e058      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCC_OscConfig+0x778>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002706:	e050      	b.n	80027aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e04f      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
 800270c:	40021000 	.word	0x40021000
 8002710:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d144      	bne.n	80027aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 8002726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800272a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002736:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002738:	f7fe fade 	bl	8000cf8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe fada 	bl	8000cf8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e02c      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002752:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x7ac>
 800275e:	e024      	b.n	80027aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d01f      	beq.n	80027a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 800276c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe fac1 	bl	8000cf8 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe fabd 	bl	8000cf8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e00f      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f0      	bne.n	800277a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	4905      	ldr	r1, [pc, #20]	; (80027b4 <HAL_RCC_OscConfig+0x820>)
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_OscConfig+0x824>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	60cb      	str	r3, [r1, #12]
 80027a4:	e001      	b.n	80027aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3720      	adds	r7, #32
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	feeefffc 	.word	0xfeeefffc

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0e7      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b75      	ldr	r3, [pc, #468]	; (80029a8 <HAL_RCC_ClockConfig+0x1ec>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d910      	bls.n	8002800 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b72      	ldr	r3, [pc, #456]	; (80029a8 <HAL_RCC_ClockConfig+0x1ec>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0207 	bic.w	r2, r3, #7
 80027e6:	4970      	ldr	r1, [pc, #448]	; (80029a8 <HAL_RCC_ClockConfig+0x1ec>)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	4b6e      	ldr	r3, [pc, #440]	; (80029a8 <HAL_RCC_ClockConfig+0x1ec>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0cf      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d010      	beq.n	800282e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	4b66      	ldr	r3, [pc, #408]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002818:	429a      	cmp	r2, r3
 800281a:	d908      	bls.n	800282e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b63      	ldr	r3, [pc, #396]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4960      	ldr	r1, [pc, #384]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d04c      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002842:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d121      	bne.n	8002892 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0a6      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d115      	bne.n	8002892 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e09a      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002872:	4b4e      	ldr	r3, [pc, #312]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e08e      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e086      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002892:	4b46      	ldr	r3, [pc, #280]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f023 0203 	bic.w	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4943      	ldr	r1, [pc, #268]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a4:	f7fe fa28 	bl	8000cf8 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ac:	f7fe fa24 	bl	8000cf8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e06e      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 020c 	and.w	r2, r3, #12
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d1eb      	bne.n	80028ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d010      	beq.n	8002902 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b31      	ldr	r3, [pc, #196]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d208      	bcs.n	8002902 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	492b      	ldr	r1, [pc, #172]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d210      	bcs.n	8002932 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 0207 	bic.w	r2, r3, #7
 8002918:	4923      	ldr	r1, [pc, #140]	; (80029a8 <HAL_RCC_ClockConfig+0x1ec>)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e036      	b.n	80029a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	4918      	ldr	r1, [pc, #96]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d009      	beq.n	8002970 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4910      	ldr	r1, [pc, #64]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002970:	f000 f824 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_RCC_ClockConfig+0x1f0>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	490b      	ldr	r1, [pc, #44]	; (80029b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1f8>)
 800298e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe f8c7 	bl	8000b28 <HAL_InitTick>
 800299a:	4603      	mov	r3, r0
 800299c:	72fb      	strb	r3, [r7, #11]

  return status;
 800299e:	7afb      	ldrb	r3, [r7, #11]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40021000 	.word	0x40021000
 80029b0:	080052a4 	.word	0x080052a4
 80029b4:	20000000 	.word	0x20000000
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ca:	4b3e      	ldr	r3, [pc, #248]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d4:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x34>
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d121      	bne.n	8002a2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d11e      	bne.n	8002a2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029f0:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029fc:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e005      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a18:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d102      	bne.n	8002a3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a34:	4b25      	ldr	r3, [pc, #148]	; (8002acc <HAL_RCC_GetSysClockFreq+0x110>)
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	e004      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a40:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d134      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d003      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0xac>
 8002a60:	e005      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a62:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HAL_RCC_GetSysClockFreq+0x110>)
 8002a64:	617b      	str	r3, [r7, #20]
      break;
 8002a66:	e005      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a6a:	617b      	str	r3, [r7, #20]
      break;
 8002a6c:	e002      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	617b      	str	r3, [r7, #20]
      break;
 8002a72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	3301      	adds	r3, #1
 8002a80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	fb03 f202 	mul.w	r2, r3, r2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	0e5b      	lsrs	r3, r3, #25
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	080052bc 	.word	0x080052bc
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	007a1200 	.word	0x007a1200

08002ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000000 	.word	0x20000000

08002aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002af0:	f7ff fff0 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4904      	ldr	r1, [pc, #16]	; (8002b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	080052b4 	.word	0x080052b4

08002b18 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	220f      	movs	r2, #15
 8002b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0203 	and.w	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_RCC_GetClockConfig+0x5c>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_RCC_GetClockConfig+0x60>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0207 	and.w	r2, r3, #7
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40022000 	.word	0x40022000

08002b7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b94:	f7ff f99a 	bl	8001ecc <HAL_PWREx_GetVoltageRange>
 8002b98:	6178      	str	r0, [r7, #20]
 8002b9a:	e014      	b.n	8002bc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba8:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bb4:	f7ff f98a 	bl	8001ecc <HAL_PWREx_GetVoltageRange>
 8002bb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bcc:	d10b      	bne.n	8002be6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d919      	bls.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2ba0      	cmp	r3, #160	; 0xa0
 8002bd8:	d902      	bls.n	8002be0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bda:	2302      	movs	r3, #2
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	e013      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	e010      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b80      	cmp	r3, #128	; 0x80
 8002bea:	d902      	bls.n	8002bf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bec:	2303      	movs	r3, #3
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	e00a      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b80      	cmp	r3, #128	; 0x80
 8002bf6:	d102      	bne.n	8002bfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	e004      	b.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b70      	cmp	r3, #112	; 0x70
 8002c02:	d101      	bne.n	8002c08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c04:	2301      	movs	r3, #1
 8002c06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 0207 	bic.w	r2, r3, #7
 8002c10:	4909      	ldr	r1, [pc, #36]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40022000 	.word	0x40022000

08002c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c44:	2300      	movs	r3, #0
 8002c46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c48:	2300      	movs	r3, #0
 8002c4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d031      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c60:	d01a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c66:	d814      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c70:	d10f      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c7e:	e00c      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fa44 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c90:	e003      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	74fb      	strb	r3, [r7, #19]
      break;
 8002c96:	e000      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca0:	4b51      	ldr	r3, [pc, #324]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	494e      	ldr	r1, [pc, #312]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cb6:	e001      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 809e 	beq.w	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cce:	4b46      	ldr	r3, [pc, #280]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00d      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	4b40      	ldr	r3, [pc, #256]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	4a3f      	ldr	r2, [pc, #252]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cee:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf0:	4b3d      	ldr	r3, [pc, #244]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d00:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a39      	ldr	r2, [pc, #228]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d0c:	f7fd fff4 	bl	8000cf8 <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d12:	e009      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d14:	f7fd fff0 	bl	8000cf8 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d902      	bls.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	74fb      	strb	r3, [r7, #19]
        break;
 8002d26:	e005      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d28:	4b30      	ldr	r3, [pc, #192]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ef      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d15a      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01e      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d019      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d62:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	4a1b      	ldr	r2, [pc, #108]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d82:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fd ffb0 	bl	8000cf8 <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fd ffac 	bl	8000cf8 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d902      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	74fb      	strb	r3, [r7, #19]
            break;
 8002db2:	e006      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ec      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd6:	4904      	ldr	r1, [pc, #16]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dde:	e009      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df4:	7c7b      	ldrb	r3, [r7, #17]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4b9e      	ldr	r3, [pc, #632]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	4a9d      	ldr	r2, [pc, #628]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e12:	4b98      	ldr	r3, [pc, #608]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	f023 0203 	bic.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4994      	ldr	r1, [pc, #592]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e34:	4b8f      	ldr	r3, [pc, #572]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f023 020c 	bic.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	498c      	ldr	r1, [pc, #560]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e56:	4b87      	ldr	r3, [pc, #540]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	4983      	ldr	r1, [pc, #524]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e78:	4b7e      	ldr	r3, [pc, #504]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	497b      	ldr	r1, [pc, #492]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e9a:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	4972      	ldr	r1, [pc, #456]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ebc:	4b6d      	ldr	r3, [pc, #436]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	496a      	ldr	r1, [pc, #424]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ede:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eec:	4961      	ldr	r1, [pc, #388]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f00:	4b5c      	ldr	r3, [pc, #368]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	4959      	ldr	r1, [pc, #356]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f22:	4b54      	ldr	r3, [pc, #336]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	4950      	ldr	r1, [pc, #320]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f44:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	4948      	ldr	r1, [pc, #288]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f66:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f6c:	f023 0203 	bic.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	493f      	ldr	r1, [pc, #252]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d028      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f88:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f96:	4937      	ldr	r1, [pc, #220]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa8:	4b32      	ldr	r3, [pc, #200]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a31      	ldr	r2, [pc, #196]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb2:	60d3      	str	r3, [r2, #12]
 8002fb4:	e011      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fbe:	d10c      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f8a4 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d028      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fe6:	4b23      	ldr	r3, [pc, #140]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	491f      	ldr	r1, [pc, #124]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003004:	d106      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800300c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003010:	60d3      	str	r3, [r2, #12]
 8003012:	e011      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800301c:	d10c      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	2101      	movs	r1, #1
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f875 	bl	8003114 <RCCEx_PLLSAI1_Config>
 800302a:	4603      	mov	r3, r0
 800302c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02b      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003062:	d109      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a02      	ldr	r2, [pc, #8]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800306a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800306e:	60d3      	str	r3, [r2, #12]
 8003070:	e014      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003080:	d10c      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	2101      	movs	r1, #1
 8003088:	4618      	mov	r0, r3
 800308a:	f000 f843 	bl	8003114 <RCCEx_PLLSAI1_Config>
 800308e:	4603      	mov	r3, r0
 8003090:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01c      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	4916      	ldr	r1, [pc, #88]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	2102      	movs	r1, #2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f820 	bl	8003114 <RCCEx_PLLSAI1_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fc:	4904      	ldr	r1, [pc, #16]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003104:	7cbb      	ldrb	r3, [r7, #18]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000

08003114 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003122:	4b74      	ldr	r3, [pc, #464]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800312e:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0203 	and.w	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d10d      	bne.n	800315a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
       ||
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003146:	4b6b      	ldr	r3, [pc, #428]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
       ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d047      	beq.n	80031ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e044      	b.n	80031ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d018      	beq.n	800319a <RCCEx_PLLSAI1_Config+0x86>
 8003168:	2b03      	cmp	r3, #3
 800316a:	d825      	bhi.n	80031b8 <RCCEx_PLLSAI1_Config+0xa4>
 800316c:	2b01      	cmp	r3, #1
 800316e:	d002      	beq.n	8003176 <RCCEx_PLLSAI1_Config+0x62>
 8003170:	2b02      	cmp	r3, #2
 8003172:	d009      	beq.n	8003188 <RCCEx_PLLSAI1_Config+0x74>
 8003174:	e020      	b.n	80031b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11d      	bne.n	80031be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003186:	e01a      	b.n	80031be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003188:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003190:	2b00      	cmp	r3, #0
 8003192:	d116      	bne.n	80031c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003198:	e013      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800319a:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031a6:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031b6:	e006      	b.n	80031c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      break;
 80031bc:	e004      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031be:	bf00      	nop
 80031c0:	e002      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10d      	bne.n	80031ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031ce:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	430b      	orrs	r3, r1
 80031e4:	4943      	ldr	r1, [pc, #268]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d17c      	bne.n	80032ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031f0:	4b40      	ldr	r3, [pc, #256]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a3f      	ldr	r2, [pc, #252]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031fc:	f7fd fd7c 	bl	8000cf8 <HAL_GetTick>
 8003200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003202:	e009      	b.n	8003218 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003204:	f7fd fd78 	bl	8000cf8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d902      	bls.n	8003218 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	73fb      	strb	r3, [r7, #15]
        break;
 8003216:	e005      	b.n	8003224 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1ef      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d15f      	bne.n	80032ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d110      	bne.n	8003252 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003230:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6892      	ldr	r2, [r2, #8]
 8003240:	0211      	lsls	r1, r2, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68d2      	ldr	r2, [r2, #12]
 8003246:	06d2      	lsls	r2, r2, #27
 8003248:	430a      	orrs	r2, r1
 800324a:	492a      	ldr	r1, [pc, #168]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324c:	4313      	orrs	r3, r2
 800324e:	610b      	str	r3, [r1, #16]
 8003250:	e027      	b.n	80032a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d112      	bne.n	800327e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003258:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003260:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6892      	ldr	r2, [r2, #8]
 8003268:	0211      	lsls	r1, r2, #8
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6912      	ldr	r2, [r2, #16]
 800326e:	0852      	lsrs	r2, r2, #1
 8003270:	3a01      	subs	r2, #1
 8003272:	0552      	lsls	r2, r2, #21
 8003274:	430a      	orrs	r2, r1
 8003276:	491f      	ldr	r1, [pc, #124]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003278:	4313      	orrs	r3, r2
 800327a:	610b      	str	r3, [r1, #16]
 800327c:	e011      	b.n	80032a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003286:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6892      	ldr	r2, [r2, #8]
 800328e:	0211      	lsls	r1, r2, #8
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6952      	ldr	r2, [r2, #20]
 8003294:	0852      	lsrs	r2, r2, #1
 8003296:	3a01      	subs	r2, #1
 8003298:	0652      	lsls	r2, r2, #25
 800329a:	430a      	orrs	r2, r1
 800329c:	4915      	ldr	r1, [pc, #84]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fd fd23 	bl	8000cf8 <HAL_GetTick>
 80032b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032b4:	e009      	b.n	80032ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032b6:	f7fd fd1f 	bl	8000cf8 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d902      	bls.n	80032ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	73fb      	strb	r3, [r7, #15]
          break;
 80032c8:	e005      	b.n	80032d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0ef      	beq.n	80032b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	4903      	ldr	r1, [pc, #12]	; (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000

080032f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d06c      	beq.n	80033e4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd fb0e 	bl	8000940 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	22ca      	movs	r2, #202	; 0xca
 8003332:	625a      	str	r2, [r3, #36]	; 0x24
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2253      	movs	r2, #83	; 0x53
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f87c 	bl	800343a <RTC_EnterInitMode>
 8003342:	4603      	mov	r3, r0
 8003344:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d14b      	bne.n	80033e4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800335a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6899      	ldr	r1, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68d2      	ldr	r2, [r2, #12]
 8003386:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6919      	ldr	r1, [r3, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	041a      	lsls	r2, r3, #16
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f87f 	bl	80034a0 <RTC_ExitInitMode>
 80033a2:	4603      	mov	r3, r0
 80033a4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d11b      	bne.n	80033e4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0203 	bic.w	r2, r2, #3
 80033ba:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	22ff      	movs	r2, #255	; 0xff
 80033da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003404:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003406:	f7fd fc77 	bl	8000cf8 <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800340c:	e009      	b.n	8003422 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800340e:	f7fd fc73 	bl	8000cf8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800341c:	d901      	bls.n	8003422 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e007      	b.n	8003432 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ee      	beq.n	800340e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d120      	bne.n	8003496 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800345e:	f7fd fc4b 	bl	8000cf8 <HAL_GetTick>
 8003462:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003464:	e00d      	b.n	8003482 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003466:	f7fd fc47 	bl	8000cf8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003474:	d905      	bls.n	8003482 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <RTC_EnterInitMode+0x5c>
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d1e7      	bne.n	8003466 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <RTC_ExitInitMode+0x78>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <RTC_ExitInitMode+0x78>)
 80034b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <RTC_ExitInitMode+0x78>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10c      	bne.n	80034de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff92 	bl	80033ee <HAL_RTC_WaitForSynchro>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01e      	beq.n	800350e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2203      	movs	r2, #3
 80034d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	73fb      	strb	r3, [r7, #15]
 80034dc:	e017      	b.n	800350e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <RTC_ExitInitMode+0x78>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <RTC_ExitInitMode+0x78>)
 80034e4:	f023 0320 	bic.w	r3, r3, #32
 80034e8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ff7f 	bl	80033ee <HAL_RTC_WaitForSynchro>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2203      	movs	r2, #3
 80034fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <RTC_ExitInitMode+0x78>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4a04      	ldr	r2, [pc, #16]	; (8003518 <RTC_ExitInitMode+0x78>)
 8003508:	f043 0320 	orr.w	r3, r3, #32
 800350c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40002800 	.word	0x40002800

0800351c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e095      	b.n	800365a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d108      	bne.n	8003548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800353e:	d009      	beq.n	8003554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
 8003546:	e005      	b.n	8003554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fa16 	bl	80009a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800358a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003594:	d902      	bls.n	800359c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e002      	b.n	80035a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800359c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80035aa:	d007      	beq.n	80035bc <HAL_SPI_Init+0xa0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035b4:	d002      	beq.n	80035bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	ea42 0103 	orr.w	r1, r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	f003 0204 	and.w	r2, r3, #4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003638:	ea42 0103 	orr.w	r1, r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e049      	b.n	8003708 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f841 	bl	8003710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f000 f9e3 	bl	8003a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d001      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e040      	b.n	80037be <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <HAL_TIM_Base_Start_IT+0xa8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x58>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003766:	d009      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x58>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_TIM_Base_Start_IT+0xac>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x58>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d115      	bne.n	80037a8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d015      	beq.n	80037ba <HAL_TIM_Base_Start_IT+0x96>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003794:	d011      	beq.n	80037ba <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a6:	e008      	b.n	80037ba <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e000      	b.n	80037bc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40014000 	.word	0x40014000
 80037d8:	00010007 	.word	0x00010007

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f905 	bl	8003a2e <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8f7 	bl	8003a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f908 	bl	8003a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f8db 	bl	8003a2e <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8cd 	bl	8003a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8de 	bl	8003a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0208 	mvn.w	r2, #8
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8b1 	bl	8003a2e <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8a3 	bl	8003a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f8b4 	bl	8003a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2208      	movs	r2, #8
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f887 	bl	8003a2e <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f879 	bl	8003a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f88a 	bl	8003a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fc ff64 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8e8 	bl	8003b5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399a:	d10e      	bne.n	80039ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d107      	bne.n	80039ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f8db 	bl	8003b70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d10e      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d107      	bne.n	80039e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f838 	bl	8003a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d10e      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	d107      	bne.n	8003a12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f06f 0220 	mvn.w	r2, #32
 8003a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f89b 	bl	8003b48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a2e      	ldr	r2, [pc, #184]	; (8003b38 <TIM_Base_SetConfig+0xcc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_Base_SetConfig+0x28>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0x28>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <TIM_Base_SetConfig+0xd0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d108      	bne.n	8003aa6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a23      	ldr	r2, [pc, #140]	; (8003b38 <TIM_Base_SetConfig+0xcc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00f      	beq.n	8003ace <TIM_Base_SetConfig+0x62>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d00b      	beq.n	8003ace <TIM_Base_SetConfig+0x62>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a20      	ldr	r2, [pc, #128]	; (8003b3c <TIM_Base_SetConfig+0xd0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <TIM_Base_SetConfig+0x62>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <TIM_Base_SetConfig+0xd4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <TIM_Base_SetConfig+0x62>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <TIM_Base_SetConfig+0xd8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d108      	bne.n	8003ae0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <TIM_Base_SetConfig+0xcc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d007      	beq.n	8003b1c <TIM_Base_SetConfig+0xb0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <TIM_Base_SetConfig+0xd4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0xb0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a0b      	ldr	r2, [pc, #44]	; (8003b44 <TIM_Base_SetConfig+0xd8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d103      	bne.n	8003b24 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	615a      	str	r2, [r3, #20]
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40014400 	.word	0x40014400

08003b48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b96:	2b84      	cmp	r3, #132	; 0x84
 8003b98:	d005      	beq.n	8003ba6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3303      	adds	r3, #3
 8003ba4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003bb8:	f000 faf6 	bl	80041a8 <vTaskStartScheduler>
  
  return osOK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc4:	b089      	sub	sp, #36	; 0x24
 8003bc6:	af04      	add	r7, sp, #16
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <osThreadCreate+0x54>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01c      	beq.n	8003c16 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685c      	ldr	r4, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681d      	ldr	r5, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691e      	ldr	r6, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ffc8 	bl	8003b84 <makeFreeRtosPriority>
 8003bf4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003bfe:	9202      	str	r2, [sp, #8]
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	9100      	str	r1, [sp, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4632      	mov	r2, r6
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 f8ed 	bl	8003dea <xTaskCreateStatic>
 8003c10:	4603      	mov	r3, r0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e01c      	b.n	8003c50 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685c      	ldr	r4, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c22:	b29e      	uxth	r6, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff ffaa 	bl	8003b84 <makeFreeRtosPriority>
 8003c30:	4602      	mov	r2, r0
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	9200      	str	r2, [sp, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	4632      	mov	r2, r6
 8003c3e:	4629      	mov	r1, r5
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 f92f 	bl	8003ea4 <xTaskCreate>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d001      	beq.n	8003c50 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003c50:	68fb      	ldr	r3, [r7, #12]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c5a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <osDelay+0x16>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	e000      	b.n	8003c72 <osDelay+0x18>
 8003c70:	2301      	movs	r3, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fa64 	bl	8004140 <vTaskDelay>
  
  return osOK;
 8003c78:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f103 0208 	add.w	r2, r3, #8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f103 0208 	add.w	r2, r3, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f103 0208 	add.w	r2, r3, #8
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	601a      	str	r2, [r3, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d103      	bne.n	8003d44 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e00c      	b.n	8003d5e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3308      	adds	r3, #8
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	e002      	b.n	8003d52 <vListInsert+0x2e>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d2f6      	bcs.n	8003d4c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6892      	ldr	r2, [r2, #8]
 8003dac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6852      	ldr	r2, [r2, #4]
 8003db6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d103      	bne.n	8003dca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1e5a      	subs	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b08e      	sub	sp, #56	; 0x38
 8003dee:	af04      	add	r7, sp, #16
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <xTaskCreateStatic+0x46>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	61fb      	str	r3, [r7, #28]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e30:	23b4      	movs	r3, #180	; 0xb4
 8003e32:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2bb4      	cmp	r3, #180	; 0xb4
 8003e38:	d00a      	beq.n	8003e50 <xTaskCreateStatic+0x66>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	61bb      	str	r3, [r7, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01e      	beq.n	8003e96 <xTaskCreateStatic+0xac>
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01b      	beq.n	8003e96 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e70:	2300      	movs	r3, #0
 8003e72:	9303      	str	r3, [sp, #12]
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	9302      	str	r3, [sp, #8]
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f851 	bl	8003f30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e90:	f000 f8ec 	bl	800406c <prvAddNewTaskToReadyList>
 8003e94:	e001      	b.n	8003e9a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e9a:	697b      	ldr	r3, [r7, #20]
	}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3728      	adds	r7, #40	; 0x28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08c      	sub	sp, #48	; 0x30
 8003ea8:	af04      	add	r7, sp, #16
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fef5 	bl	8004ca8 <pvPortMalloc>
 8003ebe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00e      	beq.n	8003ee4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ec6:	20b4      	movs	r0, #180	; 0xb4
 8003ec8:	f000 feee 	bl	8004ca8 <pvPortMalloc>
 8003ecc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8003eda:	e005      	b.n	8003ee8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003edc:	6978      	ldr	r0, [r7, #20]
 8003ede:	f000 ffaf 	bl	8004e40 <vPortFree>
 8003ee2:	e001      	b.n	8003ee8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d017      	beq.n	8003f1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	9303      	str	r3, [sp, #12]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	9302      	str	r3, [sp, #8]
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f80f 	bl	8003f30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f12:	69f8      	ldr	r0, [r7, #28]
 8003f14:	f000 f8aa 	bl	800406c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e002      	b.n	8003f24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f24:	69bb      	ldr	r3, [r7, #24]
	}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3720      	adds	r7, #32
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f023 0307 	bic.w	r3, r3, #7
 8003f56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	617b      	str	r3, [r7, #20]
}
 8003f74:	bf00      	nop
 8003f76:	e7fe      	b.n	8003f76 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01f      	beq.n	8003fbe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e012      	b.n	8003faa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	7819      	ldrb	r1, [r3, #0]
 8003f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	4413      	add	r3, r2
 8003f92:	3334      	adds	r3, #52	; 0x34
 8003f94:	460a      	mov	r2, r1
 8003f96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d006      	beq.n	8003fb2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b0f      	cmp	r3, #15
 8003fae:	d9e9      	bls.n	8003f84 <prvInitialiseNewTask+0x54>
 8003fb0:	e000      	b.n	8003fb4 <prvInitialiseNewTask+0x84>
			{
				break;
 8003fb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fbc:	e003      	b.n	8003fc6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	2b06      	cmp	r3, #6
 8003fca:	d901      	bls.n	8003fd0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fcc:	2306      	movs	r3, #6
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fda:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2200      	movs	r2, #0
 8003fe0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fe6b 	bl	8003cc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	3318      	adds	r3, #24
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff fe66 	bl	8003cc2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	f1c3 0207 	rsb	r2, r3, #7
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	2200      	movs	r2, #0
 8004018:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	334c      	adds	r3, #76	; 0x4c
 8004020:	2260      	movs	r2, #96	; 0x60
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f001 f84f 	bl	80050c8 <memset>
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <prvInitialiseNewTask+0x130>)
 800402e:	651a      	str	r2, [r3, #80]	; 0x50
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <prvInitialiseNewTask+0x134>)
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <prvInitialiseNewTask+0x138>)
 800403a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	69b8      	ldr	r0, [r7, #24]
 8004042:	f000 fc1f 	bl	8004884 <pxPortInitialiseStack>
 8004046:	4602      	mov	r2, r0
 8004048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004056:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004058:	bf00      	nop
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	0800530c 	.word	0x0800530c
 8004064:	0800532c 	.word	0x0800532c
 8004068:	080052ec 	.word	0x080052ec

0800406c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004074:	f000 fd36 	bl	8004ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <prvAddNewTaskToReadyList+0xb8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	4a29      	ldr	r2, [pc, #164]	; (8004124 <prvAddNewTaskToReadyList+0xb8>)
 8004080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <prvAddNewTaskToReadyList+0xbc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800408a:	4a27      	ldr	r2, [pc, #156]	; (8004128 <prvAddNewTaskToReadyList+0xbc>)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004090:	4b24      	ldr	r3, [pc, #144]	; (8004124 <prvAddNewTaskToReadyList+0xb8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d110      	bne.n	80040ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004098:	f000 facc 	bl	8004634 <prvInitialiseTaskLists>
 800409c:	e00d      	b.n	80040ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800409e:	4b23      	ldr	r3, [pc, #140]	; (800412c <prvAddNewTaskToReadyList+0xc0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <prvAddNewTaskToReadyList+0xbc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d802      	bhi.n	80040ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040b4:	4a1c      	ldr	r2, [pc, #112]	; (8004128 <prvAddNewTaskToReadyList+0xbc>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <prvAddNewTaskToReadyList+0xc4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3301      	adds	r3, #1
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <prvAddNewTaskToReadyList+0xc4>)
 80040c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <prvAddNewTaskToReadyList+0xc8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	4a18      	ldr	r2, [pc, #96]	; (8004134 <prvAddNewTaskToReadyList+0xc8>)
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4a15      	ldr	r2, [pc, #84]	; (8004138 <prvAddNewTaskToReadyList+0xcc>)
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	4619      	mov	r1, r3
 80040ec:	4610      	mov	r0, r2
 80040ee:	f7ff fdf5 	bl	8003cdc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040f2:	f000 fd27 	bl	8004b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <prvAddNewTaskToReadyList+0xc0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00e      	beq.n	800411c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <prvAddNewTaskToReadyList+0xbc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	429a      	cmp	r2, r3
 800410a:	d207      	bcs.n	800411c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <prvAddNewTaskToReadyList+0xd0>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	2000061c 	.word	0x2000061c
 8004128:	2000051c 	.word	0x2000051c
 800412c:	20000628 	.word	0x20000628
 8004130:	20000638 	.word	0x20000638
 8004134:	20000624 	.word	0x20000624
 8004138:	20000520 	.word	0x20000520
 800413c:	e000ed04 	.word	0xe000ed04

08004140 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d017      	beq.n	8004182 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004152:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <vTaskDelay+0x60>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <vTaskDelay+0x30>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	60bb      	str	r3, [r7, #8]
}
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004170:	f000 f884 	bl	800427c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004174:	2100      	movs	r1, #0
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fb1e 	bl	80047b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800417c:	f000 f88c 	bl	8004298 <xTaskResumeAll>
 8004180:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <vTaskDelay+0x64>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000644 	.word	0x20000644
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041b6:	463a      	mov	r2, r7
 80041b8:	1d39      	adds	r1, r7, #4
 80041ba:	f107 0308 	add.w	r3, r7, #8
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f8b4 	bl	800032c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041c4:	6839      	ldr	r1, [r7, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	9202      	str	r2, [sp, #8]
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	2300      	movs	r3, #0
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2300      	movs	r3, #0
 80041d4:	460a      	mov	r2, r1
 80041d6:	4921      	ldr	r1, [pc, #132]	; (800425c <vTaskStartScheduler+0xb4>)
 80041d8:	4821      	ldr	r0, [pc, #132]	; (8004260 <vTaskStartScheduler+0xb8>)
 80041da:	f7ff fe06 	bl	8003dea <xTaskCreateStatic>
 80041de:	4603      	mov	r3, r0
 80041e0:	4a20      	ldr	r2, [pc, #128]	; (8004264 <vTaskStartScheduler+0xbc>)
 80041e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041e4:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <vTaskStartScheduler+0xbc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041ec:	2301      	movs	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e001      	b.n	80041f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d11b      	bne.n	8004234 <vTaskStartScheduler+0x8c>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	613b      	str	r3, [r7, #16]
}
 800420e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004210:	4b15      	ldr	r3, [pc, #84]	; (8004268 <vTaskStartScheduler+0xc0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	334c      	adds	r3, #76	; 0x4c
 8004216:	4a15      	ldr	r2, [pc, #84]	; (800426c <vTaskStartScheduler+0xc4>)
 8004218:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <vTaskStartScheduler+0xc8>)
 800421c:	f04f 32ff 	mov.w	r2, #4294967295
 8004220:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <vTaskStartScheduler+0xcc>)
 8004224:	2201      	movs	r2, #1
 8004226:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <vTaskStartScheduler+0xd0>)
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800422e:	f000 fbb7 	bl	80049a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004232:	e00e      	b.n	8004252 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d10a      	bne.n	8004252 <vTaskStartScheduler+0xaa>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	60fb      	str	r3, [r7, #12]
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <vTaskStartScheduler+0xa8>
}
 8004252:	bf00      	nop
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	0800529c 	.word	0x0800529c
 8004260:	08004605 	.word	0x08004605
 8004264:	20000640 	.word	0x20000640
 8004268:	2000051c 	.word	0x2000051c
 800426c:	20000010 	.word	0x20000010
 8004270:	2000063c 	.word	0x2000063c
 8004274:	20000628 	.word	0x20000628
 8004278:	20000620 	.word	0x20000620

0800427c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <vTaskSuspendAll+0x18>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	4a03      	ldr	r2, [pc, #12]	; (8004294 <vTaskSuspendAll+0x18>)
 8004288:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	20000644 	.word	0x20000644

08004298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042a6:	4b41      	ldr	r3, [pc, #260]	; (80043ac <xTaskResumeAll+0x114>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	603b      	str	r3, [r7, #0]
}
 80042c0:	bf00      	nop
 80042c2:	e7fe      	b.n	80042c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042c4:	f000 fc0e 	bl	8004ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042c8:	4b38      	ldr	r3, [pc, #224]	; (80043ac <xTaskResumeAll+0x114>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	4a37      	ldr	r2, [pc, #220]	; (80043ac <xTaskResumeAll+0x114>)
 80042d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042d2:	4b36      	ldr	r3, [pc, #216]	; (80043ac <xTaskResumeAll+0x114>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d161      	bne.n	800439e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042da:	4b35      	ldr	r3, [pc, #212]	; (80043b0 <xTaskResumeAll+0x118>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d05d      	beq.n	800439e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042e2:	e02e      	b.n	8004342 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e4:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <xTaskResumeAll+0x11c>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3318      	adds	r3, #24
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fd50 	bl	8003d96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fd4b 	bl	8003d96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <xTaskResumeAll+0x120>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4313      	orrs	r3, r2
 800430e:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <xTaskResumeAll+0x120>)
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4a27      	ldr	r2, [pc, #156]	; (80043bc <xTaskResumeAll+0x124>)
 8004320:	441a      	add	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3304      	adds	r3, #4
 8004326:	4619      	mov	r1, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7ff fcd7 	bl	8003cdc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004332:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <xTaskResumeAll+0x128>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800433c:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <xTaskResumeAll+0x12c>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004342:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <xTaskResumeAll+0x11c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1cc      	bne.n	80042e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004350:	f000 fa12 	bl	8004778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <xTaskResumeAll+0x130>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d010      	beq.n	8004382 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004360:	f000 f836 	bl	80043d0 <xTaskIncrementTick>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800436a:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <xTaskResumeAll+0x12c>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f1      	bne.n	8004360 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800437c:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <xTaskResumeAll+0x130>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <xTaskResumeAll+0x12c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800438a:	2301      	movs	r3, #1
 800438c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <xTaskResumeAll+0x134>)
 8004390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800439e:	f000 fbd1 	bl	8004b44 <vPortExitCritical>

	return xAlreadyYielded;
 80043a2:	68bb      	ldr	r3, [r7, #8]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000644 	.word	0x20000644
 80043b0:	2000061c 	.word	0x2000061c
 80043b4:	200005dc 	.word	0x200005dc
 80043b8:	20000624 	.word	0x20000624
 80043bc:	20000520 	.word	0x20000520
 80043c0:	2000051c 	.word	0x2000051c
 80043c4:	20000630 	.word	0x20000630
 80043c8:	2000062c 	.word	0x2000062c
 80043cc:	e000ed04 	.word	0xe000ed04

080043d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043da:	4b4e      	ldr	r3, [pc, #312]	; (8004514 <xTaskIncrementTick+0x144>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 808e 	bne.w	8004500 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043e4:	4b4c      	ldr	r3, [pc, #304]	; (8004518 <xTaskIncrementTick+0x148>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043ec:	4a4a      	ldr	r2, [pc, #296]	; (8004518 <xTaskIncrementTick+0x148>)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d120      	bne.n	800443a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043f8:	4b48      	ldr	r3, [pc, #288]	; (800451c <xTaskIncrementTick+0x14c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <xTaskIncrementTick+0x48>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	603b      	str	r3, [r7, #0]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <xTaskIncrementTick+0x46>
 8004418:	4b40      	ldr	r3, [pc, #256]	; (800451c <xTaskIncrementTick+0x14c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4b40      	ldr	r3, [pc, #256]	; (8004520 <xTaskIncrementTick+0x150>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a3e      	ldr	r2, [pc, #248]	; (800451c <xTaskIncrementTick+0x14c>)
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4a3e      	ldr	r2, [pc, #248]	; (8004520 <xTaskIncrementTick+0x150>)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	4b3d      	ldr	r3, [pc, #244]	; (8004524 <xTaskIncrementTick+0x154>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	4a3c      	ldr	r2, [pc, #240]	; (8004524 <xTaskIncrementTick+0x154>)
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	f000 f99f 	bl	8004778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800443a:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <xTaskIncrementTick+0x158>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	429a      	cmp	r2, r3
 8004442:	d348      	bcc.n	80044d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004444:	4b35      	ldr	r3, [pc, #212]	; (800451c <xTaskIncrementTick+0x14c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d104      	bne.n	8004458 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444e:	4b36      	ldr	r3, [pc, #216]	; (8004528 <xTaskIncrementTick+0x158>)
 8004450:	f04f 32ff 	mov.w	r2, #4294967295
 8004454:	601a      	str	r2, [r3, #0]
					break;
 8004456:	e03e      	b.n	80044d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004458:	4b30      	ldr	r3, [pc, #192]	; (800451c <xTaskIncrementTick+0x14c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d203      	bcs.n	8004478 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004470:	4a2d      	ldr	r2, [pc, #180]	; (8004528 <xTaskIncrementTick+0x158>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004476:	e02e      	b.n	80044d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	3304      	adds	r3, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fc8a 	bl	8003d96 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	3318      	adds	r3, #24
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fc81 	bl	8003d96 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	2201      	movs	r2, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	4b23      	ldr	r3, [pc, #140]	; (800452c <xTaskIncrementTick+0x15c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	4a22      	ldr	r2, [pc, #136]	; (800452c <xTaskIncrementTick+0x15c>)
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <xTaskIncrementTick+0x160>)
 80044b4:	441a      	add	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7ff fc0d 	bl	8003cdc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c6:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <xTaskIncrementTick+0x164>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d3b9      	bcc.n	8004444 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044d4:	e7b6      	b.n	8004444 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044d6:	4b17      	ldr	r3, [pc, #92]	; (8004534 <xTaskIncrementTick+0x164>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	4914      	ldr	r1, [pc, #80]	; (8004530 <xTaskIncrementTick+0x160>)
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d901      	bls.n	80044f2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80044ee:	2301      	movs	r3, #1
 80044f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <xTaskIncrementTick+0x168>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80044fa:	2301      	movs	r3, #1
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e004      	b.n	800450a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <xTaskIncrementTick+0x16c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	4a0d      	ldr	r2, [pc, #52]	; (800453c <xTaskIncrementTick+0x16c>)
 8004508:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800450a:	697b      	ldr	r3, [r7, #20]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000644 	.word	0x20000644
 8004518:	20000620 	.word	0x20000620
 800451c:	200005d4 	.word	0x200005d4
 8004520:	200005d8 	.word	0x200005d8
 8004524:	20000634 	.word	0x20000634
 8004528:	2000063c 	.word	0x2000063c
 800452c:	20000624 	.word	0x20000624
 8004530:	20000520 	.word	0x20000520
 8004534:	2000051c 	.word	0x2000051c
 8004538:	20000630 	.word	0x20000630
 800453c:	2000062c 	.word	0x2000062c

08004540 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <vTaskSwitchContext+0xac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800454e:	4b28      	ldr	r3, [pc, #160]	; (80045f0 <vTaskSwitchContext+0xb0>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004554:	e044      	b.n	80045e0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004556:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <vTaskSwitchContext+0xb0>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <vTaskSwitchContext+0xb4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	f1c3 031f 	rsb	r3, r3, #31
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	4921      	ldr	r1, [pc, #132]	; (80045f8 <vTaskSwitchContext+0xb8>)
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	607b      	str	r3, [r7, #4]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <vTaskSwitchContext+0x5a>
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <vTaskSwitchContext+0xb8>)
 80045a8:	4413      	add	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	3308      	adds	r3, #8
 80045be:	429a      	cmp	r2, r3
 80045c0:	d104      	bne.n	80045cc <vTaskSwitchContext+0x8c>
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <vTaskSwitchContext+0xbc>)
 80045d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <vTaskSwitchContext+0xbc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	334c      	adds	r3, #76	; 0x4c
 80045dc:	4a08      	ldr	r2, [pc, #32]	; (8004600 <vTaskSwitchContext+0xc0>)
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	20000644 	.word	0x20000644
 80045f0:	20000630 	.word	0x20000630
 80045f4:	20000624 	.word	0x20000624
 80045f8:	20000520 	.word	0x20000520
 80045fc:	2000051c 	.word	0x2000051c
 8004600:	20000010 	.word	0x20000010

08004604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800460c:	f000 f852 	bl	80046b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <prvIdleTask+0x28>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d9f9      	bls.n	800460c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004618:	4b05      	ldr	r3, [pc, #20]	; (8004630 <prvIdleTask+0x2c>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004628:	e7f0      	b.n	800460c <prvIdleTask+0x8>
 800462a:	bf00      	nop
 800462c:	20000520 	.word	0x20000520
 8004630:	e000ed04 	.word	0xe000ed04

08004634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	e00c      	b.n	800465a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4a12      	ldr	r2, [pc, #72]	; (8004694 <prvInitialiseTaskLists+0x60>)
 800464c:	4413      	add	r3, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fb17 	bl	8003c82 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3301      	adds	r3, #1
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b06      	cmp	r3, #6
 800465e:	d9ef      	bls.n	8004640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004660:	480d      	ldr	r0, [pc, #52]	; (8004698 <prvInitialiseTaskLists+0x64>)
 8004662:	f7ff fb0e 	bl	8003c82 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004666:	480d      	ldr	r0, [pc, #52]	; (800469c <prvInitialiseTaskLists+0x68>)
 8004668:	f7ff fb0b 	bl	8003c82 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800466c:	480c      	ldr	r0, [pc, #48]	; (80046a0 <prvInitialiseTaskLists+0x6c>)
 800466e:	f7ff fb08 	bl	8003c82 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004672:	480c      	ldr	r0, [pc, #48]	; (80046a4 <prvInitialiseTaskLists+0x70>)
 8004674:	f7ff fb05 	bl	8003c82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004678:	480b      	ldr	r0, [pc, #44]	; (80046a8 <prvInitialiseTaskLists+0x74>)
 800467a:	f7ff fb02 	bl	8003c82 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <prvInitialiseTaskLists+0x78>)
 8004680:	4a05      	ldr	r2, [pc, #20]	; (8004698 <prvInitialiseTaskLists+0x64>)
 8004682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <prvInitialiseTaskLists+0x7c>)
 8004686:	4a05      	ldr	r2, [pc, #20]	; (800469c <prvInitialiseTaskLists+0x68>)
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000520 	.word	0x20000520
 8004698:	200005ac 	.word	0x200005ac
 800469c:	200005c0 	.word	0x200005c0
 80046a0:	200005dc 	.word	0x200005dc
 80046a4:	200005f0 	.word	0x200005f0
 80046a8:	20000608 	.word	0x20000608
 80046ac:	200005d4 	.word	0x200005d4
 80046b0:	200005d8 	.word	0x200005d8

080046b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ba:	e019      	b.n	80046f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046bc:	f000 fa12 	bl	8004ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <prvCheckTasksWaitingTermination+0x50>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fb62 	bl	8003d96 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046d2:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <prvCheckTasksWaitingTermination+0x54>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	4a0b      	ldr	r2, [pc, #44]	; (8004708 <prvCheckTasksWaitingTermination+0x54>)
 80046da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <prvCheckTasksWaitingTermination+0x58>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <prvCheckTasksWaitingTermination+0x58>)
 80046e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046e6:	f000 fa2d 	bl	8004b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f810 	bl	8004710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <prvCheckTasksWaitingTermination+0x58>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e1      	bne.n	80046bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200005f0 	.word	0x200005f0
 8004708:	2000061c 	.word	0x2000061c
 800470c:	20000604 	.word	0x20000604

08004710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	334c      	adds	r3, #76	; 0x4c
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fce9 	bl	80050f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d108      	bne.n	800473e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fb85 	bl	8004e40 <vPortFree>
				vPortFree( pxTCB );
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fb82 	bl	8004e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800473c:	e018      	b.n	8004770 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d103      	bne.n	8004750 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fb79 	bl	8004e40 <vPortFree>
	}
 800474e:	e00f      	b.n	8004770 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004756:	2b02      	cmp	r3, #2
 8004758:	d00a      	beq.n	8004770 <prvDeleteTCB+0x60>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	60fb      	str	r3, [r7, #12]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <prvDeleteTCB+0x5e>
	}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <prvResetNextTaskUnblockTime+0x38>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <prvResetNextTaskUnblockTime+0x3c>)
 800478a:	f04f 32ff 	mov.w	r2, #4294967295
 800478e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004790:	e008      	b.n	80047a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <prvResetNextTaskUnblockTime+0x38>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <prvResetNextTaskUnblockTime+0x3c>)
 80047a2:	6013      	str	r3, [r2, #0]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	200005d4 	.word	0x200005d4
 80047b4:	2000063c 	.word	0x2000063c

080047b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047c2:	4b29      	ldr	r3, [pc, #164]	; (8004868 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047c8:	4b28      	ldr	r3, [pc, #160]	; (800486c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3304      	adds	r3, #4
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fae1 	bl	8003d96 <uxListRemove>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10b      	bne.n	80047f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047da:	4b24      	ldr	r3, [pc, #144]	; (800486c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	2201      	movs	r2, #1
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43da      	mvns	r2, r3
 80047e8:	4b21      	ldr	r3, [pc, #132]	; (8004870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4013      	ands	r3, r2
 80047ee:	4a20      	ldr	r2, [pc, #128]	; (8004870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d10a      	bne.n	8004810 <prvAddCurrentTaskToDelayedList+0x58>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	481a      	ldr	r0, [pc, #104]	; (8004874 <prvAddCurrentTaskToDelayedList+0xbc>)
 800480a:	f7ff fa67 	bl	8003cdc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800480e:	e026      	b.n	800485e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004818:	4b14      	ldr	r3, [pc, #80]	; (800486c <prvAddCurrentTaskToDelayedList+0xb4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	429a      	cmp	r2, r3
 8004826:	d209      	bcs.n	800483c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004828:	4b13      	ldr	r3, [pc, #76]	; (8004878 <prvAddCurrentTaskToDelayedList+0xc0>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <prvAddCurrentTaskToDelayedList+0xb4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3304      	adds	r3, #4
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f7ff fa75 	bl	8003d24 <vListInsert>
}
 800483a:	e010      	b.n	800485e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <prvAddCurrentTaskToDelayedList+0xc4>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7ff fa6b 	bl	8003d24 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	429a      	cmp	r2, r3
 8004856:	d202      	bcs.n	800485e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <prvAddCurrentTaskToDelayedList+0xc8>)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	6013      	str	r3, [r2, #0]
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000620 	.word	0x20000620
 800486c:	2000051c 	.word	0x2000051c
 8004870:	20000624 	.word	0x20000624
 8004874:	20000608 	.word	0x20000608
 8004878:	200005d8 	.word	0x200005d8
 800487c:	200005d4 	.word	0x200005d4
 8004880:	2000063c 	.word	0x2000063c

08004884 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3b04      	subs	r3, #4
 8004894:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800489c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3b04      	subs	r3, #4
 80048a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f023 0201 	bic.w	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3b04      	subs	r3, #4
 80048b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048b4:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <pxPortInitialiseStack+0x64>)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b14      	subs	r3, #20
 80048be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3b04      	subs	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f06f 0202 	mvn.w	r2, #2
 80048d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3b20      	subs	r3, #32
 80048d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	080048ed 	.word	0x080048ed

080048ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <prvTaskExitError+0x54>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d00a      	beq.n	8004916 <prvTaskExitError+0x2a>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	60fb      	str	r3, [r7, #12]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <prvTaskExitError+0x28>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	60bb      	str	r3, [r7, #8]
}
 8004928:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800492a:	bf00      	nop
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0fc      	beq.n	800492c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	2000000c 	.word	0x2000000c
	...

08004950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <pxCurrentTCBConst2>)
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	6808      	ldr	r0, [r1, #0]
 8004956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	f380 8809 	msr	PSP, r0
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8811 	msr	BASEPRI, r0
 800496a:	4770      	bx	lr
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst2>:
 8004970:	2000051c 	.word	0x2000051c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004978:	4808      	ldr	r0, [pc, #32]	; (800499c <prvPortStartFirstTask+0x24>)
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	6800      	ldr	r0, [r0, #0]
 800497e:	f380 8808 	msr	MSP, r0
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f380 8814 	msr	CONTROL, r0
 800498a:	b662      	cpsie	i
 800498c:	b661      	cpsie	f
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	df00      	svc	0
 8004998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800499a:	bf00      	nop
 800499c:	e000ed08 	.word	0xe000ed08

080049a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049a6:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <xPortStartScheduler+0x120>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a46      	ldr	r2, [pc, #280]	; (8004ac4 <xPortStartScheduler+0x124>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10a      	bne.n	80049c6 <xPortStartScheduler+0x26>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	613b      	str	r3, [r7, #16]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049c6:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <xPortStartScheduler+0x120>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3f      	ldr	r2, [pc, #252]	; (8004ac8 <xPortStartScheduler+0x128>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10a      	bne.n	80049e6 <xPortStartScheduler+0x46>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60fb      	str	r3, [r7, #12]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <xPortStartScheduler+0x12c>)
 80049e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a0e:	4b31      	ldr	r3, [pc, #196]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a10:	2207      	movs	r2, #7
 8004a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a14:	e009      	b.n	8004a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a16:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d0ef      	beq.n	8004a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a36:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1c3 0307 	rsb	r3, r3, #7
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d00a      	beq.n	8004a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	60bb      	str	r3, [r7, #8]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a58:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a76:	4b18      	ldr	r3, [pc, #96]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a14      	ldr	r2, [pc, #80]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a8e:	f000 f8dd 	bl	8004c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <xPortStartScheduler+0x13c>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a98:	f000 f8fc 	bl	8004c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a9c:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <xPortStartScheduler+0x140>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <xPortStartScheduler+0x140>)
 8004aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aa8:	f7ff ff66 	bl	8004978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aac:	f7ff fd48 	bl	8004540 <vTaskSwitchContext>
	prvTaskExitError();
 8004ab0:	f7ff ff1c 	bl	80048ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	e000ed00 	.word	0xe000ed00
 8004ac4:	410fc271 	.word	0x410fc271
 8004ac8:	410fc270 	.word	0x410fc270
 8004acc:	e000e400 	.word	0xe000e400
 8004ad0:	20000648 	.word	0x20000648
 8004ad4:	2000064c 	.word	0x2000064c
 8004ad8:	e000ed20 	.word	0xe000ed20
 8004adc:	2000000c 	.word	0x2000000c
 8004ae0:	e000ef34 	.word	0xe000ef34

08004ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	607b      	str	r3, [r7, #4]
}
 8004afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d10f      	bne.n	8004b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vPortEnterCritical+0x5c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	603b      	str	r3, [r7, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <vPortEnterCritical+0x4a>
	}
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	2000000c 	.word	0x2000000c
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <vPortExitCritical+0x50>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <vPortExitCritical+0x24>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	607b      	str	r3, [r7, #4]
}
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <vPortExitCritical+0x50>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <vPortExitCritical+0x50>)
 8004b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <vPortExitCritical+0x50>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <vPortExitCritical+0x42>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	2000000c 	.word	0x2000000c
	...

08004ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ba0:	f3ef 8009 	mrs	r0, PSP
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <pxCurrentTCBConst>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	f01e 0f10 	tst.w	lr, #16
 8004bb0:	bf08      	it	eq
 8004bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bba:	6010      	str	r0, [r2, #0]
 8004bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bc4:	f380 8811 	msr	BASEPRI, r0
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f7ff fcb6 	bl	8004540 <vTaskSwitchContext>
 8004bd4:	f04f 0000 	mov.w	r0, #0
 8004bd8:	f380 8811 	msr	BASEPRI, r0
 8004bdc:	bc09      	pop	{r0, r3}
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	6808      	ldr	r0, [r1, #0]
 8004be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be6:	f01e 0f10 	tst.w	lr, #16
 8004bea:	bf08      	it	eq
 8004bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bf0:	f380 8809 	msr	PSP, r0
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst>:
 8004c00:	2000051c 	.word	0x2000051c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	607b      	str	r3, [r7, #4]
}
 8004c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c22:	f7ff fbd5 	bl	80043d0 <xTaskIncrementTick>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <SysTick_Handler+0x40>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	2300      	movs	r3, #0
 8004c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f383 8811 	msr	BASEPRI, r3
}
 8004c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <vPortSetupTimerInterrupt+0x34>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c56:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <vPortSetupTimerInterrupt+0x38>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <vPortSetupTimerInterrupt+0x3c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <vPortSetupTimerInterrupt+0x40>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <vPortSetupTimerInterrupt+0x44>)
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c6e:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <vPortSetupTimerInterrupt+0x34>)
 8004c70:	2207      	movs	r2, #7
 8004c72:	601a      	str	r2, [r3, #0]
}
 8004c74:	bf00      	nop
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000e010 	.word	0xe000e010
 8004c84:	e000e018 	.word	0xe000e018
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	10624dd3 	.word	0x10624dd3
 8004c90:	e000e014 	.word	0xe000e014

08004c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ca4 <vPortEnableVFP+0x10>
 8004c98:	6801      	ldr	r1, [r0, #0]
 8004c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c9e:	6001      	str	r1, [r0, #0]
 8004ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ca2:	bf00      	nop
 8004ca4:	e000ed88 	.word	0xe000ed88

08004ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cb4:	f7ff fae2 	bl	800427c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cb8:	4b5b      	ldr	r3, [pc, #364]	; (8004e28 <pvPortMalloc+0x180>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cc0:	f000 f920 	bl	8004f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <pvPortMalloc+0x184>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 8093 	bne.w	8004df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01d      	beq.n	8004d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004cd8:	2208      	movs	r2, #8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d014      	beq.n	8004d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f023 0307 	bic.w	r3, r3, #7
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <pvPortMalloc+0x6c>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	617b      	str	r3, [r7, #20]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d06e      	beq.n	8004df8 <pvPortMalloc+0x150>
 8004d1a:	4b45      	ldr	r3, [pc, #276]	; (8004e30 <pvPortMalloc+0x188>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d869      	bhi.n	8004df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d24:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <pvPortMalloc+0x18c>)
 8004d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d28:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <pvPortMalloc+0x18c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d2e:	e004      	b.n	8004d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d903      	bls.n	8004d4c <pvPortMalloc+0xa4>
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f1      	bne.n	8004d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d4c:	4b36      	ldr	r3, [pc, #216]	; (8004e28 <pvPortMalloc+0x180>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d050      	beq.n	8004df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	4413      	add	r3, r2
 8004d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	1ad2      	subs	r2, r2, r3
 8004d70:	2308      	movs	r3, #8
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d91f      	bls.n	8004db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <pvPortMalloc+0xf8>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	613b      	str	r3, [r7, #16]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004db2:	69b8      	ldr	r0, [r7, #24]
 8004db4:	f000 f908 	bl	8004fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004db8:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <pvPortMalloc+0x188>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <pvPortMalloc+0x188>)
 8004dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <pvPortMalloc+0x188>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <pvPortMalloc+0x190>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d203      	bcs.n	8004dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dd2:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <pvPortMalloc+0x188>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <pvPortMalloc+0x190>)
 8004dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <pvPortMalloc+0x184>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <pvPortMalloc+0x194>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <pvPortMalloc+0x194>)
 8004df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004df8:	f7ff fa4e 	bl	8004298 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <pvPortMalloc+0x174>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	60fb      	str	r3, [r7, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <pvPortMalloc+0x172>
	return pvReturn;
 8004e1c:	69fb      	ldr	r3, [r7, #28]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3728      	adds	r7, #40	; 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20001210 	.word	0x20001210
 8004e2c:	20001224 	.word	0x20001224
 8004e30:	20001214 	.word	0x20001214
 8004e34:	20001208 	.word	0x20001208
 8004e38:	20001218 	.word	0x20001218
 8004e3c:	2000121c 	.word	0x2000121c

08004e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d04d      	beq.n	8004eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e52:	2308      	movs	r3, #8
 8004e54:	425b      	negs	r3, r3
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4413      	add	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <vPortFree+0xb8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <vPortFree+0x44>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60fb      	str	r3, [r7, #12]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <vPortFree+0x62>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60bb      	str	r3, [r7, #8]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <vPortFree+0xb8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01e      	beq.n	8004eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11a      	bne.n	8004eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <vPortFree+0xb8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ec8:	f7ff f9d8 	bl	800427c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <vPortFree+0xbc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	4a09      	ldr	r2, [pc, #36]	; (8004efc <vPortFree+0xbc>)
 8004ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eda:	6938      	ldr	r0, [r7, #16]
 8004edc:	f000 f874 	bl	8004fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <vPortFree+0xc0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	4a06      	ldr	r2, [pc, #24]	; (8004f00 <vPortFree+0xc0>)
 8004ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004eea:	f7ff f9d5 	bl	8004298 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004eee:	bf00      	nop
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20001224 	.word	0x20001224
 8004efc:	20001214 	.word	0x20001214
 8004f00:	20001220 	.word	0x20001220

08004f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <prvHeapInit+0xac>)
 8004f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3307      	adds	r3, #7
 8004f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0307 	bic.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <prvHeapInit+0xac>)
 8004f34:	4413      	add	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <prvHeapInit+0xb0>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <prvHeapInit+0xb0>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f50:	2208      	movs	r2, #8
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0307 	bic.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f84:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <prvHeapInit+0xb4>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <prvHeapInit+0xb8>)
 8004f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <prvHeapInit+0xbc>)
 8004f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <prvHeapInit+0xc0>)
 8004f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fa2:	601a      	str	r2, [r3, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	20000650 	.word	0x20000650
 8004fb4:	20001208 	.word	0x20001208
 8004fb8:	20001210 	.word	0x20001210
 8004fbc:	20001218 	.word	0x20001218
 8004fc0:	20001214 	.word	0x20001214
 8004fc4:	20001224 	.word	0x20001224

08004fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <prvInsertBlockIntoFreeList+0xac>)
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e002      	b.n	8004fdc <prvInsertBlockIntoFreeList+0x14>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d8f7      	bhi.n	8004fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d108      	bne.n	800500a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	441a      	add	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d118      	bne.n	8005050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <prvInsertBlockIntoFreeList+0xb0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d00d      	beq.n	8005046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e008      	b.n	8005058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvInsertBlockIntoFreeList+0xb0>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	e003      	b.n	8005058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d002      	beq.n	8005066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20001208 	.word	0x20001208
 8005078:	20001210 	.word	0x20001210

0800507c <__libc_init_array>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	4d0d      	ldr	r5, [pc, #52]	; (80050b4 <__libc_init_array+0x38>)
 8005080:	4c0d      	ldr	r4, [pc, #52]	; (80050b8 <__libc_init_array+0x3c>)
 8005082:	1b64      	subs	r4, r4, r5
 8005084:	10a4      	asrs	r4, r4, #2
 8005086:	2600      	movs	r6, #0
 8005088:	42a6      	cmp	r6, r4
 800508a:	d109      	bne.n	80050a0 <__libc_init_array+0x24>
 800508c:	4d0b      	ldr	r5, [pc, #44]	; (80050bc <__libc_init_array+0x40>)
 800508e:	4c0c      	ldr	r4, [pc, #48]	; (80050c0 <__libc_init_array+0x44>)
 8005090:	f000 f8e4 	bl	800525c <_init>
 8005094:	1b64      	subs	r4, r4, r5
 8005096:	10a4      	asrs	r4, r4, #2
 8005098:	2600      	movs	r6, #0
 800509a:	42a6      	cmp	r6, r4
 800509c:	d105      	bne.n	80050aa <__libc_init_array+0x2e>
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a4:	4798      	blx	r3
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7ee      	b.n	8005088 <__libc_init_array+0xc>
 80050aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ae:	4798      	blx	r3
 80050b0:	3601      	adds	r6, #1
 80050b2:	e7f2      	b.n	800509a <__libc_init_array+0x1e>
 80050b4:	0800534c 	.word	0x0800534c
 80050b8:	0800534c 	.word	0x0800534c
 80050bc:	0800534c 	.word	0x0800534c
 80050c0:	08005350 	.word	0x08005350

080050c4 <__retarget_lock_acquire_recursive>:
 80050c4:	4770      	bx	lr

080050c6 <__retarget_lock_release_recursive>:
 80050c6:	4770      	bx	lr

080050c8 <memset>:
 80050c8:	4402      	add	r2, r0
 80050ca:	4603      	mov	r3, r0
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d100      	bne.n	80050d2 <memset+0xa>
 80050d0:	4770      	bx	lr
 80050d2:	f803 1b01 	strb.w	r1, [r3], #1
 80050d6:	e7f9      	b.n	80050cc <memset+0x4>

080050d8 <cleanup_glue>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	460c      	mov	r4, r1
 80050dc:	6809      	ldr	r1, [r1, #0]
 80050de:	4605      	mov	r5, r0
 80050e0:	b109      	cbz	r1, 80050e6 <cleanup_glue+0xe>
 80050e2:	f7ff fff9 	bl	80050d8 <cleanup_glue>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4628      	mov	r0, r5
 80050ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050ee:	f000 b869 	b.w	80051c4 <_free_r>
	...

080050f4 <_reclaim_reent>:
 80050f4:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <_reclaim_reent+0xb4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4283      	cmp	r3, r0
 80050fa:	b570      	push	{r4, r5, r6, lr}
 80050fc:	4604      	mov	r4, r0
 80050fe:	d051      	beq.n	80051a4 <_reclaim_reent+0xb0>
 8005100:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005102:	b143      	cbz	r3, 8005116 <_reclaim_reent+0x22>
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d14a      	bne.n	80051a0 <_reclaim_reent+0xac>
 800510a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800510c:	6819      	ldr	r1, [r3, #0]
 800510e:	b111      	cbz	r1, 8005116 <_reclaim_reent+0x22>
 8005110:	4620      	mov	r0, r4
 8005112:	f000 f857 	bl	80051c4 <_free_r>
 8005116:	6961      	ldr	r1, [r4, #20]
 8005118:	b111      	cbz	r1, 8005120 <_reclaim_reent+0x2c>
 800511a:	4620      	mov	r0, r4
 800511c:	f000 f852 	bl	80051c4 <_free_r>
 8005120:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005122:	b111      	cbz	r1, 800512a <_reclaim_reent+0x36>
 8005124:	4620      	mov	r0, r4
 8005126:	f000 f84d 	bl	80051c4 <_free_r>
 800512a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800512c:	b111      	cbz	r1, 8005134 <_reclaim_reent+0x40>
 800512e:	4620      	mov	r0, r4
 8005130:	f000 f848 	bl	80051c4 <_free_r>
 8005134:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005136:	b111      	cbz	r1, 800513e <_reclaim_reent+0x4a>
 8005138:	4620      	mov	r0, r4
 800513a:	f000 f843 	bl	80051c4 <_free_r>
 800513e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005140:	b111      	cbz	r1, 8005148 <_reclaim_reent+0x54>
 8005142:	4620      	mov	r0, r4
 8005144:	f000 f83e 	bl	80051c4 <_free_r>
 8005148:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800514a:	b111      	cbz	r1, 8005152 <_reclaim_reent+0x5e>
 800514c:	4620      	mov	r0, r4
 800514e:	f000 f839 	bl	80051c4 <_free_r>
 8005152:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005154:	b111      	cbz	r1, 800515c <_reclaim_reent+0x68>
 8005156:	4620      	mov	r0, r4
 8005158:	f000 f834 	bl	80051c4 <_free_r>
 800515c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800515e:	b111      	cbz	r1, 8005166 <_reclaim_reent+0x72>
 8005160:	4620      	mov	r0, r4
 8005162:	f000 f82f 	bl	80051c4 <_free_r>
 8005166:	69a3      	ldr	r3, [r4, #24]
 8005168:	b1e3      	cbz	r3, 80051a4 <_reclaim_reent+0xb0>
 800516a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800516c:	4620      	mov	r0, r4
 800516e:	4798      	blx	r3
 8005170:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005172:	b1b9      	cbz	r1, 80051a4 <_reclaim_reent+0xb0>
 8005174:	4620      	mov	r0, r4
 8005176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800517a:	f7ff bfad 	b.w	80050d8 <cleanup_glue>
 800517e:	5949      	ldr	r1, [r1, r5]
 8005180:	b941      	cbnz	r1, 8005194 <_reclaim_reent+0xa0>
 8005182:	3504      	adds	r5, #4
 8005184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005186:	2d80      	cmp	r5, #128	; 0x80
 8005188:	68d9      	ldr	r1, [r3, #12]
 800518a:	d1f8      	bne.n	800517e <_reclaim_reent+0x8a>
 800518c:	4620      	mov	r0, r4
 800518e:	f000 f819 	bl	80051c4 <_free_r>
 8005192:	e7ba      	b.n	800510a <_reclaim_reent+0x16>
 8005194:	680e      	ldr	r6, [r1, #0]
 8005196:	4620      	mov	r0, r4
 8005198:	f000 f814 	bl	80051c4 <_free_r>
 800519c:	4631      	mov	r1, r6
 800519e:	e7ef      	b.n	8005180 <_reclaim_reent+0x8c>
 80051a0:	2500      	movs	r5, #0
 80051a2:	e7ef      	b.n	8005184 <_reclaim_reent+0x90>
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
 80051a6:	bf00      	nop
 80051a8:	20000010 	.word	0x20000010

080051ac <__malloc_lock>:
 80051ac:	4801      	ldr	r0, [pc, #4]	; (80051b4 <__malloc_lock+0x8>)
 80051ae:	f7ff bf89 	b.w	80050c4 <__retarget_lock_acquire_recursive>
 80051b2:	bf00      	nop
 80051b4:	20001228 	.word	0x20001228

080051b8 <__malloc_unlock>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__malloc_unlock+0x8>)
 80051ba:	f7ff bf84 	b.w	80050c6 <__retarget_lock_release_recursive>
 80051be:	bf00      	nop
 80051c0:	20001228 	.word	0x20001228

080051c4 <_free_r>:
 80051c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051c6:	2900      	cmp	r1, #0
 80051c8:	d044      	beq.n	8005254 <_free_r+0x90>
 80051ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ce:	9001      	str	r0, [sp, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f1a1 0404 	sub.w	r4, r1, #4
 80051d6:	bfb8      	it	lt
 80051d8:	18e4      	addlt	r4, r4, r3
 80051da:	f7ff ffe7 	bl	80051ac <__malloc_lock>
 80051de:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <_free_r+0x94>)
 80051e0:	9801      	ldr	r0, [sp, #4]
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	b933      	cbnz	r3, 80051f4 <_free_r+0x30>
 80051e6:	6063      	str	r3, [r4, #4]
 80051e8:	6014      	str	r4, [r2, #0]
 80051ea:	b003      	add	sp, #12
 80051ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051f0:	f7ff bfe2 	b.w	80051b8 <__malloc_unlock>
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	d908      	bls.n	800520a <_free_r+0x46>
 80051f8:	6825      	ldr	r5, [r4, #0]
 80051fa:	1961      	adds	r1, r4, r5
 80051fc:	428b      	cmp	r3, r1
 80051fe:	bf01      	itttt	eq
 8005200:	6819      	ldreq	r1, [r3, #0]
 8005202:	685b      	ldreq	r3, [r3, #4]
 8005204:	1949      	addeq	r1, r1, r5
 8005206:	6021      	streq	r1, [r4, #0]
 8005208:	e7ed      	b.n	80051e6 <_free_r+0x22>
 800520a:	461a      	mov	r2, r3
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	b10b      	cbz	r3, 8005214 <_free_r+0x50>
 8005210:	42a3      	cmp	r3, r4
 8005212:	d9fa      	bls.n	800520a <_free_r+0x46>
 8005214:	6811      	ldr	r1, [r2, #0]
 8005216:	1855      	adds	r5, r2, r1
 8005218:	42a5      	cmp	r5, r4
 800521a:	d10b      	bne.n	8005234 <_free_r+0x70>
 800521c:	6824      	ldr	r4, [r4, #0]
 800521e:	4421      	add	r1, r4
 8005220:	1854      	adds	r4, r2, r1
 8005222:	42a3      	cmp	r3, r4
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	d1e0      	bne.n	80051ea <_free_r+0x26>
 8005228:	681c      	ldr	r4, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	6053      	str	r3, [r2, #4]
 800522e:	4421      	add	r1, r4
 8005230:	6011      	str	r1, [r2, #0]
 8005232:	e7da      	b.n	80051ea <_free_r+0x26>
 8005234:	d902      	bls.n	800523c <_free_r+0x78>
 8005236:	230c      	movs	r3, #12
 8005238:	6003      	str	r3, [r0, #0]
 800523a:	e7d6      	b.n	80051ea <_free_r+0x26>
 800523c:	6825      	ldr	r5, [r4, #0]
 800523e:	1961      	adds	r1, r4, r5
 8005240:	428b      	cmp	r3, r1
 8005242:	bf04      	itt	eq
 8005244:	6819      	ldreq	r1, [r3, #0]
 8005246:	685b      	ldreq	r3, [r3, #4]
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	bf04      	itt	eq
 800524c:	1949      	addeq	r1, r1, r5
 800524e:	6021      	streq	r1, [r4, #0]
 8005250:	6054      	str	r4, [r2, #4]
 8005252:	e7ca      	b.n	80051ea <_free_r+0x26>
 8005254:	b003      	add	sp, #12
 8005256:	bd30      	pop	{r4, r5, pc}
 8005258:	2000122c 	.word	0x2000122c

0800525c <_init>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	bf00      	nop
 8005260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005262:	bc08      	pop	{r3}
 8005264:	469e      	mov	lr, r3
 8005266:	4770      	bx	lr

08005268 <_fini>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr
