
cdh-tsat6-stm32project-boardV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c8c  08004c8c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004c8c  08004c8c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c8c  08004c8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d0  20000074  08004d08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001244  08004d08  00021244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bf5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364b  00000000  00000000  00038c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  0003d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262e5  00000000  00000000  0003ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178b5  00000000  00000000  00064fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8a15  00000000  00000000  0007c89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001652af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  00165300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b9c 	.word	0x08004b9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004b9c 	.word	0x08004b9c

080001e0 <boot_CAN>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
void boot_CAN(CAN_HandleTypeDef *hcan1){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]

	HAL_CAN_Start(hcan1); // Turn on CANBus
 80001e8:	6878      	ldr	r0, [r7, #4]
 80001ea:	f000 fdee 	bl	8000dca <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan1, CAN_IT_RX_FIFO0_MSG_PENDING );
 80001ee:	2102      	movs	r1, #2
 80001f0:	6878      	ldr	r0, [r7, #4]
 80001f2:	f000 fe2e 	bl	8000e52 <HAL_CAN_ActivateNotification>

	// TX Message Parameters
	TxMessage.StdId = ID;
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <boot_CAN+0x38>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	601a      	str	r2, [r3, #0]
	TxMessage.IDE = CAN_ID_STD;
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <boot_CAN+0x38>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
	TxMessage.RTR = CAN_RTR_DATA;
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <boot_CAN+0x38>)
 8000204:	2200      	movs	r2, #0
 8000206:	60da      	str	r2, [r3, #12]
	TxMessage.DLC = MAX_CAN_DATA_LENGTH;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <boot_CAN+0x38>)
 800020a:	2208      	movs	r2, #8
 800020c:	611a      	str	r2, [r3, #16]
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000090 	.word	0x20000090

0800021c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	4a07      	ldr	r2, [pc, #28]	; (8000248 <vApplicationGetIdleTaskMemory+0x2c>)
 800022c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	4a06      	ldr	r2, [pc, #24]	; (800024c <vApplicationGetIdleTaskMemory+0x30>)
 8000232:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2280      	movs	r2, #128	; 0x80
 8000238:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	200000a8 	.word	0x200000a8
 800024c:	2000015c 	.word	0x2000015c

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fc84 	bl	8000b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f83f 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f9b7 	bl	80005d0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000262:	f000 f899 	bl	8000398 <MX_CAN1_Init>
  MX_SPI1_Init();
 8000266:	f000 f8f9 	bl	800045c <MX_SPI1_Init>
  MX_SPI2_Init();
 800026a:	f000 f935 	bl	80004d8 <MX_SPI2_Init>
  MX_SPI3_Init();
 800026e:	f000 f971 	bl	8000554 <MX_SPI3_Init>
  MX_RTC_Init();
 8000272:	f000 f8cb 	bl	800040c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  	  	TxData[0] = 0x4;
 8000276:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <main+0x80>)
 8000278:	2204      	movs	r2, #4
 800027a:	701a      	strb	r2, [r3, #0]
  	    TxData[1] = 0x2;
 800027c:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <main+0x80>)
 800027e:	2202      	movs	r2, #2
 8000280:	705a      	strb	r2, [r3, #1]
  	    TxData[2] = 0x0;
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <main+0x80>)
 8000284:	2200      	movs	r2, #0
 8000286:	709a      	strb	r2, [r3, #2]
  	    TxData[3] = 0x0;
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <main+0x80>)
 800028a:	2200      	movs	r2, #0
 800028c:	70da      	strb	r2, [r3, #3]
  	    TxData[4] = 0x0;
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <main+0x80>)
 8000290:	2200      	movs	r2, #0
 8000292:	711a      	strb	r2, [r3, #4]
  	    TxData[5] = 0x0;
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <main+0x80>)
 8000296:	2200      	movs	r2, #0
 8000298:	715a      	strb	r2, [r3, #5]
  	    TxData[6] = 0x2;
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <main+0x80>)
 800029c:	2202      	movs	r2, #2
 800029e:	719a      	strb	r2, [r3, #6]
  	    TxData[7] = 0x4;
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <main+0x80>)
 80002a2:	2204      	movs	r2, #4
 80002a4:	71da      	strb	r2, [r3, #7]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <main+0x84>)
 80002a8:	1d3c      	adds	r4, r7, #4
 80002aa:	461d      	mov	r5, r3
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f003 f926 	bl	800350e <osThreadCreate>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <main+0x88>)
 80002c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002c8:	f003 f91a 	bl	8003500 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <main+0x7c>
 80002ce:	bf00      	nop
 80002d0:	200004d8 	.word	0x200004d8
 80002d4:	08004bc0 	.word	0x08004bc0
 80002d8:	200004d4 	.word	0x200004d4

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b096      	sub	sp, #88	; 0x58
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	2244      	movs	r2, #68	; 0x44
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f004 fb8c 	bl	8004a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f0:	463b      	mov	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000302:	f001 fa97 	bl	8001834 <HAL_PWREx_ControlVoltageScaling>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800030c:	f000 fa00 	bl	8000710 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000310:	f001 fa72 	bl	80017f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <SystemClock_Config+0xb8>)
 8000316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800031a:	4a1e      	ldr	r2, [pc, #120]	; (8000394 <SystemClock_Config+0xb8>)
 800031c:	f023 0318 	bic.w	r3, r3, #24
 8000320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000324:	2305      	movs	r3, #5
 8000326:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000336:	2303      	movs	r3, #3
 8000338:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800033a:	2301      	movs	r3, #1
 800033c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800033e:	2314      	movs	r3, #20
 8000340:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000342:	2307      	movs	r3, #7
 8000344:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000346:	2302      	movs	r3, #2
 8000348:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800034a:	2302      	movs	r3, #2
 800034c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0314 	add.w	r3, r7, #20
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fac4 	bl	80018e0 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800035e:	f000 f9d7 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2303      	movs	r3, #3
 8000368:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000376:	463b      	mov	r3, r7
 8000378:	2104      	movs	r1, #4
 800037a:	4618      	mov	r0, r3
 800037c:	f001 fec4 	bl	8002108 <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000386:	f000 f9c3 	bl	8000710 <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3758      	adds	r7, #88	; 0x58
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <MX_CAN1_Init+0x6c>)
 800039e:	4a1a      	ldr	r2, [pc, #104]	; (8000408 <MX_CAN1_Init+0x70>)
 80003a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003a4:	2210      	movs	r2, #16
 80003a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003be:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80003c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003e8:	4806      	ldr	r0, [pc, #24]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003ea:	f000 fbf3 	bl	8000bd4 <HAL_CAN_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80003f4:	f000 f98c 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  boot_CAN(&hcan1);
 80003f8:	4802      	ldr	r0, [pc, #8]	; (8000404 <MX_CAN1_Init+0x6c>)
 80003fa:	f7ff fef1 	bl	80001e0 <boot_CAN>
  /* USER CODE END CAN1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	2000035c 	.word	0x2000035c
 8000408:	40006400 	.word	0x40006400

0800040c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000410:	4b10      	ldr	r3, [pc, #64]	; (8000454 <MX_RTC_Init+0x48>)
 8000412:	4a11      	ldr	r2, [pc, #68]	; (8000458 <MX_RTC_Init+0x4c>)
 8000414:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_RTC_Init+0x48>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800041c:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <MX_RTC_Init+0x48>)
 800041e:	227f      	movs	r2, #127	; 0x7f
 8000420:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_RTC_Init+0x48>)
 8000424:	22ff      	movs	r2, #255	; 0xff
 8000426:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000428:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <MX_RTC_Init+0x48>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_RTC_Init+0x48>)
 8000430:	2200      	movs	r2, #0
 8000432:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <MX_RTC_Init+0x48>)
 8000436:	2200      	movs	r2, #0
 8000438:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_RTC_Init+0x48>)
 800043c:	2200      	movs	r2, #0
 800043e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_RTC_Init+0x48>)
 8000442:	f002 fbff 	bl	8002c44 <HAL_RTC_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800044c:	f000 f960 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000384 	.word	0x20000384
 8000458:	40002800 	.word	0x40002800

0800045c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_SPI1_Init+0x74>)
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <MX_SPI1_Init+0x78>)
 8000464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_SPI1_Init+0x74>)
 8000468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800046c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_SPI1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_SPI1_Init+0x74>)
 8000476:	f44f 7240 	mov.w	r2, #768	; 0x300
 800047a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800047c:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_SPI1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_SPI1_Init+0x74>)
 800048a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800048e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_SPI1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_SPI1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_SPI1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_SPI1_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_SPI1_Init+0x74>)
 80004aa:	2207      	movs	r2, #7
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_SPI1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_SPI1_Init+0x74>)
 80004b6:	2208      	movs	r2, #8
 80004b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_SPI1_Init+0x74>)
 80004bc:	f002 fcd4 	bl	8002e68 <HAL_SPI_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f923 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200003a8 	.word	0x200003a8
 80004d4:	40013000 	.word	0x40013000

080004d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <MX_SPI2_Init+0x74>)
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <MX_SPI2_Init+0x78>)
 80004e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <MX_SPI2_Init+0x74>)
 80004e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <MX_SPI2_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <MX_SPI2_Init+0x74>)
 80004f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <MX_SPI2_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_SPI2_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_SPI2_Init+0x74>)
 8000506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800050a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_SPI2_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_SPI2_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_SPI2_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_SPI2_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_SPI2_Init+0x74>)
 8000526:	2207      	movs	r2, #7
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_SPI2_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_SPI2_Init+0x74>)
 8000532:	2208      	movs	r2, #8
 8000534:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <MX_SPI2_Init+0x74>)
 8000538:	f002 fc96 	bl	8002e68 <HAL_SPI_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000542:	f000 f8e5 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	2000040c 	.word	0x2000040c
 8000550:	40003800 	.word	0x40003800

08000554 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_SPI3_Init+0x74>)
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <MX_SPI3_Init+0x78>)
 800055c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_SPI3_Init+0x74>)
 8000560:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000564:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_SPI3_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_SPI3_Init+0x74>)
 800056e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000572:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_SPI3_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_SPI3_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_SPI3_Init+0x74>)
 8000582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000586:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_SPI3_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_SPI3_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_SPI3_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_SPI3_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_SPI3_Init+0x74>)
 80005a2:	2207      	movs	r2, #7
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_SPI3_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_SPI3_Init+0x74>)
 80005ae:	2208      	movs	r2, #8
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_SPI3_Init+0x74>)
 80005b4:	f002 fc58 	bl	8002e68 <HAL_SPI_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80005be:	f000 f8a7 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000470 	.word	0x20000470
 80005cc:	40003c00 	.word	0x40003c00

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <MX_GPIO_Init+0x100>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a39      	ldr	r2, [pc, #228]	; (80006d0 <MX_GPIO_Init+0x100>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <MX_GPIO_Init+0x100>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <MX_GPIO_Init+0x100>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a33      	ldr	r2, [pc, #204]	; (80006d0 <MX_GPIO_Init+0x100>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <MX_GPIO_Init+0x100>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b2e      	ldr	r3, [pc, #184]	; (80006d0 <MX_GPIO_Init+0x100>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a2d      	ldr	r2, [pc, #180]	; (80006d0 <MX_GPIO_Init+0x100>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <MX_GPIO_Init+0x100>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <MX_GPIO_Init+0x100>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <MX_GPIO_Init+0x100>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <MX_GPIO_Init+0x100>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLASH__HOLD_Pin|FLASH__WP_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <MX_GPIO_Init+0x104>)
 800064e:	f001 f8bb 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH__CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000658:	481f      	ldr	r0, [pc, #124]	; (80006d8 <MX_GPIO_Init+0x108>)
 800065a:	f001 f8b5 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|MRAM__CS_Pin|MRAM__WP_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f001 f8ae 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH__HOLD_Pin FLASH__WP_Pin */
  GPIO_InitStruct.Pin = FLASH__HOLD_Pin|FLASH__WP_Pin;
 800066c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	4813      	ldr	r0, [pc, #76]	; (80006d4 <MX_GPIO_Init+0x104>)
 8000686:	f000 ff25 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH__CS_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = FLASH__CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800068a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_GPIO_Init+0x108>)
 80006a4:	f000 ff16 	bl	80014d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WDI_Pin MRAM__CS_Pin MRAM__WP_Pin */
  GPIO_InitStruct.Pin = WDI_Pin|MRAM__CS_Pin|MRAM__WP_Pin;
 80006a8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 ff06 	bl	80014d4 <HAL_GPIO_Init>

}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	48000400 	.word	0x48000400
 80006d8:	48000800 	.word	0x48000800

080006dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f002 ff5e 	bl	80035a6 <osDelay>
 80006ea:	e7fb      	b.n	80006e4 <StartDefaultTask+0x8>

080006ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d101      	bne.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006fe:	f000 fa49 	bl	8000b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40001000 	.word	0x40001000

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_MspInit+0x4c>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <HAL_MspInit+0x4c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_MspInit+0x4c>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_MspInit+0x4c>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_MspInit+0x4c>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6593      	str	r3, [r2, #88]	; 0x58
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_MspInit+0x4c>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	210f      	movs	r1, #15
 8000756:	f06f 0001 	mvn.w	r0, #1
 800075a:	f000 fe91 	bl	8001480 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <HAL_CAN_MspInit+0x8c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d130      	bne.n	80007f0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800078e:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <HAL_CAN_MspInit+0x90>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000792:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <HAL_CAN_MspInit+0x90>)
 8000794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000798:	6593      	str	r3, [r2, #88]	; 0x58
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_CAN_MspInit+0x90>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_CAN_MspInit+0x90>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a14      	ldr	r2, [pc, #80]	; (80007fc <HAL_CAN_MspInit+0x90>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_CAN_MspInit+0x90>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 80007d0:	230a      	movs	r3, #10
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <HAL_CAN_MspInit+0x94>)
 80007dc:	f000 fe7a 	bl	80014d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2105      	movs	r1, #5
 80007e4:	2014      	movs	r0, #20
 80007e6:	f000 fe4b 	bl	8001480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007ea:	2014      	movs	r0, #20
 80007ec:	f000 fe64 	bl	80014b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40006400 	.word	0x40006400
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000400 	.word	0x48000400

08000804 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b09c      	sub	sp, #112	; 0x70
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2268      	movs	r2, #104	; 0x68
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f004 f8f7 	bl	8004a08 <memset>
  if(hrtc->Instance==RTC)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <HAL_RTC_MspInit+0x58>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d117      	bne.n	8000854 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800082a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fea7 	bl	8002588 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000840:	f7ff ff66 	bl	8000710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_RTC_MspInit+0x5c>)
 8000846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <HAL_RTC_MspInit+0x5c>)
 800084c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3770      	adds	r7, #112	; 0x70
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40002800 	.word	0x40002800
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08e      	sub	sp, #56	; 0x38
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a54      	ldr	r2, [pc, #336]	; (80009d4 <HAL_SPI_MspInit+0x170>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d129      	bne.n	80008da <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000886:	4b54      	ldr	r3, [pc, #336]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	4a53      	ldr	r2, [pc, #332]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 800088c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000890:	6613      	str	r3, [r2, #96]	; 0x60
 8000892:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800089a:	623b      	str	r3, [r7, #32]
 800089c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a4d      	ldr	r2, [pc, #308]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80008b6:	23c2      	movs	r3, #194	; 0xc2
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c6:	2305      	movs	r3, #5
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f000 fdfe 	bl	80014d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80008d8:	e078      	b.n	80009cc <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI2)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a3f      	ldr	r2, [pc, #252]	; (80009dc <HAL_SPI_MspInit+0x178>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d145      	bne.n	8000970 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008e4:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 80008e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e8:	4a3b      	ldr	r2, [pc, #236]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 80008ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ee:	6593      	str	r3, [r2, #88]	; 0x58
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fc:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	4a35      	ldr	r2, [pc, #212]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000908:	4b33      	ldr	r3, [pc, #204]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000918:	4a2f      	ldr	r2, [pc, #188]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	f003 0302 	and.w	r3, r3, #2
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800092c:	230c      	movs	r3, #12
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093c:	2305      	movs	r3, #5
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	4826      	ldr	r0, [pc, #152]	; (80009e0 <HAL_SPI_MspInit+0x17c>)
 8000948:	f000 fdc4 	bl	80014d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800094c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800095e:	2305      	movs	r3, #5
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	481e      	ldr	r0, [pc, #120]	; (80009e4 <HAL_SPI_MspInit+0x180>)
 800096a:	f000 fdb3 	bl	80014d4 <HAL_GPIO_Init>
}
 800096e:	e02d      	b.n	80009cc <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a1c      	ldr	r2, [pc, #112]	; (80009e8 <HAL_SPI_MspInit+0x184>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d128      	bne.n	80009cc <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 8000980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_SPI_MspInit+0x174>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009bc:	2306      	movs	r3, #6
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <HAL_SPI_MspInit+0x17c>)
 80009c8:	f000 fd84 	bl	80014d4 <HAL_GPIO_Init>
}
 80009cc:	bf00      	nop
 80009ce:	3738      	adds	r7, #56	; 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40013000 	.word	0x40013000
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40003800 	.word	0x40003800
 80009e0:	48000800 	.word	0x48000800
 80009e4:	48000400 	.word	0x48000400
 80009e8:	40003c00 	.word	0x40003c00

080009ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2036      	movs	r0, #54	; 0x36
 8000a02:	f000 fd3d 	bl	8001480 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a06:	2036      	movs	r0, #54	; 0x36
 8000a08:	f000 fd56 	bl	80014b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <HAL_InitTick+0x9c>)
 8000a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_InitTick+0x9c>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6593      	str	r3, [r2, #88]	; 0x58
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_InitTick+0x9c>)
 8000a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fd18 	bl	8002464 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a34:	f001 fd00 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8000a38:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <HAL_InitTick+0xa0>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	0c9b      	lsrs	r3, r3, #18
 8000a44:	3b01      	subs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a6a:	f002 faa0 	bl	8002fae <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d104      	bne.n	8000a7e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a76:	f002 fafb 	bl	8003070 <HAL_TIM_Base_Start_IT>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3730      	adds	r7, #48	; 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	200004e0 	.word	0x200004e0
 8000a94:	40001000 	.word	0x40001000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <CAN1_RX0_IRQHandler+0x10>)
 8000aca:	f000 f9e8 	bl	8000e9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000035c 	.word	0x2000035c

08000ad8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM6_DAC_IRQHandler+0x10>)
 8000ade:	f002 fb23 	bl	8003128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200004e0 	.word	0x200004e0

08000aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <Reset_Handler>:
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b48 <LoopForever+0x2>
 8000b14:	f7ff ffea 	bl	8000aec <SystemInit>
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <LoopForever+0x6>)
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <LoopForever+0xa>)
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <LoopForever+0xe>)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:
 8000b22:	58d4      	ldr	r4, [r2, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:
 8000b28:	18c4      	adds	r4, r0, r3
 8000b2a:	428c      	cmp	r4, r1
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopForever+0x12>)
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LoopForever+0x16>)
 8000b32:	2300      	movs	r3, #0
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:
 8000b3a:	42a2      	cmp	r2, r4
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>
 8000b3e:	f003 ff3d 	bl	80049bc <__libc_init_array>
 8000b42:	f7ff fb85 	bl	8000250 <main>

08000b46 <LoopForever>:
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
 8000b48:	20028000 	.word	0x20028000
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000074 	.word	0x20000074
 8000b54:	08004c94 	.word	0x08004c94
 8000b58:	20000074 	.word	0x20000074
 8000b5c:	20001244 	.word	0x20001244

08000b60 <ADC1_IRQHandler>:
 8000b60:	e7fe      	b.n	8000b60 <ADC1_IRQHandler>

08000b62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 fc7c 	bl	800146a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	200f      	movs	r0, #15
 8000b74:	f7ff ff3a 	bl	80009ec <HAL_InitTick>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	e001      	b.n	8000b88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b84:	f7ff fdca 	bl	800071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	2000052c 	.word	0x2000052c

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000052c 	.word	0x2000052c

08000bd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e0ed      	b.n	8000dc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fdba 	bl	800076c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0201 	orr.w	r2, r2, #1
 8000c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c08:	f7ff ffd8 	bl	8000bbc <HAL_GetTick>
 8000c0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c0e:	e012      	b.n	8000c36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c10:	f7ff ffd4 	bl	8000bbc <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b0a      	cmp	r3, #10
 8000c1c:	d90b      	bls.n	8000c36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2205      	movs	r2, #5
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e0c5      	b.n	8000dc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0e5      	beq.n	8000c10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 0202 	bic.w	r2, r2, #2
 8000c52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c54:	f7ff ffb2 	bl	8000bbc <HAL_GetTick>
 8000c58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c5a:	e012      	b.n	8000c82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c5c:	f7ff ffae 	bl	8000bbc <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b0a      	cmp	r3, #10
 8000c68:	d90b      	bls.n	8000c82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2205      	movs	r2, #5
 8000c7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e09f      	b.n	8000dc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1e5      	bne.n	8000c5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	7e1b      	ldrb	r3, [r3, #24]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d108      	bne.n	8000caa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	e007      	b.n	8000cba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7e5b      	ldrb	r3, [r3, #25]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d108      	bne.n	8000cd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e007      	b.n	8000ce4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7e9b      	ldrb	r3, [r3, #26]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d108      	bne.n	8000cfe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0220 	orr.w	r2, r2, #32
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e007      	b.n	8000d0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0220 	bic.w	r2, r2, #32
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7edb      	ldrb	r3, [r3, #27]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d108      	bne.n	8000d28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 0210 	bic.w	r2, r2, #16
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e007      	b.n	8000d38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0210 	orr.w	r2, r2, #16
 8000d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7f1b      	ldrb	r3, [r3, #28]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d108      	bne.n	8000d52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0208 	orr.w	r2, r2, #8
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e007      	b.n	8000d62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0208 	bic.w	r2, r2, #8
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7f5b      	ldrb	r3, [r3, #29]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d108      	bne.n	8000d7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 0204 	orr.w	r2, r2, #4
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e007      	b.n	8000d8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0204 	bic.w	r2, r2, #4
 8000d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	ea42 0103 	orr.w	r1, r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d12e      	bne.n	8000e3c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2202      	movs	r2, #2
 8000de2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0201 	bic.w	r2, r2, #1
 8000df4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000df6:	f7ff fee1 	bl	8000bbc <HAL_GetTick>
 8000dfa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dfc:	e012      	b.n	8000e24 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dfe:	f7ff fedd 	bl	8000bbc <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b0a      	cmp	r3, #10
 8000e0a:	d90b      	bls.n	8000e24 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e012      	b.n	8000e4a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1e5      	bne.n	8000dfe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e006      	b.n	8000e4a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
  }
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b085      	sub	sp, #20
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e62:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d002      	beq.n	8000e70 <HAL_CAN_ActivateNotification+0x1e>
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d109      	bne.n	8000e84 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6959      	ldr	r1, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e006      	b.n	8000e92 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
  }
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b08a      	sub	sp, #40	; 0x28
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d07c      	beq.n	8000fde <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d023      	beq.n	8000f36 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f983 	bl	800120c <HAL_CAN_TxMailbox0CompleteCallback>
 8000f06:	e016      	b.n	8000f36 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1a:	e00c      	b.n	8000f36 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2e:	e002      	b.n	8000f36 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f989 	bl	8001248 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d024      	beq.n	8000f8a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f963 	bl	8001220 <HAL_CAN_TxMailbox1CompleteCallback>
 8000f5a:	e016      	b.n	8000f8a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6e:	e00c      	b.n	8000f8a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d004      	beq.n	8000f84 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
 8000f82:	e002      	b.n	8000f8a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f969 	bl	800125c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d024      	beq.n	8000fde <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f943 	bl	8001234 <HAL_CAN_TxMailbox2CompleteCallback>
 8000fae:	e016      	b.n	8000fde <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	e00c      	b.n	8000fde <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d004      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd6:	e002      	b.n	8000fde <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f949 	bl	8001270 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00c      	beq.n	8001002 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d007      	beq.n	8001002 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2210      	movs	r2, #16
 8001000:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00b      	beq.n	8001024 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2208      	movs	r2, #8
 800101c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f93a 	bl	8001298 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d009      	beq.n	8001042 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f921 	bl	8001284 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00c      	beq.n	8001066 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2210      	movs	r2, #16
 8001064:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00b      	beq.n	8001088 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2208      	movs	r2, #8
 8001080:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f91c 	bl	80012c0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d009      	beq.n	80010a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f903 	bl	80012ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00b      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2210      	movs	r2, #16
 80010c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f906 	bl	80012d4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2208      	movs	r2, #8
 80010e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f8ff 	bl	80012e8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d07b      	beq.n	80011ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d072      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001158:	2b00      	cmp	r3, #0
 800115a:	d043      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001162:	2b00      	cmp	r3, #0
 8001164:	d03e      	beq.n	80011e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800116c:	2b60      	cmp	r3, #96	; 0x60
 800116e:	d02b      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x32a>
 8001170:	2b60      	cmp	r3, #96	; 0x60
 8001172:	d82e      	bhi.n	80011d2 <HAL_CAN_IRQHandler+0x334>
 8001174:	2b50      	cmp	r3, #80	; 0x50
 8001176:	d022      	beq.n	80011be <HAL_CAN_IRQHandler+0x320>
 8001178:	2b50      	cmp	r3, #80	; 0x50
 800117a:	d82a      	bhi.n	80011d2 <HAL_CAN_IRQHandler+0x334>
 800117c:	2b40      	cmp	r3, #64	; 0x40
 800117e:	d019      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x316>
 8001180:	2b40      	cmp	r3, #64	; 0x40
 8001182:	d826      	bhi.n	80011d2 <HAL_CAN_IRQHandler+0x334>
 8001184:	2b30      	cmp	r3, #48	; 0x30
 8001186:	d010      	beq.n	80011aa <HAL_CAN_IRQHandler+0x30c>
 8001188:	2b30      	cmp	r3, #48	; 0x30
 800118a:	d822      	bhi.n	80011d2 <HAL_CAN_IRQHandler+0x334>
 800118c:	2b10      	cmp	r3, #16
 800118e:	d002      	beq.n	8001196 <HAL_CAN_IRQHandler+0x2f8>
 8001190:	2b20      	cmp	r3, #32
 8001192:	d005      	beq.n	80011a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001194:	e01d      	b.n	80011d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800119e:	e019      	b.n	80011d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011a8:	e014      	b.n	80011d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011b2:	e00f      	b.n	80011d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011bc:	e00a      	b.n	80011d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011c6:	e005      	b.n	80011d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011d0:	e000      	b.n	80011d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80011d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2204      	movs	r2, #4
 80011ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f87c 	bl	80012fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4907      	ldr	r1, [pc, #28]	; (80013ac <__NVIC_EnableIRQ+0x38>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	; (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff4c 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001492:	f7ff ff61 	bl	8001358 <__NVIC_GetPriorityGrouping>
 8001496:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f7ff ffb1 	bl	8001404 <NVIC_EncodePriority>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff80 	bl	80013b0 <__NVIC_SetPriority>
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff54 	bl	8001374 <__NVIC_EnableIRQ>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e154      	b.n	800178e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8146 	beq.w	8001788 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <HAL_GPIO_Init+0x40>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d130      	bne.n	8001576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800154a:	2201      	movs	r2, #1
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 0201 	and.w	r2, r3, #1
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b03      	cmp	r3, #3
 8001580:	d017      	beq.n	80015b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d123      	bne.n	8001606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0203 	and.w	r2, r3, #3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80a0 	beq.w	8001788 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001648:	4b58      	ldr	r3, [pc, #352]	; (80017ac <HAL_GPIO_Init+0x2d8>)
 800164a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164c:	4a57      	ldr	r2, [pc, #348]	; (80017ac <HAL_GPIO_Init+0x2d8>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6613      	str	r3, [r2, #96]	; 0x60
 8001654:	4b55      	ldr	r3, [pc, #340]	; (80017ac <HAL_GPIO_Init+0x2d8>)
 8001656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001660:	4a53      	ldr	r2, [pc, #332]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800168a:	d019      	beq.n	80016c0 <HAL_GPIO_Init+0x1ec>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a49      	ldr	r2, [pc, #292]	; (80017b4 <HAL_GPIO_Init+0x2e0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x1e8>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a48      	ldr	r2, [pc, #288]	; (80017b8 <HAL_GPIO_Init+0x2e4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1e4>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a47      	ldr	r2, [pc, #284]	; (80017bc <HAL_GPIO_Init+0x2e8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1e0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a46      	ldr	r2, [pc, #280]	; (80017c0 <HAL_GPIO_Init+0x2ec>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1dc>
 80016ac:	2304      	movs	r3, #4
 80016ae:	e008      	b.n	80016c2 <HAL_GPIO_Init+0x1ee>
 80016b0:	2307      	movs	r3, #7
 80016b2:	e006      	b.n	80016c2 <HAL_GPIO_Init+0x1ee>
 80016b4:	2303      	movs	r3, #3
 80016b6:	e004      	b.n	80016c2 <HAL_GPIO_Init+0x1ee>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e002      	b.n	80016c2 <HAL_GPIO_Init+0x1ee>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_GPIO_Init+0x1ee>
 80016c0:	2300      	movs	r3, #0
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	f002 0203 	and.w	r2, r2, #3
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	4093      	lsls	r3, r2
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016d2:	4937      	ldr	r1, [pc, #220]	; (80017b0 <HAL_GPIO_Init+0x2dc>)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e0:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001704:	4a2f      	ldr	r2, [pc, #188]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800170a:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800172e:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001758:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <HAL_GPIO_Init+0x2f0>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f aea3 	bne.w	80014e4 <HAL_GPIO_Init+0x10>
  }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000
 80017b4:	48000400 	.word	0x48000400
 80017b8:	48000800 	.word	0x48000800
 80017bc:	48000c00 	.word	0x48000c00
 80017c0:	48001000 	.word	0x48001000
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e4:	e002      	b.n	80017ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40007000 	.word	0x40007000

08001818 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <HAL_PWREx_GetVoltageRange+0x18>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40007000 	.word	0x40007000

08001834 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001842:	d130      	bne.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800184c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001850:	d038      	beq.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001860:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2232      	movs	r2, #50	; 0x32
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	0c9b      	lsrs	r3, r3, #18
 8001874:	3301      	adds	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001878:	e002      	b.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3b01      	subs	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188c:	d102      	bne.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x60>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f2      	bne.n	800187a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800189c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a0:	d110      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e00f      	b.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b2:	d007      	beq.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018bc:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40007000 	.word	0x40007000
 80018d8:	20000000 	.word	0x20000000
 80018dc:	431bde83 	.word	0x431bde83

080018e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f000 bc02 	b.w	80020f8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f4:	4b96      	ldr	r3, [pc, #600]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fe:	4b94      	ldr	r3, [pc, #592]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80e4 	beq.w	8001ade <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_RCC_OscConfig+0x4c>
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2b0c      	cmp	r3, #12
 8001920:	f040 808b 	bne.w	8001a3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b01      	cmp	r3, #1
 8001928:	f040 8087 	bne.w	8001a3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800192c:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_OscConfig+0x64>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e3d9      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1a      	ldr	r2, [r3, #32]
 8001948:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_RCC_OscConfig+0x7e>
 8001954:	4b7e      	ldr	r3, [pc, #504]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800195c:	e005      	b.n	800196a <HAL_RCC_OscConfig+0x8a>
 800195e:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196a:	4293      	cmp	r3, r2
 800196c:	d223      	bcs.n	80019b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fda8 	bl	80024c8 <RCC_SetFlashLatencyFromMSIRange>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e3ba      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001982:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a72      	ldr	r2, [pc, #456]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	496d      	ldr	r1, [pc, #436]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a0:	4b6b      	ldr	r3, [pc, #428]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	4968      	ldr	r1, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e025      	b.n	8001a02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b6:	4b66      	ldr	r3, [pc, #408]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a65      	ldr	r2, [pc, #404]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b63      	ldr	r3, [pc, #396]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4960      	ldr	r1, [pc, #384]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d4:	4b5e      	ldr	r3, [pc, #376]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	495b      	ldr	r1, [pc, #364]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fd68 	bl	80024c8 <RCC_SetFlashLatencyFromMSIRange>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e37a      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a02:	f000 fc81 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	4950      	ldr	r1, [pc, #320]	; (8001b54 <HAL_RCC_OscConfig+0x274>)
 8001a14:	5ccb      	ldrb	r3, [r1, r3]
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	4a4e      	ldr	r2, [pc, #312]	; (8001b58 <HAL_RCC_OscConfig+0x278>)
 8001a20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a22:	4b4e      	ldr	r3, [pc, #312]	; (8001b5c <HAL_RCC_OscConfig+0x27c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe ffe0 	bl	80009ec <HAL_InitTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d052      	beq.n	8001adc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	e35e      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d032      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a42:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a42      	ldr	r2, [pc, #264]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f8b5 	bl	8000bbc <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a56:	f7ff f8b1 	bl	8000bbc <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e347      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a68:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a74:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4930      	ldr	r1, [pc, #192]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	492b      	ldr	r1, [pc, #172]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
 8001aa6:	e01a      	b.n	8001ade <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f882 	bl	8000bbc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001abc:	f7ff f87e 	bl	8000bbc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e314      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ace:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1dc>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d073      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_OscConfig+0x21c>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d10e      	bne.n	8001b14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d10b      	bne.n	8001b14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d063      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d15f      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e2f1      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d106      	bne.n	8001b2c <HAL_RCC_OscConfig+0x24c>
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e025      	b.n	8001b78 <HAL_RCC_OscConfig+0x298>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b34:	d114      	bne.n	8001b60 <HAL_RCC_OscConfig+0x280>
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a02      	ldr	r2, [pc, #8]	; (8001b50 <HAL_RCC_OscConfig+0x270>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e013      	b.n	8001b78 <HAL_RCC_OscConfig+0x298>
 8001b50:	40021000 	.word	0x40021000
 8001b54:	08004be4 	.word	0x08004be4
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000004 	.word	0x20000004
 8001b60:	4ba0      	ldr	r3, [pc, #640]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a9f      	ldr	r2, [pc, #636]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b9d      	ldr	r3, [pc, #628]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a9c      	ldr	r2, [pc, #624]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff f81c 	bl	8000bbc <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff f818 	bl	8000bbc <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e2ae      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9a:	4b92      	ldr	r3, [pc, #584]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x2a8>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f808 	bl	8000bbc <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f804 	bl	8000bbc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e29a      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc2:	4b88      	ldr	r3, [pc, #544]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2d0>
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d060      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x310>
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d119      	bne.n	8001c1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d116      	bne.n	8001c1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf0:	4b7c      	ldr	r3, [pc, #496]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_OscConfig+0x328>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e277      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b76      	ldr	r3, [pc, #472]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	4973      	ldr	r1, [pc, #460]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1c:	e040      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d023      	beq.n	8001c6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c26:	4b6f      	ldr	r3, [pc, #444]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6e      	ldr	r2, [pc, #440]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c32:	f7fe ffc3 	bl	8000bbc <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7fe ffbf 	bl	8000bbc <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e255      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4c:	4b65      	ldr	r3, [pc, #404]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b62      	ldr	r3, [pc, #392]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	495f      	ldr	r1, [pc, #380]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
 8001c6c:	e018      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a5c      	ldr	r2, [pc, #368]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7fe ff9f 	bl	8000bbc <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c82:	f7fe ff9b 	bl	8000bbc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e231      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c94:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d03c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01c      	beq.n	8001cee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	4a4a      	ldr	r2, [pc, #296]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7fe ff7a 	bl	8000bbc <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7fe ff76 	bl	8000bbc <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e20c      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cde:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ef      	beq.n	8001ccc <HAL_RCC_OscConfig+0x3ec>
 8001cec:	e01b      	b.n	8001d26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf4:	4a3b      	ldr	r2, [pc, #236]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfe:	f7fe ff5d 	bl	8000bbc <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d06:	f7fe ff59 	bl	8000bbc <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1ef      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ef      	bne.n	8001d06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80a6 	beq.w	8001e80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10d      	bne.n	8001d60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_RCC_OscConfig+0x508>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d118      	bne.n	8001d9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCC_OscConfig+0x508>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <HAL_RCC_OscConfig+0x508>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d78:	f7fe ff20 	bl	8000bbc <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d80:	f7fe ff1c 	bl	8000bbc <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1b2      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_RCC_OscConfig+0x508>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d108      	bne.n	8001db8 <HAL_RCC_OscConfig+0x4d8>
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dac:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db6:	e029      	b.n	8001e0c <HAL_RCC_OscConfig+0x52c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d115      	bne.n	8001dec <HAL_RCC_OscConfig+0x50c>
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	4a03      	ldr	r2, [pc, #12]	; (8001de4 <HAL_RCC_OscConfig+0x504>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de0:	e014      	b.n	8001e0c <HAL_RCC_OscConfig+0x52c>
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40007000 	.word	0x40007000
 8001dec:	4b9a      	ldr	r3, [pc, #616]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	4a99      	ldr	r2, [pc, #612]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dfc:	4b96      	ldr	r3, [pc, #600]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	4a95      	ldr	r2, [pc, #596]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d016      	beq.n	8001e42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7fe fed2 	bl	8000bbc <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7fe fece 	bl	8000bbc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e162      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e32:	4b89      	ldr	r3, [pc, #548]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ed      	beq.n	8001e1c <HAL_RCC_OscConfig+0x53c>
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7fe febb 	bl	8000bbc <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7fe feb7 	bl	8000bbc <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e14b      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e60:	4b7d      	ldr	r3, [pc, #500]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ed      	bne.n	8001e4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6e:	7ffb      	ldrb	r3, [r7, #31]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b78      	ldr	r3, [pc, #480]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	4a77      	ldr	r2, [pc, #476]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d03c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01c      	beq.n	8001ece <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e94:	4b70      	ldr	r3, [pc, #448]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001e96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e9a:	4a6f      	ldr	r2, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7fe fe8a 	bl	8000bbc <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eac:	f7fe fe86 	bl	8000bbc <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e11c      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ebe:	4b66      	ldr	r3, [pc, #408]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ef      	beq.n	8001eac <HAL_RCC_OscConfig+0x5cc>
 8001ecc:	e01b      	b.n	8001f06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ece:	4b62      	ldr	r3, [pc, #392]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ed4:	4a60      	ldr	r2, [pc, #384]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7fe fe6d 	bl	8000bbc <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee6:	f7fe fe69 	bl	8000bbc <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0ff      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ef8:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ef      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80f3 	beq.w	80020f6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	f040 80c9 	bne.w	80020ac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f1a:	4b4f      	ldr	r3, [pc, #316]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0203 	and.w	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d12c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d123      	bne.n	8001f88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d11b      	bne.n	8001f88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d113      	bne.n	8001f88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d109      	bne.n	8001f88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	3b01      	subs	r3, #1
 8001f82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d06b      	beq.n	8002060 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d062      	beq.n	8002054 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0ac      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a2d      	ldr	r2, [pc, #180]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001faa:	f7fe fe07 	bl	8000bbc <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7fe fe03 	bl	8000bbc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e099      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_RCC_OscConfig+0x77c>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fea:	0212      	lsls	r2, r2, #8
 8001fec:	4311      	orrs	r1, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ff2:	0852      	lsrs	r2, r2, #1
 8001ff4:	3a01      	subs	r2, #1
 8001ff6:	0552      	lsls	r2, r2, #21
 8001ff8:	4311      	orrs	r1, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ffe:	0852      	lsrs	r2, r2, #1
 8002000:	3a01      	subs	r2, #1
 8002002:	0652      	lsls	r2, r2, #25
 8002004:	4311      	orrs	r1, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800200a:	06d2      	lsls	r2, r2, #27
 800200c:	430a      	orrs	r2, r1
 800200e:	4912      	ldr	r1, [pc, #72]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8002010:	4313      	orrs	r3, r2
 8002012:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002014:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8002026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800202c:	f7fe fdc6 	bl	8000bbc <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe fdc2 	bl	8000bbc <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e058      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <HAL_RCC_OscConfig+0x778>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002052:	e050      	b.n	80020f6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e04f      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
 8002058:	40021000 	.word	0x40021000
 800205c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d144      	bne.n	80020f6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a23      	ldr	r2, [pc, #140]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 8002072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a20      	ldr	r2, [pc, #128]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 800207e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002082:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002084:	f7fe fd9a 	bl	8000bbc <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fd96 	bl	8000bbc <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e02c      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x7ac>
 80020aa:	e024      	b.n	80020f6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d01f      	beq.n	80020f2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 80020b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7fe fd7d 	bl	8000bbc <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c6:	f7fe fd79 	bl	8000bbc <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e00f      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	4905      	ldr	r1, [pc, #20]	; (8002100 <HAL_RCC_OscConfig+0x820>)
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_RCC_OscConfig+0x824>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	60cb      	str	r3, [r1, #12]
 80020f0:	e001      	b.n	80020f6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	feeefffc 	.word	0xfeeefffc

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0e7      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b75      	ldr	r3, [pc, #468]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4970      	ldr	r1, [pc, #448]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b6e      	ldr	r3, [pc, #440]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0cf      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002164:	429a      	cmp	r2, r3
 8002166:	d908      	bls.n	800217a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4960      	ldr	r1, [pc, #384]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d04c      	beq.n	8002220 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218e:	4b5a      	ldr	r3, [pc, #360]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d121      	bne.n	80021de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0a6      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b54      	ldr	r3, [pc, #336]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d115      	bne.n	80021de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e09a      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021be:	4b4e      	ldr	r3, [pc, #312]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e08e      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ce:	4b4a      	ldr	r3, [pc, #296]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e086      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 0203 	bic.w	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4943      	ldr	r1, [pc, #268]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f0:	f7fe fce4 	bl	8000bbc <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	e00a      	b.n	800220e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7fe fce0 	bl	8000bbc <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e06e      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 020c 	and.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	429a      	cmp	r2, r3
 800221e:	d1eb      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002238:	429a      	cmp	r2, r3
 800223a:	d208      	bcs.n	800224e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	492b      	ldr	r1, [pc, #172]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	429a      	cmp	r2, r3
 800225a:	d210      	bcs.n	800227e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 0207 	bic.w	r2, r3, #7
 8002264:	4923      	ldr	r1, [pc, #140]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226c:	4b21      	ldr	r3, [pc, #132]	; (80022f4 <HAL_RCC_ClockConfig+0x1ec>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e036      	b.n	80022ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4918      	ldr	r1, [pc, #96]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4910      	ldr	r1, [pc, #64]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022bc:	f000 f824 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	490b      	ldr	r1, [pc, #44]	; (80022fc <HAL_RCC_ClockConfig+0x1f4>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	4a09      	ldr	r2, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1f8>)
 80022da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1fc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fb83 	bl	80009ec <HAL_InitTick>
 80022e6:	4603      	mov	r3, r0
 80022e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80022ea:	7afb      	ldrb	r3, [r7, #11]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40022000 	.word	0x40022000
 80022f8:	40021000 	.word	0x40021000
 80022fc:	08004be4 	.word	0x08004be4
 8002300:	20000000 	.word	0x20000000
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002316:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002320:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x34>
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d121      	bne.n	800237a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d11e      	bne.n	800237a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800233c:	4b34      	ldr	r3, [pc, #208]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002348:	4b31      	ldr	r3, [pc, #196]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	e005      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002364:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10d      	bne.n	8002390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d102      	bne.n	8002386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_RCC_GetSysClockFreq+0x110>)
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	e004      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d101      	bne.n	8002390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800238c:	4b23      	ldr	r3, [pc, #140]	; (800241c <HAL_RCC_GetSysClockFreq+0x114>)
 800238e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d134      	bne.n	8002400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0xa6>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d003      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0xac>
 80023ac:	e005      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_RCC_GetSysClockFreq+0x110>)
 80023b0:	617b      	str	r3, [r7, #20]
      break;
 80023b2:	e005      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_GetSysClockFreq+0x114>)
 80023b6:	617b      	str	r3, [r7, #20]
      break;
 80023b8:	e002      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	617b      	str	r3, [r7, #20]
      break;
 80023be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	3301      	adds	r3, #1
 80023cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	fb03 f202 	mul.w	r2, r3, r2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	0e5b      	lsrs	r3, r3, #25
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	3301      	adds	r3, #1
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002400:	69bb      	ldr	r3, [r7, #24]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	08004bfc 	.word	0x08004bfc
 8002418:	00f42400 	.word	0x00f42400
 800241c:	007a1200 	.word	0x007a1200

08002420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_RCC_GetHCLKFreq+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000000 	.word	0x20000000

08002438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800243c:	f7ff fff0 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4904      	ldr	r1, [pc, #16]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	08004bf4 	.word	0x08004bf4

08002464 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	220f      	movs	r2, #15
 8002472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0203 	and.w	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCC_GetClockConfig+0x5c>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_GetClockConfig+0x5c>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_RCC_GetClockConfig+0x60>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0207 	and.w	r2, r3, #7
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40022000 	.word	0x40022000

080024c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024e0:	f7ff f99a 	bl	8001818 <HAL_PWREx_GetVoltageRange>
 80024e4:	6178      	str	r0, [r7, #20]
 80024e6:	e014      	b.n	8002512 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	4a24      	ldr	r2, [pc, #144]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f2:	6593      	str	r3, [r2, #88]	; 0x58
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002500:	f7ff f98a 	bl	8001818 <HAL_PWREx_GetVoltageRange>
 8002504:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002510:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002518:	d10b      	bne.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b80      	cmp	r3, #128	; 0x80
 800251e:	d919      	bls.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2ba0      	cmp	r3, #160	; 0xa0
 8002524:	d902      	bls.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002526:	2302      	movs	r3, #2
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	e013      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800252c:	2301      	movs	r3, #1
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	e010      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b80      	cmp	r3, #128	; 0x80
 8002536:	d902      	bls.n	800253e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002538:	2303      	movs	r3, #3
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	e00a      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b80      	cmp	r3, #128	; 0x80
 8002542:	d102      	bne.n	800254a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002544:	2302      	movs	r3, #2
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	e004      	b.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b70      	cmp	r3, #112	; 0x70
 800254e:	d101      	bne.n	8002554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002550:	2301      	movs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 0207 	bic.w	r2, r3, #7
 800255c:	4909      	ldr	r1, [pc, #36]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002564:	4b07      	ldr	r3, [pc, #28]	; (8002584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	40022000 	.word	0x40022000

08002588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002590:	2300      	movs	r3, #0
 8002592:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002594:	2300      	movs	r3, #0
 8002596:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d031      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025ac:	d01a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80025ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025b2:	d814      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d009      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025bc:	d10f      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025be:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4a5c      	ldr	r2, [pc, #368]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ca:	e00c      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fa44 	bl	8002a60 <RCCEx_PLLSAI1_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025dc:	e003      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	74fb      	strb	r3, [r7, #19]
      break;
 80025e2:	e000      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80025e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ec:	4b51      	ldr	r3, [pc, #324]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	494e      	ldr	r1, [pc, #312]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002602:	e001      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 809e 	beq.w	8002752 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800261a:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800262a:	2300      	movs	r3, #0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00d      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	4b40      	ldr	r3, [pc, #256]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	4a3f      	ldr	r2, [pc, #252]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263a:	6593      	str	r3, [r2, #88]	; 0x58
 800263c:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002648:	2301      	movs	r3, #1
 800264a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a39      	ldr	r2, [pc, #228]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002658:	f7fe fab0 	bl	8000bbc <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800265e:	e009      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002660:	f7fe faac 	bl	8000bbc <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d902      	bls.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	74fb      	strb	r3, [r7, #19]
        break;
 8002672:	e005      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d15a      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002686:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002690:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01e      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d019      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ce:	4a19      	ldr	r2, [pc, #100]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d016      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fa6c 	bl	8000bbc <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e6:	e00b      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7fe fa68 	bl	8000bbc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d902      	bls.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	74fb      	strb	r3, [r7, #19]
            break;
 80026fe:	e006      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ec      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002722:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800272a:	e009      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
 8002730:	e006      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002740:	7c7b      	ldrb	r3, [r7, #17]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002746:	4b9e      	ldr	r3, [pc, #632]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	4a9d      	ldr	r2, [pc, #628]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800274c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002750:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800275e:	4b98      	ldr	r3, [pc, #608]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 0203 	bic.w	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4994      	ldr	r1, [pc, #592]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002780:	4b8f      	ldr	r3, [pc, #572]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 020c 	bic.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	498c      	ldr	r1, [pc, #560]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027a2:	4b87      	ldr	r3, [pc, #540]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	4983      	ldr	r1, [pc, #524]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027c4:	4b7e      	ldr	r3, [pc, #504]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	497b      	ldr	r1, [pc, #492]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e6:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4972      	ldr	r1, [pc, #456]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002808:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	496a      	ldr	r1, [pc, #424]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800282a:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002838:	4961      	ldr	r1, [pc, #388]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284c:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	4959      	ldr	r1, [pc, #356]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800286e:	4b54      	ldr	r3, [pc, #336]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	4950      	ldr	r1, [pc, #320]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002890:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	4948      	ldr	r1, [pc, #288]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028b2:	4b43      	ldr	r3, [pc, #268]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028b8:	f023 0203 	bic.w	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	493f      	ldr	r1, [pc, #252]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d028      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028d4:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e2:	4937      	ldr	r1, [pc, #220]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028f2:	d106      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fe:	60d3      	str	r3, [r2, #12]
 8002900:	e011      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002906:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800290a:	d10c      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	2101      	movs	r1, #1
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f8a4 	bl	8002a60 <RCCEx_PLLSAI1_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d028      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002932:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	491f      	ldr	r1, [pc, #124]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002950:	d106      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295c:	60d3      	str	r3, [r2, #12]
 800295e:	e011      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002968:	d10c      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	2101      	movs	r1, #1
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f875 	bl	8002a60 <RCCEx_PLLSAI1_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d02b      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	4908      	ldr	r1, [pc, #32]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ae:	d109      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4a02      	ldr	r2, [pc, #8]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ba:	60d3      	str	r3, [r2, #12]
 80029bc:	e014      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2101      	movs	r1, #1
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f843 	bl	8002a60 <RCCEx_PLLSAI1_Config>
 80029da:	4603      	mov	r3, r0
 80029dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01c      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f4:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	4916      	ldr	r1, [pc, #88]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	2102      	movs	r1, #2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f820 	bl	8002a60 <RCCEx_PLLSAI1_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	4904      	ldr	r1, [pc, #16]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a50:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000

08002a60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a6e:	4b74      	ldr	r3, [pc, #464]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d018      	beq.n	8002aac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a7a:	4b71      	ldr	r3, [pc, #452]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0203 	and.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d10d      	bne.n	8002aa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a92:	4b6b      	ldr	r3, [pc, #428]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
       ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d047      	beq.n	8002b36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	e044      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d018      	beq.n	8002ae6 <RCCEx_PLLSAI1_Config+0x86>
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d825      	bhi.n	8002b04 <RCCEx_PLLSAI1_Config+0xa4>
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d002      	beq.n	8002ac2 <RCCEx_PLLSAI1_Config+0x62>
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d009      	beq.n	8002ad4 <RCCEx_PLLSAI1_Config+0x74>
 8002ac0:	e020      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ac2:	4b5f      	ldr	r3, [pc, #380]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11d      	bne.n	8002b0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad2:	e01a      	b.n	8002b0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ad4:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d116      	bne.n	8002b0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae4:	e013      	b.n	8002b0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ae6:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002af2:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b02:	e006      	b.n	8002b12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      break;
 8002b08:	e004      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e002      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e000      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b12:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10d      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	4943      	ldr	r1, [pc, #268]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d17c      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b3c:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a3f      	ldr	r2, [pc, #252]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b48:	f7fe f838 	bl	8000bbc <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b4e:	e009      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b50:	f7fe f834 	bl	8000bbc <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d902      	bls.n	8002b64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	73fb      	strb	r3, [r7, #15]
        break;
 8002b62:	e005      	b.n	8002b70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b64:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ef      	bne.n	8002b50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d15f      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d110      	bne.n	8002b9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6892      	ldr	r2, [r2, #8]
 8002b8c:	0211      	lsls	r1, r2, #8
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	06d2      	lsls	r2, r2, #27
 8002b94:	430a      	orrs	r2, r1
 8002b96:	492a      	ldr	r1, [pc, #168]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	610b      	str	r3, [r1, #16]
 8002b9c:	e027      	b.n	8002bee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d112      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	0211      	lsls	r1, r2, #8
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6912      	ldr	r2, [r2, #16]
 8002bba:	0852      	lsrs	r2, r2, #1
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	0552      	lsls	r2, r2, #21
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	491f      	ldr	r1, [pc, #124]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	610b      	str	r3, [r1, #16]
 8002bc8:	e011      	b.n	8002bee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bca:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6892      	ldr	r2, [r2, #8]
 8002bda:	0211      	lsls	r1, r2, #8
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6952      	ldr	r2, [r2, #20]
 8002be0:	0852      	lsrs	r2, r2, #1
 8002be2:	3a01      	subs	r2, #1
 8002be4:	0652      	lsls	r2, r2, #25
 8002be6:	430a      	orrs	r2, r1
 8002be8:	4915      	ldr	r1, [pc, #84]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fd ffdf 	bl	8000bbc <HAL_GetTick>
 8002bfe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c00:	e009      	b.n	8002c16 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c02:	f7fd ffdb 	bl	8000bbc <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d902      	bls.n	8002c16 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	73fb      	strb	r3, [r7, #15]
          break;
 8002c14:	e005      	b.n	8002c22 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0ef      	beq.n	8002c02 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	4903      	ldr	r1, [pc, #12]	; (8002c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000

08002c44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d06c      	beq.n	8002d30 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fdca 	bl	8000804 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	22ca      	movs	r2, #202	; 0xca
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2253      	movs	r2, #83	; 0x53
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f87c 	bl	8002d86 <RTC_EnterInitMode>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d14b      	bne.n	8002d30 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002caa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68d2      	ldr	r2, [r2, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6919      	ldr	r1, [r3, #16]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	041a      	lsls	r2, r3, #16
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f87f 	bl	8002dec <RTC_ExitInitMode>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d11b      	bne.n	8002d30 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0203 	bic.w	r2, r2, #3
 8002d06:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d50:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002d52:	f7fd ff33 	bl	8000bbc <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d58:	e009      	b.n	8002d6e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d5a:	f7fd ff2f 	bl	8000bbc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d68:	d901      	bls.n	8002d6e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e007      	b.n	8002d7e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ee      	beq.n	8002d5a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d120      	bne.n	8002de2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002daa:	f7fd ff07 	bl	8000bbc <HAL_GetTick>
 8002dae:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002db0:	e00d      	b.n	8002dce <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002db2:	f7fd ff03 	bl	8000bbc <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dc0:	d905      	bls.n	8002dce <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2203      	movs	r2, #3
 8002dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <RTC_EnterInitMode+0x5c>
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d1e7      	bne.n	8002db2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <RTC_ExitInitMode+0x78>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <RTC_ExitInitMode+0x78>)
 8002dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e02:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <RTC_ExitInitMode+0x78>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10c      	bne.n	8002e2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff92 	bl	8002d3a <HAL_RTC_WaitForSynchro>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01e      	beq.n	8002e5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	73fb      	strb	r3, [r7, #15]
 8002e28:	e017      	b.n	8002e5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <RTC_ExitInitMode+0x78>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4a0d      	ldr	r2, [pc, #52]	; (8002e64 <RTC_ExitInitMode+0x78>)
 8002e30:	f023 0320 	bic.w	r3, r3, #32
 8002e34:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ff7f 	bl	8002d3a <HAL_RTC_WaitForSynchro>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2203      	movs	r2, #3
 8002e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <RTC_ExitInitMode+0x78>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <RTC_ExitInitMode+0x78>)
 8002e54:	f043 0320 	orr.w	r3, r3, #32
 8002e58:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40002800 	.word	0x40002800

08002e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e095      	b.n	8002fa6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d108      	bne.n	8002e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e8a:	d009      	beq.n	8002ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
 8002e92:	e005      	b.n	8002ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd fcd2 	bl	8000864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ee0:	d902      	bls.n	8002ee8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e002      	b.n	8002eee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ef6:	d007      	beq.n	8002f08 <HAL_SPI_Init+0xa0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f00:	d002      	beq.n	8002f08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	ea42 0103 	orr.w	r1, r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	f003 0204 	and.w	r2, r3, #4
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f84:	ea42 0103 	orr.w	r1, r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e049      	b.n	8003054 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f841 	bl	800305c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f000 f9e3 	bl	80033b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d001      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e040      	b.n	800310a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_TIM_Base_Start_IT+0xa8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00e      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x58>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b2:	d009      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x58>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_TIM_Base_Start_IT+0xac>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x58>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_TIM_Base_Start_IT+0xb0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d115      	bne.n	80030f4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_TIM_Base_Start_IT+0xb4>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d015      	beq.n	8003106 <HAL_TIM_Base_Start_IT+0x96>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d011      	beq.n	8003106 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f2:	e008      	b.n	8003106 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e000      	b.n	8003108 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003106:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40000400 	.word	0x40000400
 8003120:	40014000 	.word	0x40014000
 8003124:	00010007 	.word	0x00010007

08003128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0202 	mvn.w	r2, #2
 8003154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f905 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8f7 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f908 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b04      	cmp	r3, #4
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0204 	mvn.w	r2, #4
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8db 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8cd 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f8de 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0208 	mvn.w	r2, #8
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2204      	movs	r2, #4
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f8b1 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8a3 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8b4 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b10      	cmp	r3, #16
 8003238:	d122      	bne.n	8003280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b10      	cmp	r3, #16
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0210 	mvn.w	r2, #16
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2208      	movs	r2, #8
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f887 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f879 	bl	8003366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f88a 	bl	800338e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0201 	mvn.w	r2, #1
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fa20 	bl	80006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8e8 	bl	80034a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e6:	d10e      	bne.n	8003306 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f2:	2b80      	cmp	r3, #128	; 0x80
 80032f4:	d107      	bne.n	8003306 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8db 	bl	80034bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	d10e      	bne.n	8003332 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d107      	bne.n	8003332 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800332a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f838 	bl	80033a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b20      	cmp	r3, #32
 800333e:	d10e      	bne.n	800335e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b20      	cmp	r3, #32
 800334c:	d107      	bne.n	800335e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f06f 0220 	mvn.w	r2, #32
 8003356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f89b 	bl	8003494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a2e      	ldr	r2, [pc, #184]	; (8003484 <TIM_Base_SetConfig+0xcc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d007      	beq.n	80033e0 <TIM_Base_SetConfig+0x28>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d6:	d003      	beq.n	80033e0 <TIM_Base_SetConfig+0x28>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a2b      	ldr	r2, [pc, #172]	; (8003488 <TIM_Base_SetConfig+0xd0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d108      	bne.n	80033f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a23      	ldr	r2, [pc, #140]	; (8003484 <TIM_Base_SetConfig+0xcc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00f      	beq.n	800341a <TIM_Base_SetConfig+0x62>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d00b      	beq.n	800341a <TIM_Base_SetConfig+0x62>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a20      	ldr	r2, [pc, #128]	; (8003488 <TIM_Base_SetConfig+0xd0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <TIM_Base_SetConfig+0x62>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a1f      	ldr	r2, [pc, #124]	; (800348c <TIM_Base_SetConfig+0xd4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_Base_SetConfig+0x62>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1e      	ldr	r2, [pc, #120]	; (8003490 <TIM_Base_SetConfig+0xd8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d108      	bne.n	800342c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a0c      	ldr	r2, [pc, #48]	; (8003484 <TIM_Base_SetConfig+0xcc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <TIM_Base_SetConfig+0xb0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a0c      	ldr	r2, [pc, #48]	; (800348c <TIM_Base_SetConfig+0xd4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_Base_SetConfig+0xb0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <TIM_Base_SetConfig+0xd8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d103      	bne.n	8003470 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	615a      	str	r2, [r3, #20]
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40000400 	.word	0x40000400
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400

08003494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <makeFreeRtosPriority>:
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e2:	2b84      	cmp	r3, #132	; 0x84
 80034e4:	d005      	beq.n	80034f2 <makeFreeRtosPriority+0x22>
 80034e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	3303      	adds	r3, #3
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <osKernelStart>:
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
 8003504:	f000 faf6 	bl	8003af4 <vTaskStartScheduler>
 8003508:	2300      	movs	r3, #0
 800350a:	4618      	mov	r0, r3
 800350c:	bd80      	pop	{r7, pc}

0800350e <osThreadCreate>:
 800350e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003510:	b089      	sub	sp, #36	; 0x24
 8003512:	af04      	add	r7, sp, #16
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <osThreadCreate+0x54>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01c      	beq.n	8003562 <osThreadCreate+0x54>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685c      	ldr	r4, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681d      	ldr	r5, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691e      	ldr	r6, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ffc8 	bl	80034d0 <makeFreeRtosPriority>
 8003540:	4601      	mov	r1, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6992      	ldr	r2, [r2, #24]
 800354a:	9202      	str	r2, [sp, #8]
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	9100      	str	r1, [sp, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	4632      	mov	r2, r6
 8003554:	4629      	mov	r1, r5
 8003556:	4620      	mov	r0, r4
 8003558:	f000 f8ed 	bl	8003736 <xTaskCreateStatic>
 800355c:	4603      	mov	r3, r0
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e01c      	b.n	800359c <osThreadCreate+0x8e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685c      	ldr	r4, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681d      	ldr	r5, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	b29e      	uxth	r6, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ffaa 	bl	80034d0 <makeFreeRtosPriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f107 030c 	add.w	r3, r7, #12
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	9200      	str	r2, [sp, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	4632      	mov	r2, r6
 800358a:	4629      	mov	r1, r5
 800358c:	4620      	mov	r0, r4
 800358e:	f000 f92f 	bl	80037f0 <xTaskCreate>
 8003592:	4603      	mov	r3, r0
 8003594:	2b01      	cmp	r3, #1
 8003596:	d001      	beq.n	800359c <osThreadCreate+0x8e>
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <osThreadCreate+0x90>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035a6 <osDelay>:
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <osDelay+0x16>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	e000      	b.n	80035be <osDelay+0x18>
 80035bc:	2301      	movs	r3, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fa64 	bl	8003a8c <vTaskDelay>
 80035c4:	2300      	movs	r3, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <vListInitialise>:
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f103 0208 	add.w	r2, r3, #8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	605a      	str	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f04f 32ff 	mov.w	r2, #4294967295
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f103 0208 	add.w	r2, r3, #8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f103 0208 	add.w	r2, r3, #8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	611a      	str	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <vListInitialiseItem>:
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	611a      	str	r2, [r3, #16]
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <vListInsertEnd>:
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <vListInsert>:
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d103      	bne.n	8003690 <vListInsert+0x20>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e00c      	b.n	80036aa <vListInsert+0x3a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3308      	adds	r3, #8
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e002      	b.n	800369e <vListInsert+0x2e>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d2f6      	bcs.n	8003698 <vListInsert+0x28>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	611a      	str	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <uxListRemove>:
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6892      	ldr	r2, [r2, #8]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6852      	ldr	r2, [r2, #4]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	429a      	cmp	r2, r3
 800370c:	d103      	bne.n	8003716 <uxListRemove+0x34>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	1e5a      	subs	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <xTaskCreateStatic>:
 8003736:	b580      	push	{r7, lr}
 8003738:	b08e      	sub	sp, #56	; 0x38
 800373a:	af04      	add	r7, sp, #16
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <xTaskCreateStatic+0x2a>
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <xTaskCreateStatic+0x28>
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <xTaskCreateStatic+0x46>
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <xTaskCreateStatic+0x44>
 800377c:	23b4      	movs	r3, #180	; 0xb4
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2bb4      	cmp	r3, #180	; 0xb4
 8003784:	d00a      	beq.n	800379c <xTaskCreateStatic+0x66>
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	bf00      	nop
 800379a:	e7fe      	b.n	800379a <xTaskCreateStatic+0x64>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01e      	beq.n	80037e2 <xTaskCreateStatic+0xac>
 80037a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d01b      	beq.n	80037e2 <xTaskCreateStatic+0xac>
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80037bc:	2300      	movs	r3, #0
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	9302      	str	r3, [sp, #8]
 80037c4:	f107 0314 	add.w	r3, r7, #20
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f851 	bl	800387c <prvInitialiseNewTask>
 80037da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037dc:	f000 f8ec 	bl	80039b8 <prvAddNewTaskToReadyList>
 80037e0:	e001      	b.n	80037e6 <xTaskCreateStatic+0xb0>
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	4618      	mov	r0, r3
 80037ea:	3728      	adds	r7, #40	; 0x28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <xTaskCreate>:
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af04      	add	r7, sp, #16
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	80fb      	strh	r3, [r7, #6]
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4618      	mov	r0, r3
 8003806:	f000 feef 	bl	80045e8 <pvPortMalloc>
 800380a:	6178      	str	r0, [r7, #20]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <xTaskCreate+0x40>
 8003812:	20b4      	movs	r0, #180	; 0xb4
 8003814:	f000 fee8 	bl	80045e8 <pvPortMalloc>
 8003818:	61f8      	str	r0, [r7, #28]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <xTaskCreate+0x38>
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
 8003826:	e005      	b.n	8003834 <xTaskCreate+0x44>
 8003828:	6978      	ldr	r0, [r7, #20]
 800382a:	f000 ffa9 	bl	8004780 <vPortFree>
 800382e:	e001      	b.n	8003834 <xTaskCreate+0x44>
 8003830:	2300      	movs	r3, #0
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <xTaskCreate+0x7a>
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	2300      	movs	r3, #0
 8003846:	9303      	str	r3, [sp, #12]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	9302      	str	r3, [sp, #8]
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f80f 	bl	800387c <prvInitialiseNewTask>
 800385e:	69f8      	ldr	r0, [r7, #28]
 8003860:	f000 f8aa 	bl	80039b8 <prvAddNewTaskToReadyList>
 8003864:	2301      	movs	r3, #1
 8003866:	61bb      	str	r3, [r7, #24]
 8003868:	e002      	b.n	8003870 <xTaskCreate+0x80>
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <prvInitialiseNewTask>:
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003894:	3b01      	subs	r3, #1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f023 0307 	bic.w	r3, r3, #7
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <prvInitialiseNewTask+0x48>
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <prvInitialiseNewTask+0x46>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01f      	beq.n	800390a <prvInitialiseNewTask+0x8e>
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	e012      	b.n	80038f6 <prvInitialiseNewTask+0x7a>
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	7819      	ldrb	r1, [r3, #0]
 80038d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	3334      	adds	r3, #52	; 0x34
 80038e0:	460a      	mov	r2, r1
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <prvInitialiseNewTask+0x82>
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3301      	adds	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d9e9      	bls.n	80038d0 <prvInitialiseNewTask+0x54>
 80038fc:	e000      	b.n	8003900 <prvInitialiseNewTask+0x84>
 80038fe:	bf00      	nop
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003908:	e003      	b.n	8003912 <prvInitialiseNewTask+0x96>
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2b06      	cmp	r3, #6
 8003916:	d901      	bls.n	800391c <prvInitialiseNewTask+0xa0>
 8003918:	2306      	movs	r3, #6
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	2200      	movs	r2, #0
 800392c:	649a      	str	r2, [r3, #72]	; 0x48
 800392e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003930:	3304      	adds	r3, #4
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fe6b 	bl	800360e <vListInitialiseItem>
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	3318      	adds	r3, #24
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fe66 	bl	800360e <vListInitialiseItem>
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003946:	611a      	str	r2, [r3, #16]
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	f1c3 0207 	rsb	r2, r3, #7
 800394e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003950:	619a      	str	r2, [r3, #24]
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	2200      	movs	r2, #0
 800395c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	2200      	movs	r2, #0
 8003964:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	334c      	adds	r3, #76	; 0x4c
 800396c:	2260      	movs	r2, #96	; 0x60
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f001 f849 	bl	8004a08 <memset>
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <prvInitialiseNewTask+0x130>)
 800397a:	651a      	str	r2, [r3, #80]	; 0x50
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <prvInitialiseNewTask+0x134>)
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <prvInitialiseNewTask+0x138>)
 8003986:	659a      	str	r2, [r3, #88]	; 0x58
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	68f9      	ldr	r1, [r7, #12]
 800398c:	69b8      	ldr	r0, [r7, #24]
 800398e:	f000 fc1f 	bl	80041d0 <pxPortInitialiseStack>
 8003992:	4602      	mov	r2, r0
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <prvInitialiseNewTask+0x128>
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	bf00      	nop
 80039a6:	3720      	adds	r7, #32
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	08004c4c 	.word	0x08004c4c
 80039b0:	08004c6c 	.word	0x08004c6c
 80039b4:	08004c2c 	.word	0x08004c2c

080039b8 <prvAddNewTaskToReadyList>:
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	f000 fd30 	bl	8004424 <vPortEnterCritical>
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <prvAddNewTaskToReadyList+0xb8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <prvAddNewTaskToReadyList+0xb8>)
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <prvAddNewTaskToReadyList+0xbc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <prvAddNewTaskToReadyList+0x32>
 80039d6:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <prvAddNewTaskToReadyList+0xbc>)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <prvAddNewTaskToReadyList+0xb8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d110      	bne.n	8003a06 <prvAddNewTaskToReadyList+0x4e>
 80039e4:	f000 facc 	bl	8003f80 <prvInitialiseTaskLists>
 80039e8:	e00d      	b.n	8003a06 <prvAddNewTaskToReadyList+0x4e>
 80039ea:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <prvAddNewTaskToReadyList+0xc0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <prvAddNewTaskToReadyList+0x4e>
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <prvAddNewTaskToReadyList+0xbc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d802      	bhi.n	8003a06 <prvAddNewTaskToReadyList+0x4e>
 8003a00:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <prvAddNewTaskToReadyList+0xbc>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <prvAddNewTaskToReadyList+0xc4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	4a1b      	ldr	r2, [pc, #108]	; (8003a7c <prvAddNewTaskToReadyList+0xc4>)
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	2201      	movs	r2, #1
 8003a16:	409a      	lsls	r2, r3
 8003a18:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <prvAddNewTaskToReadyList+0xc8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <prvAddNewTaskToReadyList+0xc8>)
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <prvAddNewTaskToReadyList+0xcc>)
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f7ff fdf5 	bl	8003628 <vListInsertEnd>
 8003a3e:	f000 fd21 	bl	8004484 <vPortExitCritical>
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <prvAddNewTaskToReadyList+0xc0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00e      	beq.n	8003a68 <prvAddNewTaskToReadyList+0xb0>
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <prvAddNewTaskToReadyList+0xbc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d207      	bcs.n	8003a68 <prvAddNewTaskToReadyList+0xb0>
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <prvAddNewTaskToReadyList+0xd0>)
 8003a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000630 	.word	0x20000630
 8003a74:	20000530 	.word	0x20000530
 8003a78:	2000063c 	.word	0x2000063c
 8003a7c:	2000064c 	.word	0x2000064c
 8003a80:	20000638 	.word	0x20000638
 8003a84:	20000534 	.word	0x20000534
 8003a88:	e000ed04 	.word	0xe000ed04

08003a8c <vTaskDelay>:
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <vTaskDelay+0x42>
 8003a9e:	4b13      	ldr	r3, [pc, #76]	; (8003aec <vTaskDelay+0x60>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <vTaskDelay+0x30>
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	bf00      	nop
 8003aba:	e7fe      	b.n	8003aba <vTaskDelay+0x2e>
 8003abc:	f000 f884 	bl	8003bc8 <vTaskSuspendAll>
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fb1e 	bl	8004104 <prvAddCurrentTaskToDelayedList>
 8003ac8:	f000 f88c 	bl	8003be4 <xTaskResumeAll>
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d107      	bne.n	8003ae4 <vTaskDelay+0x58>
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <vTaskDelay+0x64>)
 8003ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000658 	.word	0x20000658
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <vTaskStartScheduler>:
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	; 0x28
 8003af8:	af04      	add	r7, sp, #16
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	463a      	mov	r2, r7
 8003b04:	1d39      	adds	r1, r7, #4
 8003b06:	f107 0308 	add.w	r3, r7, #8
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fc fb86 	bl	800021c <vApplicationGetIdleTaskMemory>
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	9202      	str	r2, [sp, #8]
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	460a      	mov	r2, r1
 8003b22:	4921      	ldr	r1, [pc, #132]	; (8003ba8 <vTaskStartScheduler+0xb4>)
 8003b24:	4821      	ldr	r0, [pc, #132]	; (8003bac <vTaskStartScheduler+0xb8>)
 8003b26:	f7ff fe06 	bl	8003736 <xTaskCreateStatic>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <vTaskStartScheduler+0xbc>)
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <vTaskStartScheduler+0xbc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <vTaskStartScheduler+0x4a>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	e001      	b.n	8003b42 <vTaskStartScheduler+0x4e>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d11b      	bne.n	8003b80 <vTaskStartScheduler+0x8c>
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	bf00      	nop
 8003b5c:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <vTaskStartScheduler+0xc0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	334c      	adds	r3, #76	; 0x4c
 8003b62:	4a15      	ldr	r2, [pc, #84]	; (8003bb8 <vTaskStartScheduler+0xc4>)
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <vTaskStartScheduler+0xc8>)
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <vTaskStartScheduler+0xcc>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <vTaskStartScheduler+0xd0>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f000 fbb1 	bl	80042e0 <xPortStartScheduler>
 8003b7e:	e00e      	b.n	8003b9e <vTaskStartScheduler+0xaa>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d10a      	bne.n	8003b9e <vTaskStartScheduler+0xaa>
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <vTaskStartScheduler+0xa8>
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	08004bdc 	.word	0x08004bdc
 8003bac:	08003f51 	.word	0x08003f51
 8003bb0:	20000654 	.word	0x20000654
 8003bb4:	20000530 	.word	0x20000530
 8003bb8:	20000010 	.word	0x20000010
 8003bbc:	20000650 	.word	0x20000650
 8003bc0:	2000063c 	.word	0x2000063c
 8003bc4:	20000634 	.word	0x20000634

08003bc8 <vTaskSuspendAll>:
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <vTaskSuspendAll+0x18>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	4a03      	ldr	r2, [pc, #12]	; (8003be0 <vTaskSuspendAll+0x18>)
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	bf00      	nop
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	20000658 	.word	0x20000658

08003be4 <xTaskResumeAll>:
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	4b41      	ldr	r3, [pc, #260]	; (8003cf8 <xTaskResumeAll+0x114>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <xTaskResumeAll+0x2c>
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <xTaskResumeAll+0x2a>
 8003c10:	f000 fc08 	bl	8004424 <vPortEnterCritical>
 8003c14:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <xTaskResumeAll+0x114>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	4a37      	ldr	r2, [pc, #220]	; (8003cf8 <xTaskResumeAll+0x114>)
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b36      	ldr	r3, [pc, #216]	; (8003cf8 <xTaskResumeAll+0x114>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d161      	bne.n	8003cea <xTaskResumeAll+0x106>
 8003c26:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <xTaskResumeAll+0x118>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d05d      	beq.n	8003cea <xTaskResumeAll+0x106>
 8003c2e:	e02e      	b.n	8003c8e <xTaskResumeAll+0xaa>
 8003c30:	4b33      	ldr	r3, [pc, #204]	; (8003d00 <xTaskResumeAll+0x11c>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3318      	adds	r3, #24
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fd50 	bl	80036e2 <uxListRemove>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fd4b 	bl	80036e2 <uxListRemove>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <xTaskResumeAll+0x120>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <xTaskResumeAll+0x120>)
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <xTaskResumeAll+0x124>)
 8003c6c:	441a      	add	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7ff fcd7 	bl	8003628 <vListInsertEnd>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7e:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <xTaskResumeAll+0x128>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <xTaskResumeAll+0xaa>
 8003c88:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <xTaskResumeAll+0x12c>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <xTaskResumeAll+0x11c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1cc      	bne.n	8003c30 <xTaskResumeAll+0x4c>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <xTaskResumeAll+0xbc>
 8003c9c:	f000 fa12 	bl	80040c4 <prvResetNextTaskUnblockTime>
 8003ca0:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <xTaskResumeAll+0x130>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d010      	beq.n	8003cce <xTaskResumeAll+0xea>
 8003cac:	f000 f836 	bl	8003d1c <xTaskIncrementTick>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <xTaskResumeAll+0xd8>
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <xTaskResumeAll+0x12c>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f1      	bne.n	8003cac <xTaskResumeAll+0xc8>
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <xTaskResumeAll+0x130>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <xTaskResumeAll+0x12c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <xTaskResumeAll+0x106>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <xTaskResumeAll+0x134>)
 8003cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f000 fbcb 	bl	8004484 <vPortExitCritical>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20000658 	.word	0x20000658
 8003cfc:	20000630 	.word	0x20000630
 8003d00:	200005f0 	.word	0x200005f0
 8003d04:	20000638 	.word	0x20000638
 8003d08:	20000534 	.word	0x20000534
 8003d0c:	20000530 	.word	0x20000530
 8003d10:	20000644 	.word	0x20000644
 8003d14:	20000640 	.word	0x20000640
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <xTaskIncrementTick>:
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	4b4e      	ldr	r3, [pc, #312]	; (8003e60 <xTaskIncrementTick+0x144>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 808e 	bne.w	8003e4c <xTaskIncrementTick+0x130>
 8003d30:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <xTaskIncrementTick+0x148>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3301      	adds	r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	4a4a      	ldr	r2, [pc, #296]	; (8003e64 <xTaskIncrementTick+0x148>)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d120      	bne.n	8003d86 <xTaskIncrementTick+0x6a>
 8003d44:	4b48      	ldr	r3, [pc, #288]	; (8003e68 <xTaskIncrementTick+0x14c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <xTaskIncrementTick+0x48>
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <xTaskIncrementTick+0x46>
 8003d64:	4b40      	ldr	r3, [pc, #256]	; (8003e68 <xTaskIncrementTick+0x14c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <xTaskIncrementTick+0x150>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3e      	ldr	r2, [pc, #248]	; (8003e68 <xTaskIncrementTick+0x14c>)
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4a3e      	ldr	r2, [pc, #248]	; (8003e6c <xTaskIncrementTick+0x150>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <xTaskIncrementTick+0x154>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	4a3c      	ldr	r2, [pc, #240]	; (8003e70 <xTaskIncrementTick+0x154>)
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	f000 f99f 	bl	80040c4 <prvResetNextTaskUnblockTime>
 8003d86:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <xTaskIncrementTick+0x158>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d348      	bcc.n	8003e22 <xTaskIncrementTick+0x106>
 8003d90:	4b35      	ldr	r3, [pc, #212]	; (8003e68 <xTaskIncrementTick+0x14c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <xTaskIncrementTick+0x88>
 8003d9a:	4b36      	ldr	r3, [pc, #216]	; (8003e74 <xTaskIncrementTick+0x158>)
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e03e      	b.n	8003e22 <xTaskIncrementTick+0x106>
 8003da4:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <xTaskIncrementTick+0x14c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d203      	bcs.n	8003dc4 <xTaskIncrementTick+0xa8>
 8003dbc:	4a2d      	ldr	r2, [pc, #180]	; (8003e74 <xTaskIncrementTick+0x158>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e02e      	b.n	8003e22 <xTaskIncrementTick+0x106>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fc8a 	bl	80036e2 <uxListRemove>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <xTaskIncrementTick+0xc4>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3318      	adds	r3, #24
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fc81 	bl	80036e2 <uxListRemove>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	2201      	movs	r2, #1
 8003de6:	409a      	lsls	r2, r3
 8003de8:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <xTaskIncrementTick+0x15c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <xTaskIncrementTick+0x15c>)
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4a1f      	ldr	r2, [pc, #124]	; (8003e7c <xTaskIncrementTick+0x160>)
 8003e00:	441a      	add	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7ff fc0d 	bl	8003628 <vListInsertEnd>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	4b1b      	ldr	r3, [pc, #108]	; (8003e80 <xTaskIncrementTick+0x164>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3b9      	bcc.n	8003d90 <xTaskIncrementTick+0x74>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e7b6      	b.n	8003d90 <xTaskIncrementTick+0x74>
 8003e22:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <xTaskIncrementTick+0x164>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	4914      	ldr	r1, [pc, #80]	; (8003e7c <xTaskIncrementTick+0x160>)
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d901      	bls.n	8003e3e <xTaskIncrementTick+0x122>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <xTaskIncrementTick+0x168>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <xTaskIncrementTick+0x13a>
 8003e46:	2301      	movs	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e004      	b.n	8003e56 <xTaskIncrementTick+0x13a>
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <xTaskIncrementTick+0x16c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	4a0d      	ldr	r2, [pc, #52]	; (8003e88 <xTaskIncrementTick+0x16c>)
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000658 	.word	0x20000658
 8003e64:	20000634 	.word	0x20000634
 8003e68:	200005e8 	.word	0x200005e8
 8003e6c:	200005ec 	.word	0x200005ec
 8003e70:	20000648 	.word	0x20000648
 8003e74:	20000650 	.word	0x20000650
 8003e78:	20000638 	.word	0x20000638
 8003e7c:	20000534 	.word	0x20000534
 8003e80:	20000530 	.word	0x20000530
 8003e84:	20000644 	.word	0x20000644
 8003e88:	20000640 	.word	0x20000640

08003e8c <vTaskSwitchContext>:
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <vTaskSwitchContext+0xac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <vTaskSwitchContext+0x16>
 8003e9a:	4b28      	ldr	r3, [pc, #160]	; (8003f3c <vTaskSwitchContext+0xb0>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e044      	b.n	8003f2c <vTaskSwitchContext+0xa0>
 8003ea2:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <vTaskSwitchContext+0xb0>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <vTaskSwitchContext+0xb4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	72fb      	strb	r3, [r7, #11]
 8003eb6:	7afb      	ldrb	r3, [r7, #11]
 8003eb8:	f1c3 031f 	rsb	r3, r3, #31
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	4921      	ldr	r1, [pc, #132]	; (8003f44 <vTaskSwitchContext+0xb8>)
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <vTaskSwitchContext+0x5c>
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	bf00      	nop
 8003ee6:	e7fe      	b.n	8003ee6 <vTaskSwitchContext+0x5a>
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <vTaskSwitchContext+0xb8>)
 8003ef4:	4413      	add	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	3308      	adds	r3, #8
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d104      	bne.n	8003f18 <vTaskSwitchContext+0x8c>
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <vTaskSwitchContext+0xbc>)
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <vTaskSwitchContext+0xbc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	334c      	adds	r3, #76	; 0x4c
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <vTaskSwitchContext+0xc0>)
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	20000658 	.word	0x20000658
 8003f3c:	20000644 	.word	0x20000644
 8003f40:	20000638 	.word	0x20000638
 8003f44:	20000534 	.word	0x20000534
 8003f48:	20000530 	.word	0x20000530
 8003f4c:	20000010 	.word	0x20000010

08003f50 <prvIdleTask>:
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	f000 f852 	bl	8004000 <prvCheckTasksWaitingTermination>
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <prvIdleTask+0x28>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d9f9      	bls.n	8003f58 <prvIdleTask+0x8>
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <prvIdleTask+0x2c>)
 8003f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	e7f0      	b.n	8003f58 <prvIdleTask+0x8>
 8003f76:	bf00      	nop
 8003f78:	20000534 	.word	0x20000534
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <prvInitialiseTaskLists>:
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	e00c      	b.n	8003fa6 <prvInitialiseTaskLists+0x26>
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <prvInitialiseTaskLists+0x60>)
 8003f98:	4413      	add	r3, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fb17 	bl	80035ce <vListInitialise>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b06      	cmp	r3, #6
 8003faa:	d9ef      	bls.n	8003f8c <prvInitialiseTaskLists+0xc>
 8003fac:	480d      	ldr	r0, [pc, #52]	; (8003fe4 <prvInitialiseTaskLists+0x64>)
 8003fae:	f7ff fb0e 	bl	80035ce <vListInitialise>
 8003fb2:	480d      	ldr	r0, [pc, #52]	; (8003fe8 <prvInitialiseTaskLists+0x68>)
 8003fb4:	f7ff fb0b 	bl	80035ce <vListInitialise>
 8003fb8:	480c      	ldr	r0, [pc, #48]	; (8003fec <prvInitialiseTaskLists+0x6c>)
 8003fba:	f7ff fb08 	bl	80035ce <vListInitialise>
 8003fbe:	480c      	ldr	r0, [pc, #48]	; (8003ff0 <prvInitialiseTaskLists+0x70>)
 8003fc0:	f7ff fb05 	bl	80035ce <vListInitialise>
 8003fc4:	480b      	ldr	r0, [pc, #44]	; (8003ff4 <prvInitialiseTaskLists+0x74>)
 8003fc6:	f7ff fb02 	bl	80035ce <vListInitialise>
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <prvInitialiseTaskLists+0x78>)
 8003fcc:	4a05      	ldr	r2, [pc, #20]	; (8003fe4 <prvInitialiseTaskLists+0x64>)
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <prvInitialiseTaskLists+0x7c>)
 8003fd2:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <prvInitialiseTaskLists+0x68>)
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000534 	.word	0x20000534
 8003fe4:	200005c0 	.word	0x200005c0
 8003fe8:	200005d4 	.word	0x200005d4
 8003fec:	200005f0 	.word	0x200005f0
 8003ff0:	20000604 	.word	0x20000604
 8003ff4:	2000061c 	.word	0x2000061c
 8003ff8:	200005e8 	.word	0x200005e8
 8003ffc:	200005ec 	.word	0x200005ec

08004000 <prvCheckTasksWaitingTermination>:
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	e019      	b.n	800403c <prvCheckTasksWaitingTermination+0x3c>
 8004008:	f000 fa0c 	bl	8004424 <vPortEnterCritical>
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <prvCheckTasksWaitingTermination+0x50>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fb62 	bl	80036e2 <uxListRemove>
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <prvCheckTasksWaitingTermination+0x54>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3b01      	subs	r3, #1
 8004024:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <prvCheckTasksWaitingTermination+0x54>)
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <prvCheckTasksWaitingTermination+0x58>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <prvCheckTasksWaitingTermination+0x58>)
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	f000 fa27 	bl	8004484 <vPortExitCritical>
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f810 	bl	800405c <prvDeleteTCB>
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <prvCheckTasksWaitingTermination+0x58>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e1      	bne.n	8004008 <prvCheckTasksWaitingTermination+0x8>
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000604 	.word	0x20000604
 8004054:	20000630 	.word	0x20000630
 8004058:	20000618 	.word	0x20000618

0800405c <prvDeleteTCB>:
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	334c      	adds	r3, #76	; 0x4c
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fce3 	bl	8004a34 <_reclaim_reent>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d108      	bne.n	800408a <prvDeleteTCB+0x2e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fb7f 	bl	8004780 <vPortFree>
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fb7c 	bl	8004780 <vPortFree>
 8004088:	e018      	b.n	80040bc <prvDeleteTCB+0x60>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d103      	bne.n	800409c <prvDeleteTCB+0x40>
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fb73 	bl	8004780 <vPortFree>
 800409a:	e00f      	b.n	80040bc <prvDeleteTCB+0x60>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d00a      	beq.n	80040bc <prvDeleteTCB+0x60>
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	bf00      	nop
 80040ba:	e7fe      	b.n	80040ba <prvDeleteTCB+0x5e>
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <prvResetNextTaskUnblockTime>:
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <prvResetNextTaskUnblockTime+0x38>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <prvResetNextTaskUnblockTime+0x1a>
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <prvResetNextTaskUnblockTime+0x3c>)
 80040d6:	f04f 32ff 	mov.w	r2, #4294967295
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e008      	b.n	80040f0 <prvResetNextTaskUnblockTime+0x2c>
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <prvResetNextTaskUnblockTime+0x38>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <prvResetNextTaskUnblockTime+0x3c>)
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	200005e8 	.word	0x200005e8
 8004100:	20000650 	.word	0x20000650

08004104 <prvAddCurrentTaskToDelayedList>:
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
 800410e:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	4b28      	ldr	r3, [pc, #160]	; (80041b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3304      	adds	r3, #4
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fae1 	bl	80036e2 <uxListRemove>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <prvAddCurrentTaskToDelayedList+0x3a>
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	2201      	movs	r2, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	43da      	mvns	r2, r3
 8004134:	4b21      	ldr	r3, [pc, #132]	; (80041bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4013      	ands	r3, r2
 800413a:	4a20      	ldr	r2, [pc, #128]	; (80041bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d10a      	bne.n	800415c <prvAddCurrentTaskToDelayedList+0x58>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <prvAddCurrentTaskToDelayedList+0x58>
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3304      	adds	r3, #4
 8004152:	4619      	mov	r1, r3
 8004154:	481a      	ldr	r0, [pc, #104]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004156:	f7ff fa67 	bl	8003628 <vListInsertEnd>
 800415a:	e026      	b.n	80041aa <prvAddCurrentTaskToDelayedList+0xa6>
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	429a      	cmp	r2, r3
 8004172:	d209      	bcs.n	8004188 <prvAddCurrentTaskToDelayedList+0x84>
 8004174:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3304      	adds	r3, #4
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f7ff fa75 	bl	8003670 <vListInsert>
 8004186:	e010      	b.n	80041aa <prvAddCurrentTaskToDelayedList+0xa6>
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3304      	adds	r3, #4
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f7ff fa6b 	bl	8003670 <vListInsert>
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d202      	bcs.n	80041aa <prvAddCurrentTaskToDelayedList+0xa6>
 80041a4:	4a09      	ldr	r2, [pc, #36]	; (80041cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000634 	.word	0x20000634
 80041b8:	20000530 	.word	0x20000530
 80041bc:	20000638 	.word	0x20000638
 80041c0:	2000061c 	.word	0x2000061c
 80041c4:	200005ec 	.word	0x200005ec
 80041c8:	200005e8 	.word	0x200005e8
 80041cc:	20000650 	.word	0x20000650

080041d0 <pxPortInitialiseStack>:
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3b04      	subs	r3, #4
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3b04      	subs	r3, #4
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0201 	bic.w	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b04      	subs	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <pxPortInitialiseStack+0x64>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3b14      	subs	r3, #20
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b04      	subs	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f06f 0202 	mvn.w	r2, #2
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b20      	subs	r3, #32
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	08004239 	.word	0x08004239

08004238 <prvTaskExitError>:
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <prvTaskExitError+0x54>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424a:	d00a      	beq.n	8004262 <prvTaskExitError+0x2a>
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <prvTaskExitError+0x28>
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0fc      	beq.n	8004278 <prvTaskExitError+0x40>
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	2000000c 	.word	0x2000000c

08004290 <SVC_Handler>:
 8004290:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <pxCurrentTCBConst2>)
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	6808      	ldr	r0, [r1, #0]
 8004296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429a:	f380 8809 	msr	PSP, r0
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8811 	msr	BASEPRI, r0
 80042aa:	4770      	bx	lr
 80042ac:	f3af 8000 	nop.w

080042b0 <pxCurrentTCBConst2>:
 80042b0:	20000530 	.word	0x20000530
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop

080042b8 <prvPortStartFirstTask>:
 80042b8:	4808      	ldr	r0, [pc, #32]	; (80042dc <prvPortStartFirstTask+0x24>)
 80042ba:	6800      	ldr	r0, [r0, #0]
 80042bc:	6800      	ldr	r0, [r0, #0]
 80042be:	f380 8808 	msr	MSP, r0
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f380 8814 	msr	CONTROL, r0
 80042ca:	b662      	cpsie	i
 80042cc:	b661      	cpsie	f
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	df00      	svc	0
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	e000ed08 	.word	0xe000ed08

080042e0 <xPortStartScheduler>:
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4b46      	ldr	r3, [pc, #280]	; (8004400 <xPortStartScheduler+0x120>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a46      	ldr	r2, [pc, #280]	; (8004404 <xPortStartScheduler+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10a      	bne.n	8004306 <xPortStartScheduler+0x26>
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xPortStartScheduler+0x24>
 8004306:	4b3e      	ldr	r3, [pc, #248]	; (8004400 <xPortStartScheduler+0x120>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3f      	ldr	r2, [pc, #252]	; (8004408 <xPortStartScheduler+0x128>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10a      	bne.n	8004326 <xPortStartScheduler+0x46>
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xPortStartScheduler+0x44>
 8004326:	4b39      	ldr	r3, [pc, #228]	; (800440c <xPortStartScheduler+0x12c>)
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	22ff      	movs	r2, #255	; 0xff
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	70fb      	strb	r3, [r7, #3]
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4b31      	ldr	r3, [pc, #196]	; (8004410 <xPortStartScheduler+0x130>)
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	4b31      	ldr	r3, [pc, #196]	; (8004414 <xPortStartScheduler+0x134>)
 8004350:	2207      	movs	r2, #7
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	e009      	b.n	800436a <xPortStartScheduler+0x8a>
 8004356:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <xPortStartScheduler+0x134>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3b01      	subs	r3, #1
 800435c:	4a2d      	ldr	r2, [pc, #180]	; (8004414 <xPortStartScheduler+0x134>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	b2db      	uxtb	r3, r3
 8004368:	70fb      	strb	r3, [r7, #3]
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d0ef      	beq.n	8004356 <xPortStartScheduler+0x76>
 8004376:	4b27      	ldr	r3, [pc, #156]	; (8004414 <xPortStartScheduler+0x134>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1c3 0307 	rsb	r3, r3, #7
 800437e:	2b04      	cmp	r3, #4
 8004380:	d00a      	beq.n	8004398 <xPortStartScheduler+0xb8>
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <xPortStartScheduler+0xb6>
 8004398:	4b1e      	ldr	r3, [pc, #120]	; (8004414 <xPortStartScheduler+0x134>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <xPortStartScheduler+0x134>)
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b1c      	ldr	r3, [pc, #112]	; (8004414 <xPortStartScheduler+0x134>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043aa:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <xPortStartScheduler+0x134>)
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <xPortStartScheduler+0x138>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <xPortStartScheduler+0x138>)
 80043bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <xPortStartScheduler+0x138>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a14      	ldr	r2, [pc, #80]	; (8004418 <xPortStartScheduler+0x138>)
 80043c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	f000 f8dd 	bl	800458c <vPortSetupTimerInterrupt>
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <xPortStartScheduler+0x13c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f000 f8fc 	bl	80045d4 <vPortEnableVFP>
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <xPortStartScheduler+0x140>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0f      	ldr	r2, [pc, #60]	; (8004420 <xPortStartScheduler+0x140>)
 80043e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	f7ff ff66 	bl	80042b8 <prvPortStartFirstTask>
 80043ec:	f7ff fd4e 	bl	8003e8c <vTaskSwitchContext>
 80043f0:	f7ff ff22 	bl	8004238 <prvTaskExitError>
 80043f4:	2300      	movs	r3, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000ed00 	.word	0xe000ed00
 8004404:	410fc271 	.word	0x410fc271
 8004408:	410fc270 	.word	0x410fc270
 800440c:	e000e400 	.word	0xe000e400
 8004410:	2000065c 	.word	0x2000065c
 8004414:	20000660 	.word	0x20000660
 8004418:	e000ed20 	.word	0xe000ed20
 800441c:	2000000c 	.word	0x2000000c
 8004420:	e000ef34 	.word	0xe000ef34

08004424 <vPortEnterCritical>:
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	bf00      	nop
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <vPortEnterCritical+0x58>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	4a0d      	ldr	r2, [pc, #52]	; (800447c <vPortEnterCritical+0x58>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <vPortEnterCritical+0x58>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10f      	bne.n	8004470 <vPortEnterCritical+0x4c>
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <vPortEnterCritical+0x5c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <vPortEnterCritical+0x4c>
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <vPortEnterCritical+0x4a>
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	2000000c 	.word	0x2000000c
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <vPortExitCritical>:
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <vPortExitCritical+0x50>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <vPortExitCritical+0x24>
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <vPortExitCritical+0x22>
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <vPortExitCritical+0x50>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <vPortExitCritical+0x50>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <vPortExitCritical+0x50>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d105      	bne.n	80044c6 <vPortExitCritical+0x42>
 80044ba:	2300      	movs	r3, #0
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	2000000c 	.word	0x2000000c
	...

080044e0 <PendSV_Handler>:
 80044e0:	f3ef 8009 	mrs	r0, PSP
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <pxCurrentTCBConst>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	f01e 0f10 	tst.w	lr, #16
 80044f0:	bf08      	it	eq
 80044f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	6010      	str	r0, [r2, #0]
 80044fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004500:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004504:	f380 8811 	msr	BASEPRI, r0
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f7ff fcbc 	bl	8003e8c <vTaskSwitchContext>
 8004514:	f04f 0000 	mov.w	r0, #0
 8004518:	f380 8811 	msr	BASEPRI, r0
 800451c:	bc09      	pop	{r0, r3}
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	6808      	ldr	r0, [r1, #0]
 8004522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004526:	f01e 0f10 	tst.w	lr, #16
 800452a:	bf08      	it	eq
 800452c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004530:	f380 8809 	msr	PSP, r0
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst>:
 8004540:	20000530 	.word	0x20000530
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <SysTick_Handler>:
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	607b      	str	r3, [r7, #4]
 8004560:	bf00      	nop
 8004562:	f7ff fbdb 	bl	8003d1c <xTaskIncrementTick>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <SysTick_Handler+0x2c>
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <SysTick_Handler+0x40>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <vPortSetupTimerInterrupt>:
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <vPortSetupTimerInterrupt+0x34>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <vPortSetupTimerInterrupt+0x38>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <vPortSetupTimerInterrupt+0x3c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <vPortSetupTimerInterrupt+0x40>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	099b      	lsrs	r3, r3, #6
 80045a8:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <vPortSetupTimerInterrupt+0x44>)
 80045aa:	3b01      	subs	r3, #1
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <vPortSetupTimerInterrupt+0x34>)
 80045b0:	2207      	movs	r2, #7
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000e010 	.word	0xe000e010
 80045c4:	e000e018 	.word	0xe000e018
 80045c8:	20000000 	.word	0x20000000
 80045cc:	10624dd3 	.word	0x10624dd3
 80045d0:	e000e014 	.word	0xe000e014

080045d4 <vPortEnableVFP>:
 80045d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045e4 <vPortEnableVFP+0x10>
 80045d8:	6801      	ldr	r1, [r0, #0]
 80045da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045de:	6001      	str	r1, [r0, #0]
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	e000ed88 	.word	0xe000ed88

080045e8 <pvPortMalloc>:
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	f7ff fae8 	bl	8003bc8 <vTaskSuspendAll>
 80045f8:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <pvPortMalloc+0x180>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <pvPortMalloc+0x1c>
 8004600:	f000 f920 	bl	8004844 <prvHeapInit>
 8004604:	4b59      	ldr	r3, [pc, #356]	; (800476c <pvPortMalloc+0x184>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	f040 8093 	bne.w	8004738 <pvPortMalloc+0x150>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01d      	beq.n	8004654 <pvPortMalloc+0x6c>
 8004618:	2208      	movs	r2, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	2b00      	cmp	r3, #0
 8004628:	d014      	beq.n	8004654 <pvPortMalloc+0x6c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f023 0307 	bic.w	r3, r3, #7
 8004630:	3308      	adds	r3, #8
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <pvPortMalloc+0x6c>
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	bf00      	nop
 8004652:	e7fe      	b.n	8004652 <pvPortMalloc+0x6a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d06e      	beq.n	8004738 <pvPortMalloc+0x150>
 800465a:	4b45      	ldr	r3, [pc, #276]	; (8004770 <pvPortMalloc+0x188>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d869      	bhi.n	8004738 <pvPortMalloc+0x150>
 8004664:	4b43      	ldr	r3, [pc, #268]	; (8004774 <pvPortMalloc+0x18c>)
 8004666:	623b      	str	r3, [r7, #32]
 8004668:	4b42      	ldr	r3, [pc, #264]	; (8004774 <pvPortMalloc+0x18c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	e004      	b.n	800467a <pvPortMalloc+0x92>
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	623b      	str	r3, [r7, #32]
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	d903      	bls.n	800468c <pvPortMalloc+0xa4>
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f1      	bne.n	8004670 <pvPortMalloc+0x88>
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <pvPortMalloc+0x180>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004692:	429a      	cmp	r2, r3
 8004694:	d050      	beq.n	8004738 <pvPortMalloc+0x150>
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2208      	movs	r2, #8
 800469c:	4413      	add	r3, r2
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	1ad2      	subs	r2, r2, r3
 80046b0:	2308      	movs	r3, #8
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d91f      	bls.n	80046f8 <pvPortMalloc+0x110>
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <pvPortMalloc+0xf8>
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <pvPortMalloc+0xf6>
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	1ad2      	subs	r2, r2, r3
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	605a      	str	r2, [r3, #4]
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	69b8      	ldr	r0, [r7, #24]
 80046f4:	f000 f908 	bl	8004908 <prvInsertBlockIntoFreeList>
 80046f8:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <pvPortMalloc+0x188>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <pvPortMalloc+0x188>)
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <pvPortMalloc+0x188>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <pvPortMalloc+0x190>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d203      	bcs.n	800471a <pvPortMalloc+0x132>
 8004712:	4b17      	ldr	r3, [pc, #92]	; (8004770 <pvPortMalloc+0x188>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <pvPortMalloc+0x190>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <pvPortMalloc+0x184>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	431a      	orrs	r2, r3
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	605a      	str	r2, [r3, #4]
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <pvPortMalloc+0x194>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4a11      	ldr	r2, [pc, #68]	; (800477c <pvPortMalloc+0x194>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	f7ff fa54 	bl	8003be4 <xTaskResumeAll>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <pvPortMalloc+0x174>
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	bf00      	nop
 800475a:	e7fe      	b.n	800475a <pvPortMalloc+0x172>
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	4618      	mov	r0, r3
 8004760:	3728      	adds	r7, #40	; 0x28
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20001224 	.word	0x20001224
 800476c:	20001238 	.word	0x20001238
 8004770:	20001228 	.word	0x20001228
 8004774:	2000121c 	.word	0x2000121c
 8004778:	2000122c 	.word	0x2000122c
 800477c:	20001230 	.word	0x20001230

08004780 <vPortFree>:
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04d      	beq.n	800482e <vPortFree+0xae>
 8004792:	2308      	movs	r3, #8
 8004794:	425b      	negs	r3, r3
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4413      	add	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <vPortFree+0xb8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <vPortFree+0x44>
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <vPortFree+0x42>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <vPortFree+0x62>
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <vPortFree+0x60>
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <vPortFree+0xb8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01e      	beq.n	800482e <vPortFree+0xae>
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11a      	bne.n	800482e <vPortFree+0xae>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <vPortFree+0xb8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	43db      	mvns	r3, r3
 8004802:	401a      	ands	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	f7ff f9de 	bl	8003bc8 <vTaskSuspendAll>
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4b0a      	ldr	r3, [pc, #40]	; (800483c <vPortFree+0xbc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4413      	add	r3, r2
 8004816:	4a09      	ldr	r2, [pc, #36]	; (800483c <vPortFree+0xbc>)
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	6938      	ldr	r0, [r7, #16]
 800481c:	f000 f874 	bl	8004908 <prvInsertBlockIntoFreeList>
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <vPortFree+0xc0>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	4a06      	ldr	r2, [pc, #24]	; (8004840 <vPortFree+0xc0>)
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	f7ff f9db 	bl	8003be4 <xTaskResumeAll>
 800482e:	bf00      	nop
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20001238 	.word	0x20001238
 800483c:	20001228 	.word	0x20001228
 8004840:	20001234 	.word	0x20001234

08004844 <prvHeapInit>:
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <prvHeapInit+0xac>)
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <prvHeapInit+0x34>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3307      	adds	r3, #7
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0307 	bic.w	r3, r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	4a1f      	ldr	r2, [pc, #124]	; (80048f0 <prvHeapInit+0xac>)
 8004874:	4413      	add	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <prvHeapInit+0xb0>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <prvHeapInit+0xb0>)
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4413      	add	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	2208      	movs	r2, #8
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0307 	bic.w	r3, r3, #7
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <prvHeapInit+0xb4>)
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <prvHeapInit+0xb4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <prvHeapInit+0xb4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	1ad2      	subs	r2, r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <prvHeapInit+0xb4>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <prvHeapInit+0xb8>)
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a09      	ldr	r2, [pc, #36]	; (8004900 <prvHeapInit+0xbc>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <prvHeapInit+0xc0>)
 80048de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	20000664 	.word	0x20000664
 80048f4:	2000121c 	.word	0x2000121c
 80048f8:	20001224 	.word	0x20001224
 80048fc:	2000122c 	.word	0x2000122c
 8004900:	20001228 	.word	0x20001228
 8004904:	20001238 	.word	0x20001238

08004908 <prvInsertBlockIntoFreeList>:
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	4b28      	ldr	r3, [pc, #160]	; (80049b4 <prvInsertBlockIntoFreeList+0xac>)
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e002      	b.n	800491c <prvInsertBlockIntoFreeList+0x14>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d8f7      	bhi.n	8004916 <prvInsertBlockIntoFreeList+0xe>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	4413      	add	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d108      	bne.n	800494a <prvInsertBlockIntoFreeList+0x42>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	441a      	add	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	441a      	add	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d118      	bne.n	8004990 <prvInsertBlockIntoFreeList+0x88>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d00d      	beq.n	8004986 <prvInsertBlockIntoFreeList+0x7e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e008      	b.n	8004998 <prvInsertBlockIntoFreeList+0x90>
 8004986:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e003      	b.n	8004998 <prvInsertBlockIntoFreeList+0x90>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d002      	beq.n	80049a6 <prvInsertBlockIntoFreeList+0x9e>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000121c 	.word	0x2000121c
 80049b8:	20001224 	.word	0x20001224

080049bc <__libc_init_array>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	4d0d      	ldr	r5, [pc, #52]	; (80049f4 <__libc_init_array+0x38>)
 80049c0:	4c0d      	ldr	r4, [pc, #52]	; (80049f8 <__libc_init_array+0x3c>)
 80049c2:	1b64      	subs	r4, r4, r5
 80049c4:	10a4      	asrs	r4, r4, #2
 80049c6:	2600      	movs	r6, #0
 80049c8:	42a6      	cmp	r6, r4
 80049ca:	d109      	bne.n	80049e0 <__libc_init_array+0x24>
 80049cc:	4d0b      	ldr	r5, [pc, #44]	; (80049fc <__libc_init_array+0x40>)
 80049ce:	4c0c      	ldr	r4, [pc, #48]	; (8004a00 <__libc_init_array+0x44>)
 80049d0:	f000 f8e4 	bl	8004b9c <_init>
 80049d4:	1b64      	subs	r4, r4, r5
 80049d6:	10a4      	asrs	r4, r4, #2
 80049d8:	2600      	movs	r6, #0
 80049da:	42a6      	cmp	r6, r4
 80049dc:	d105      	bne.n	80049ea <__libc_init_array+0x2e>
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e4:	4798      	blx	r3
 80049e6:	3601      	adds	r6, #1
 80049e8:	e7ee      	b.n	80049c8 <__libc_init_array+0xc>
 80049ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ee:	4798      	blx	r3
 80049f0:	3601      	adds	r6, #1
 80049f2:	e7f2      	b.n	80049da <__libc_init_array+0x1e>
 80049f4:	08004c8c 	.word	0x08004c8c
 80049f8:	08004c8c 	.word	0x08004c8c
 80049fc:	08004c8c 	.word	0x08004c8c
 8004a00:	08004c90 	.word	0x08004c90

08004a04 <__retarget_lock_acquire_recursive>:
 8004a04:	4770      	bx	lr

08004a06 <__retarget_lock_release_recursive>:
 8004a06:	4770      	bx	lr

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <cleanup_glue>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	6809      	ldr	r1, [r1, #0]
 8004a1e:	4605      	mov	r5, r0
 8004a20:	b109      	cbz	r1, 8004a26 <cleanup_glue+0xe>
 8004a22:	f7ff fff9 	bl	8004a18 <cleanup_glue>
 8004a26:	4621      	mov	r1, r4
 8004a28:	4628      	mov	r0, r5
 8004a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2e:	f000 b869 	b.w	8004b04 <_free_r>
	...

08004a34 <_reclaim_reent>:
 8004a34:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <_reclaim_reent+0xb4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4283      	cmp	r3, r0
 8004a3a:	b570      	push	{r4, r5, r6, lr}
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	d051      	beq.n	8004ae4 <_reclaim_reent+0xb0>
 8004a40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004a42:	b143      	cbz	r3, 8004a56 <_reclaim_reent+0x22>
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d14a      	bne.n	8004ae0 <_reclaim_reent+0xac>
 8004a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a4c:	6819      	ldr	r1, [r3, #0]
 8004a4e:	b111      	cbz	r1, 8004a56 <_reclaim_reent+0x22>
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 f857 	bl	8004b04 <_free_r>
 8004a56:	6961      	ldr	r1, [r4, #20]
 8004a58:	b111      	cbz	r1, 8004a60 <_reclaim_reent+0x2c>
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 f852 	bl	8004b04 <_free_r>
 8004a60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004a62:	b111      	cbz	r1, 8004a6a <_reclaim_reent+0x36>
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 f84d 	bl	8004b04 <_free_r>
 8004a6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a6c:	b111      	cbz	r1, 8004a74 <_reclaim_reent+0x40>
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f000 f848 	bl	8004b04 <_free_r>
 8004a74:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004a76:	b111      	cbz	r1, 8004a7e <_reclaim_reent+0x4a>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 f843 	bl	8004b04 <_free_r>
 8004a7e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a80:	b111      	cbz	r1, 8004a88 <_reclaim_reent+0x54>
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 f83e 	bl	8004b04 <_free_r>
 8004a88:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a8a:	b111      	cbz	r1, 8004a92 <_reclaim_reent+0x5e>
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 f839 	bl	8004b04 <_free_r>
 8004a92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004a94:	b111      	cbz	r1, 8004a9c <_reclaim_reent+0x68>
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 f834 	bl	8004b04 <_free_r>
 8004a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a9e:	b111      	cbz	r1, 8004aa6 <_reclaim_reent+0x72>
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f000 f82f 	bl	8004b04 <_free_r>
 8004aa6:	69a3      	ldr	r3, [r4, #24]
 8004aa8:	b1e3      	cbz	r3, 8004ae4 <_reclaim_reent+0xb0>
 8004aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004aac:	4620      	mov	r0, r4
 8004aae:	4798      	blx	r3
 8004ab0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ab2:	b1b9      	cbz	r1, 8004ae4 <_reclaim_reent+0xb0>
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004aba:	f7ff bfad 	b.w	8004a18 <cleanup_glue>
 8004abe:	5949      	ldr	r1, [r1, r5]
 8004ac0:	b941      	cbnz	r1, 8004ad4 <_reclaim_reent+0xa0>
 8004ac2:	3504      	adds	r5, #4
 8004ac4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac6:	2d80      	cmp	r5, #128	; 0x80
 8004ac8:	68d9      	ldr	r1, [r3, #12]
 8004aca:	d1f8      	bne.n	8004abe <_reclaim_reent+0x8a>
 8004acc:	4620      	mov	r0, r4
 8004ace:	f000 f819 	bl	8004b04 <_free_r>
 8004ad2:	e7ba      	b.n	8004a4a <_reclaim_reent+0x16>
 8004ad4:	680e      	ldr	r6, [r1, #0]
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 f814 	bl	8004b04 <_free_r>
 8004adc:	4631      	mov	r1, r6
 8004ade:	e7ef      	b.n	8004ac0 <_reclaim_reent+0x8c>
 8004ae0:	2500      	movs	r5, #0
 8004ae2:	e7ef      	b.n	8004ac4 <_reclaim_reent+0x90>
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000010 	.word	0x20000010

08004aec <__malloc_lock>:
 8004aec:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__malloc_lock+0x8>)
 8004aee:	f7ff bf89 	b.w	8004a04 <__retarget_lock_acquire_recursive>
 8004af2:	bf00      	nop
 8004af4:	2000123c 	.word	0x2000123c

08004af8 <__malloc_unlock>:
 8004af8:	4801      	ldr	r0, [pc, #4]	; (8004b00 <__malloc_unlock+0x8>)
 8004afa:	f7ff bf84 	b.w	8004a06 <__retarget_lock_release_recursive>
 8004afe:	bf00      	nop
 8004b00:	2000123c 	.word	0x2000123c

08004b04 <_free_r>:
 8004b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d044      	beq.n	8004b94 <_free_r+0x90>
 8004b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b0e:	9001      	str	r0, [sp, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f1a1 0404 	sub.w	r4, r1, #4
 8004b16:	bfb8      	it	lt
 8004b18:	18e4      	addlt	r4, r4, r3
 8004b1a:	f7ff ffe7 	bl	8004aec <__malloc_lock>
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <_free_r+0x94>)
 8004b20:	9801      	ldr	r0, [sp, #4]
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	b933      	cbnz	r3, 8004b34 <_free_r+0x30>
 8004b26:	6063      	str	r3, [r4, #4]
 8004b28:	6014      	str	r4, [r2, #0]
 8004b2a:	b003      	add	sp, #12
 8004b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b30:	f7ff bfe2 	b.w	8004af8 <__malloc_unlock>
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	d908      	bls.n	8004b4a <_free_r+0x46>
 8004b38:	6825      	ldr	r5, [r4, #0]
 8004b3a:	1961      	adds	r1, r4, r5
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	bf01      	itttt	eq
 8004b40:	6819      	ldreq	r1, [r3, #0]
 8004b42:	685b      	ldreq	r3, [r3, #4]
 8004b44:	1949      	addeq	r1, r1, r5
 8004b46:	6021      	streq	r1, [r4, #0]
 8004b48:	e7ed      	b.n	8004b26 <_free_r+0x22>
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b10b      	cbz	r3, 8004b54 <_free_r+0x50>
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d9fa      	bls.n	8004b4a <_free_r+0x46>
 8004b54:	6811      	ldr	r1, [r2, #0]
 8004b56:	1855      	adds	r5, r2, r1
 8004b58:	42a5      	cmp	r5, r4
 8004b5a:	d10b      	bne.n	8004b74 <_free_r+0x70>
 8004b5c:	6824      	ldr	r4, [r4, #0]
 8004b5e:	4421      	add	r1, r4
 8004b60:	1854      	adds	r4, r2, r1
 8004b62:	42a3      	cmp	r3, r4
 8004b64:	6011      	str	r1, [r2, #0]
 8004b66:	d1e0      	bne.n	8004b2a <_free_r+0x26>
 8004b68:	681c      	ldr	r4, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6053      	str	r3, [r2, #4]
 8004b6e:	4421      	add	r1, r4
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	e7da      	b.n	8004b2a <_free_r+0x26>
 8004b74:	d902      	bls.n	8004b7c <_free_r+0x78>
 8004b76:	230c      	movs	r3, #12
 8004b78:	6003      	str	r3, [r0, #0]
 8004b7a:	e7d6      	b.n	8004b2a <_free_r+0x26>
 8004b7c:	6825      	ldr	r5, [r4, #0]
 8004b7e:	1961      	adds	r1, r4, r5
 8004b80:	428b      	cmp	r3, r1
 8004b82:	bf04      	itt	eq
 8004b84:	6819      	ldreq	r1, [r3, #0]
 8004b86:	685b      	ldreq	r3, [r3, #4]
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	bf04      	itt	eq
 8004b8c:	1949      	addeq	r1, r1, r5
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	6054      	str	r4, [r2, #4]
 8004b92:	e7ca      	b.n	8004b2a <_free_r+0x26>
 8004b94:	b003      	add	sp, #12
 8004b96:	bd30      	pop	{r4, r5, pc}
 8004b98:	20001240 	.word	0x20001240

08004b9c <_init>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	bf00      	nop
 8004ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba2:	bc08      	pop	{r3}
 8004ba4:	469e      	mov	lr, r3
 8004ba6:	4770      	bx	lr

08004ba8 <_fini>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr
