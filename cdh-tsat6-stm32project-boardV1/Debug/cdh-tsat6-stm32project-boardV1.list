
cdh-tsat6-stm32project-boardV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800603c  0800603c  0001603c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006154  08006154  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006154  08006154  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006154  08006154  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800615c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001204  20000074  080061d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001278  080061d0  00021278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001948e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c0  00000000  00000000  00039532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0003cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f0  00000000  00000000  0003e490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f26  00000000  00000000  0003f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018598  00000000  00000000  000668a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9ea7  00000000  00000000  0007ee3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168ce5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006530  00000000  00000000  00168d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006024 	.word	0x08006024

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006024 	.word	0x08006024

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <boot_CAN>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
void boot_CAN(CAN_HandleTypeDef *hcan1){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	// Turn on CANBus
	HAL_CAN_Start(hcan1);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 fecc 	bl	8001026 <HAL_CAN_Start>

	// Turn on interrupts
	HAL_CAN_ActivateNotification(hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800028e:	2102      	movs	r1, #2
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f001 f8ee 	bl	8001472 <HAL_CAN_ActivateNotification>


	// TX Message Parameters
	TxMessage.StdId = 0x1;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <boot_CAN+0x38>)
 8000298:	2201      	movs	r2, #1
 800029a:	601a      	str	r2, [r3, #0]
	TxMessage.IDE = CAN_ID_STD;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <boot_CAN+0x38>)
 800029e:	2200      	movs	r2, #0
 80002a0:	609a      	str	r2, [r3, #8]
	TxMessage.RTR = CAN_RTR_DATA;
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <boot_CAN+0x38>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	60da      	str	r2, [r3, #12]
	TxMessage.DLC = 8;
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <boot_CAN+0x38>)
 80002aa:	2208      	movs	r2, #8
 80002ac:	611a      	str	r2, [r3, #16]
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000090 	.word	0x20000090

080002bc <CAN_transmit_message>:
 * @brief Used to send messages over CAN
 * @param hcan1 The CANBUS object to send the message over\
 * @param message A 8 byte message
 */
void CAN_transmit_message(CAN_HandleTypeDef *hcan1, uint8_t message[])
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
  printf("sent");
 80002c6:	4806      	ldr	r0, [pc, #24]	; (80002e0 <CAN_transmit_message+0x24>)
 80002c8:	f005 f840 	bl	800534c <iprintf>
  HAL_CAN_AddTxMessage(hcan1,&TxMessage,message,&TxMailbox);
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <CAN_transmit_message+0x28>)
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	4905      	ldr	r1, [pc, #20]	; (80002e8 <CAN_transmit_message+0x2c>)
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f000 feeb 	bl	80010ae <HAL_CAN_AddTxMessage>
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	0800603c 	.word	0x0800603c
 80002e4:	200000c4 	.word	0x200000c4
 80002e8:	20000090 	.word	0x20000090

080002ec <CAN_MESSAGE_RECEIVED>:

void CAN_MESSAGE_RECEIVED(CAN_HandleTypeDef *hcan1){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	  HAL_CAN_GetRxMessage(hcan1,CAN_RX_FIFO0,&RxMessage,RxData);
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <CAN_MESSAGE_RECEIVED+0x1c>)
 80002f6:	4a05      	ldr	r2, [pc, #20]	; (800030c <CAN_MESSAGE_RECEIVED+0x20>)
 80002f8:	2100      	movs	r1, #0
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 ffa7 	bl	800124e <HAL_CAN_GetRxMessage>
	  return;
 8000300:	bf00      	nop
}
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	200000c8 	.word	0x200000c8
 800030c:	200000a8 	.word	0x200000a8

08000310 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	4a07      	ldr	r2, [pc, #28]	; (800033c <vApplicationGetIdleTaskMemory+0x2c>)
 8000320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	4a06      	ldr	r2, [pc, #24]	; (8000340 <vApplicationGetIdleTaskMemory+0x30>)
 8000326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	200000d0 	.word	0x200000d0
 8000340:	20000184 	.word	0x20000184

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b5b0      	push	{r4, r5, r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034a:	f000 fd38 	bl	8000dbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034e:	f000 f843 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000352:	f000 f9bb 	bl	80006cc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000356:	f000 f89d 	bl	8000494 <MX_CAN1_Init>
  MX_SPI1_Init();
 800035a:	f000 f8fd 	bl	8000558 <MX_SPI1_Init>
  MX_SPI2_Init();
 800035e:	f000 f939 	bl	80005d4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000362:	f000 f975 	bl	8000650 <MX_SPI3_Init>
  MX_RTC_Init();
 8000366:	f000 f8cf 	bl	8000508 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Temporary Message
  TxData[0] = 0x4;
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <main+0x84>)
 800036c:	2204      	movs	r2, #4
 800036e:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x2;
 8000370:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <main+0x84>)
 8000372:	2202      	movs	r2, #2
 8000374:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x0;
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <main+0x84>)
 8000378:	2200      	movs	r2, #0
 800037a:	709a      	strb	r2, [r3, #2]
  for(int i = 3; i < 7; ++i){
 800037c:	2303      	movs	r3, #3
 800037e:	61fb      	str	r3, [r7, #28]
 8000380:	e007      	b.n	8000392 <main+0x4e>
	  TxData[i] = 0x0;
 8000382:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <main+0x84>)
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	4413      	add	r3, r2
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
  for(int i = 3; i < 7; ++i){
 800038c:	69fb      	ldr	r3, [r7, #28]
 800038e:	3301      	adds	r3, #1
 8000390:	61fb      	str	r3, [r7, #28]
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	2b06      	cmp	r3, #6
 8000396:	ddf4      	ble.n	8000382 <main+0x3e>
  }
  CAN_transmit_message(&hcan1,TxData);
 8000398:	490b      	ldr	r1, [pc, #44]	; (80003c8 <main+0x84>)
 800039a:	480c      	ldr	r0, [pc, #48]	; (80003cc <main+0x88>)
 800039c:	f7ff ff8e 	bl	80002bc <CAN_transmit_message>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <main+0x8c>)
 80003a2:	463c      	mov	r4, r7
 80003a4:	461d      	mov	r5, r3
 80003a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003b2:	463b      	mov	r3, r7
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 fbaf 	bl	8003b1a <osThreadCreate>
 80003bc:	4603      	mov	r3, r0
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <main+0x90>)
 80003c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003c2:	f003 fba3 	bl	8003b0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <main+0x82>
 80003c8:	20000500 	.word	0x20000500
 80003cc:	20000384 	.word	0x20000384
 80003d0:	08006050 	.word	0x08006050
 80003d4:	200004fc 	.word	0x200004fc

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b096      	sub	sp, #88	; 0x58
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2244      	movs	r2, #68	; 0x44
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 ff13 	bl	8005212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	463b      	mov	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003fe:	f001 fd1f 	bl	8001e40 <HAL_PWREx_ControlVoltageScaling>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000408:	f000 fa0c 	bl	8000824 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800040c:	f001 fcfa 	bl	8001e04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000410:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <SystemClock_Config+0xb8>)
 8000412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000416:	4a1e      	ldr	r2, [pc, #120]	; (8000490 <SystemClock_Config+0xb8>)
 8000418:	f023 0318 	bic.w	r3, r3, #24
 800041c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000420:	2305      	movs	r3, #5
 8000422:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000428:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800042a:	2301      	movs	r3, #1
 800042c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000432:	2303      	movs	r3, #3
 8000434:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000436:	2301      	movs	r3, #1
 8000438:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800043a:	2314      	movs	r3, #20
 800043c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800043e:	2307      	movs	r3, #7
 8000440:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000442:	2302      	movs	r3, #2
 8000444:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000446:	2302      	movs	r3, #2
 8000448:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4618      	mov	r0, r3
 8000450:	f001 fd4c 	bl	8001eec <HAL_RCC_OscConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800045a:	f000 f9e3 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	230f      	movs	r3, #15
 8000460:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000462:	2303      	movs	r3, #3
 8000464:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000472:	463b      	mov	r3, r7
 8000474:	2104      	movs	r1, #4
 8000476:	4618      	mov	r0, r3
 8000478:	f002 f94c 	bl	8002714 <HAL_RCC_ClockConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000482:	f000 f9cf 	bl	8000824 <Error_Handler>
  }
}
 8000486:	bf00      	nop
 8000488:	3758      	adds	r7, #88	; 0x58
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000

08000494 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <MX_CAN1_Init+0x6c>)
 800049a:	4a1a      	ldr	r2, [pc, #104]	; (8000504 <MX_CAN1_Init+0x70>)
 800049c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004a0:	2210      	movs	r2, #16
 80004a2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004a4:	4b16      	ldr	r3, [pc, #88]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80004b0:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004b2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80004b6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004ba:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80004be:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004e6:	f000 fca3 	bl	8000e30 <HAL_CAN_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80004f0:	f000 f998 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  boot_CAN(&hcan1);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <MX_CAN1_Init+0x6c>)
 80004f6:	f7ff fec3 	bl	8000280 <boot_CAN>
  /* USER CODE END CAN1_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000384 	.word	0x20000384
 8000504:	40006400 	.word	0x40006400

08000508 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800050c:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_RTC_Init+0x48>)
 800050e:	4a11      	ldr	r2, [pc, #68]	; (8000554 <MX_RTC_Init+0x4c>)
 8000510:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_RTC_Init+0x48>)
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_RTC_Init+0x48>)
 800051a:	227f      	movs	r2, #127	; 0x7f
 800051c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_RTC_Init+0x48>)
 8000520:	22ff      	movs	r2, #255	; 0xff
 8000522:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_RTC_Init+0x48>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_RTC_Init+0x48>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_RTC_Init+0x48>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_RTC_Init+0x48>)
 8000538:	2200      	movs	r2, #0
 800053a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_RTC_Init+0x48>)
 800053e:	f002 fe87 	bl	8003250 <HAL_RTC_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000548:	f000 f96c 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200003ac 	.word	0x200003ac
 8000554:	40002800 	.word	0x40002800

08000558 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_SPI1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <MX_SPI1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_SPI1_Init+0x74>)
 8000564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800056a:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_SPI1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000570:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_SPI1_Init+0x74>)
 8000572:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000576:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_SPI1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_SPI1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_SPI1_Init+0x74>)
 8000586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800058a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_SPI1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_SPI1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_SPI1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_SPI1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_SPI1_Init+0x74>)
 80005a6:	2207      	movs	r2, #7
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_SPI1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_SPI1_Init+0x74>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_SPI1_Init+0x74>)
 80005b8:	f002 ff5c 	bl	8003474 <HAL_SPI_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 f92f 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200003d0 	.word	0x200003d0
 80005d0:	40013000 	.word	0x40013000

080005d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_SPI2_Init+0x74>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	; (800064c <MX_SPI2_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_SPI2_Init+0x74>)
 80005e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_SPI2_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_SPI2_Init+0x74>)
 80005ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_SPI2_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_SPI2_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_SPI2_Init+0x74>)
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_SPI2_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_SPI2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_SPI2_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_SPI2_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_SPI2_Init+0x74>)
 8000622:	2207      	movs	r2, #7
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_SPI2_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_SPI2_Init+0x74>)
 800062e:	2208      	movs	r2, #8
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_SPI2_Init+0x74>)
 8000634:	f002 ff1e 	bl	8003474 <HAL_SPI_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800063e:	f000 f8f1 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000434 	.word	0x20000434
 800064c:	40003800 	.word	0x40003800

08000650 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_SPI3_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_SPI3_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_SPI3_Init+0x74>)
 800065c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000660:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_SPI3_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_SPI3_Init+0x74>)
 800066a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800066e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_SPI3_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_SPI3_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_SPI3_Init+0x74>)
 800067e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000682:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_SPI3_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_SPI3_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_SPI3_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_SPI3_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_SPI3_Init+0x74>)
 800069e:	2207      	movs	r2, #7
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_SPI3_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_SPI3_Init+0x74>)
 80006aa:	2208      	movs	r2, #8
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_SPI3_Init+0x74>)
 80006b0:	f002 fee0 	bl	8003474 <HAL_SPI_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f8b3 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000498 	.word	0x20000498
 80006c8:	40003c00 	.word	0x40003c00

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b3a      	ldr	r3, [pc, #232]	; (80007cc <MX_GPIO_Init+0x100>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a39      	ldr	r2, [pc, #228]	; (80007cc <MX_GPIO_Init+0x100>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b37      	ldr	r3, [pc, #220]	; (80007cc <MX_GPIO_Init+0x100>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b34      	ldr	r3, [pc, #208]	; (80007cc <MX_GPIO_Init+0x100>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a33      	ldr	r2, [pc, #204]	; (80007cc <MX_GPIO_Init+0x100>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b31      	ldr	r3, [pc, #196]	; (80007cc <MX_GPIO_Init+0x100>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <MX_GPIO_Init+0x100>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a2d      	ldr	r2, [pc, #180]	; (80007cc <MX_GPIO_Init+0x100>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_GPIO_Init+0x100>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0x100>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a27      	ldr	r2, [pc, #156]	; (80007cc <MX_GPIO_Init+0x100>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_GPIO_Init+0x100>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLASH__HOLD_Pin|FLASH__WP_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000748:	4821      	ldr	r0, [pc, #132]	; (80007d0 <MX_GPIO_Init+0x104>)
 800074a:	f001 fb43 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH__CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000754:	481f      	ldr	r0, [pc, #124]	; (80007d4 <MX_GPIO_Init+0x108>)
 8000756:	f001 fb3d 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|MRAM__CS_Pin|MRAM__WP_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f001 fb36 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH__HOLD_Pin FLASH__WP_Pin */
  GPIO_InitStruct.Pin = FLASH__HOLD_Pin|FLASH__WP_Pin;
 8000768:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <MX_GPIO_Init+0x104>)
 8000782:	f001 f9ad 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH__CS_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = FLASH__CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8000786:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <MX_GPIO_Init+0x108>)
 80007a0:	f001 f99e 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : WDI_Pin MRAM__CS_Pin MRAM__WP_Pin */
  GPIO_InitStruct.Pin = WDI_Pin|MRAM__CS_Pin|MRAM__WP_Pin;
 80007a4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f001 f98e 	bl	8001ae0 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400
 80007d4:	48000800 	.word	0x48000800

080007d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  // Handling Function
  CAN_MESSAGE_RECEIVED(hcan1);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff fd83 	bl	80002ec <CAN_MESSAGE_RECEIVED>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f003 f9db 	bl	8003bb2 <osDelay>
 80007fc:	e7fb      	b.n	80007f6 <StartDefaultTask+0x8>
	...

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 faed 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40001000 	.word	0x40001000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <HAL_MspInit+0x4c>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	4a10      	ldr	r2, [pc, #64]	; (800087c <HAL_MspInit+0x4c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	; 0x60
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <HAL_MspInit+0x4c>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_MspInit+0x4c>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	; 0x58
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x4c>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f001 f90d 	bl	8001a8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <HAL_CAN_MspInit+0x8c>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d130      	bne.n	8000904 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_CAN_MspInit+0x90>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <HAL_CAN_MspInit+0x90>)
 80008a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ac:	6593      	str	r3, [r2, #88]	; 0x58
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_CAN_MspInit+0x90>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_CAN_MspInit+0x90>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <HAL_CAN_MspInit+0x90>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_CAN_MspInit+0x90>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80008d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 80008e4:	230a      	movs	r3, #10
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4809      	ldr	r0, [pc, #36]	; (8000914 <HAL_CAN_MspInit+0x94>)
 80008f0:	f001 f8f6 	bl	8001ae0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2105      	movs	r1, #5
 80008f8:	2014      	movs	r0, #20
 80008fa:	f001 f8c7 	bl	8001a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008fe:	2014      	movs	r0, #20
 8000900:	f001 f8e0 	bl	8001ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40006400 	.word	0x40006400
 8000910:	40021000 	.word	0x40021000
 8000914:	48000400 	.word	0x48000400

08000918 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	; 0x70
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	2268      	movs	r2, #104	; 0x68
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fc72 	bl	8005212 <memset>
  if(hrtc->Instance==RTC)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_RTC_MspInit+0x58>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d117      	bne.n	8000968 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800093c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800093e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000942:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4618      	mov	r0, r3
 800094a:	f002 f923 	bl	8002b94 <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000954:	f7ff ff66 	bl	8000824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_RTC_MspInit+0x5c>)
 800095a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <HAL_RTC_MspInit+0x5c>)
 8000960:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3770      	adds	r7, #112	; 0x70
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40002800 	.word	0x40002800
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a54      	ldr	r2, [pc, #336]	; (8000ae8 <HAL_SPI_MspInit+0x170>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d129      	bne.n	80009ee <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099a:	4b54      	ldr	r3, [pc, #336]	; (8000aec <HAL_SPI_MspInit+0x174>)
 800099c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099e:	4a53      	ldr	r2, [pc, #332]	; (8000aec <HAL_SPI_MspInit+0x174>)
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a4:	6613      	str	r3, [r2, #96]	; 0x60
 80009a6:	4b51      	ldr	r3, [pc, #324]	; (8000aec <HAL_SPI_MspInit+0x174>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ae:	623b      	str	r3, [r7, #32]
 80009b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <HAL_SPI_MspInit+0x174>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a4d      	ldr	r2, [pc, #308]	; (8000aec <HAL_SPI_MspInit+0x174>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <HAL_SPI_MspInit+0x174>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009ca:	23c2      	movs	r3, #194	; 0xc2
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009da:	2305      	movs	r3, #5
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f001 f87a 	bl	8001ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80009ec:	e078      	b.n	8000ae0 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI2)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a3f      	ldr	r2, [pc, #252]	; (8000af0 <HAL_SPI_MspInit+0x178>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d145      	bne.n	8000a84 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009f8:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <HAL_SPI_MspInit+0x174>)
 80009fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fc:	4a3b      	ldr	r2, [pc, #236]	; (8000aec <HAL_SPI_MspInit+0x174>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	6593      	str	r3, [r2, #88]	; 0x58
 8000a04:	4b39      	ldr	r3, [pc, #228]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a14:	4a35      	ldr	r2, [pc, #212]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1c:	4b33      	ldr	r3, [pc, #204]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	4a2f      	ldr	r2, [pc, #188]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a40:	230c      	movs	r3, #12
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a50:	2305      	movs	r3, #5
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4826      	ldr	r0, [pc, #152]	; (8000af4 <HAL_SPI_MspInit+0x17c>)
 8000a5c:	f001 f840 	bl	8001ae0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a72:	2305      	movs	r3, #5
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481e      	ldr	r0, [pc, #120]	; (8000af8 <HAL_SPI_MspInit+0x180>)
 8000a7e:	f001 f82f 	bl	8001ae0 <HAL_GPIO_Init>
}
 8000a82:	e02d      	b.n	8000ae0 <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI3)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <HAL_SPI_MspInit+0x184>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d128      	bne.n	8000ae0 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a10      	ldr	r2, [pc, #64]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_SPI_MspInit+0x174>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000abe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad0:	2306      	movs	r3, #6
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_SPI_MspInit+0x17c>)
 8000adc:	f001 f800 	bl	8001ae0 <HAL_GPIO_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	3738      	adds	r7, #56	; 0x38
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40013000 	.word	0x40013000
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40003800 	.word	0x40003800
 8000af4:	48000800 	.word	0x48000800
 8000af8:	48000400 	.word	0x48000400
 8000afc:	40003c00 	.word	0x40003c00

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	2036      	movs	r0, #54	; 0x36
 8000b16:	f000 ffb9 	bl	8001a8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b1a:	2036      	movs	r0, #54	; 0x36
 8000b1c:	f000 ffd2 	bl	8001ac4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <HAL_InitTick+0x9c>)
 8000b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <HAL_InitTick+0x9c>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_InitTick+0x9c>)
 8000b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 ff94 	bl	8002a70 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b48:	f001 ff7c 	bl	8002a44 <HAL_RCC_GetPCLK1Freq>
 8000b4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <HAL_InitTick+0xa0>)
 8000b52:	fba2 2303 	umull	r2, r3, r2, r3
 8000b56:	0c9b      	lsrs	r3, r3, #18
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <HAL_InitTick+0xa8>)
 8000b60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b7e:	f002 fd1c 	bl	80035ba <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d104      	bne.n	8000b92 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <HAL_InitTick+0xa4>)
 8000b8a:	f002 fd77 	bl	800367c <HAL_TIM_Base_Start_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3730      	adds	r7, #48	; 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	431bde83 	.word	0x431bde83
 8000ba4:	20000508 	.word	0x20000508
 8000ba8:	40001000 	.word	0x40001000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <CAN1_RX0_IRQHandler+0x10>)
 8000bde:	f000 fc6e 	bl	80014be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000384 	.word	0x20000384

08000bec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM6_DAC_IRQHandler+0x10>)
 8000bf2:	f002 fd9f 	bl	8003734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000508 	.word	0x20000508

08000c00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e00a      	b.n	8000c28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c12:	f3af 8000 	nop.w
 8000c16:	4601      	mov	r1, r0
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf0      	blt.n	8000c12 <_read+0x12>
	}

return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e009      	b.n	8000c60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf1      	blt.n	8000c4c <_write+0x12>
	}
	return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_close>:

int _close(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
	return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_isatty>:

int _isatty(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
	return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f004 f95e 	bl	8004fcc <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20028000 	.word	0x20028000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	20000554 	.word	0x20000554
 8000d44:	20001278 	.word	0x20001278

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ffea 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f004 fa13 	bl	80051c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fad1 	bl	8000344 <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000db0:	0800615c 	.word	0x0800615c
  ldr r2, =_sbss
 8000db4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000db8:	20001278 	.word	0x20001278

08000dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_IRQHandler>

08000dbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 fe54 	bl	8001a76 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f7ff fe96 	bl	8000b00 <HAL_InitTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	e001      	b.n	8000de4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de0:	f7ff fd26 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000558 	.word	0x20000558

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000558 	.word	0x20000558

08000e30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e0ed      	b.n	800101e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fd16 	bl	8000880 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0201 	orr.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e64:	f7ff ffd8 	bl	8000e18 <HAL_GetTick>
 8000e68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e6a:	e012      	b.n	8000e92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e6c:	f7ff ffd4 	bl	8000e18 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b0a      	cmp	r3, #10
 8000e78:	d90b      	bls.n	8000e92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2205      	movs	r2, #5
 8000e8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e0c5      	b.n	800101e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0e5      	beq.n	8000e6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0202 	bic.w	r2, r2, #2
 8000eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb0:	f7ff ffb2 	bl	8000e18 <HAL_GetTick>
 8000eb4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eb6:	e012      	b.n	8000ede <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eb8:	f7ff ffae 	bl	8000e18 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b0a      	cmp	r3, #10
 8000ec4:	d90b      	bls.n	8000ede <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e09f      	b.n	800101e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1e5      	bne.n	8000eb8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e1b      	ldrb	r3, [r3, #24]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d108      	bne.n	8000f06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e007      	b.n	8000f16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7e5b      	ldrb	r3, [r3, #25]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d108      	bne.n	8000f30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7e9b      	ldrb	r3, [r3, #26]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d108      	bne.n	8000f5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0220 	orr.w	r2, r2, #32
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e007      	b.n	8000f6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0220 	bic.w	r2, r2, #32
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7edb      	ldrb	r3, [r3, #27]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d108      	bne.n	8000f84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0210 	bic.w	r2, r2, #16
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e007      	b.n	8000f94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0210 	orr.w	r2, r2, #16
 8000f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7f1b      	ldrb	r3, [r3, #28]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d108      	bne.n	8000fae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0208 	orr.w	r2, r2, #8
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e007      	b.n	8000fbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0208 	bic.w	r2, r2, #8
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7f5b      	ldrb	r3, [r3, #29]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d108      	bne.n	8000fd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0204 	orr.w	r2, r2, #4
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e007      	b.n	8000fe8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0204 	bic.w	r2, r2, #4
 8000fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	ea42 0103 	orr.w	r1, r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	1e5a      	subs	r2, r3, #1
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d12e      	bne.n	8001098 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2202      	movs	r2, #2
 800103e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001052:	f7ff fee1 	bl	8000e18 <HAL_GetTick>
 8001056:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001058:	e012      	b.n	8001080 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800105a:	f7ff fedd 	bl	8000e18 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b0a      	cmp	r3, #10
 8001066:	d90b      	bls.n	8001080 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2205      	movs	r2, #5
 8001078:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e012      	b.n	80010a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1e5      	bne.n	800105a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	e006      	b.n	80010a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
  }
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b089      	sub	sp, #36	; 0x24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010cc:	7ffb      	ldrb	r3, [r7, #31]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d003      	beq.n	80010da <HAL_CAN_AddTxMessage+0x2c>
 80010d2:	7ffb      	ldrb	r3, [r7, #31]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	f040 80ad 	bne.w	8001234 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10a      	bne.n	80010fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d105      	bne.n	80010fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8095 	beq.w	8001224 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	0e1b      	lsrs	r3, r3, #24
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001104:	2201      	movs	r2, #1
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	409a      	lsls	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10d      	bne.n	8001132 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	6809      	ldr	r1, [r1, #0]
 8001124:	431a      	orrs	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3318      	adds	r3, #24
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	440b      	add	r3, r1
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e00f      	b.n	8001152 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800113c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001146:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3318      	adds	r3, #24
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	440b      	add	r3, r1
 8001150:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6819      	ldr	r1, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3318      	adds	r3, #24
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	440b      	add	r3, r1
 8001162:	3304      	adds	r3, #4
 8001164:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	7d1b      	ldrb	r3, [r3, #20]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d111      	bne.n	8001192 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3318      	adds	r3, #24
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	4413      	add	r3, r2
 800117a:	3304      	adds	r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	6811      	ldr	r1, [r2, #0]
 8001182:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3318      	adds	r3, #24
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	440b      	add	r3, r1
 800118e:	3304      	adds	r3, #4
 8001190:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3307      	adds	r3, #7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	061a      	lsls	r2, r3, #24
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3306      	adds	r3, #6
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	041b      	lsls	r3, r3, #16
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3305      	adds	r3, #5
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	4313      	orrs	r3, r2
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	3204      	adds	r2, #4
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	4610      	mov	r0, r2
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	6811      	ldr	r1, [r2, #0]
 80011ba:	ea43 0200 	orr.w	r2, r3, r0
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	440b      	add	r3, r1
 80011c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3303      	adds	r3, #3
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	061a      	lsls	r2, r3, #24
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3302      	adds	r3, #2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3301      	adds	r3, #1
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	4313      	orrs	r3, r2
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	4610      	mov	r0, r2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	6811      	ldr	r1, [r2, #0]
 80011f0:	ea43 0200 	orr.w	r2, r3, r0
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	440b      	add	r3, r1
 80011fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3318      	adds	r3, #24
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4413      	add	r3, r2
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	6811      	ldr	r1, [r2, #0]
 8001212:	f043 0201 	orr.w	r2, r3, #1
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3318      	adds	r3, #24
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	440b      	add	r3, r1
 800121e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	e00e      	b.n	8001242 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e006      	b.n	8001242 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
  }
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800124e:	b480      	push	{r7}
 8001250:	b087      	sub	sp, #28
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001262:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d003      	beq.n	8001272 <HAL_CAN_GetRxMessage+0x24>
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2b02      	cmp	r3, #2
 800126e:	f040 80f3 	bne.w	8001458 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10e      	bne.n	8001296 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e0e7      	b.n	8001466 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0d8      	b.n	8001466 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	331b      	adds	r3, #27
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	4413      	add	r3, r2
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0204 	and.w	r2, r3, #4
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	331b      	adds	r3, #27
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	4413      	add	r3, r2
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0d5b      	lsrs	r3, r3, #21
 80012e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	331b      	adds	r3, #27
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4413      	add	r3, r2
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	331b      	adds	r3, #27
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0202 	and.w	r2, r3, #2
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	331b      	adds	r3, #27
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	4413      	add	r3, r2
 8001326:	3304      	adds	r3, #4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 020f 	and.w	r2, r3, #15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	331b      	adds	r3, #27
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	3304      	adds	r3, #4
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	331b      	adds	r3, #27
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4413      	add	r3, r2
 8001356:	3304      	adds	r3, #4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	0c1b      	lsrs	r3, r3, #16
 800135c:	b29a      	uxth	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	4413      	add	r3, r2
 800136c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	4413      	add	r3, r2
 8001382:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0a1a      	lsrs	r2, r3, #8
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4413      	add	r3, r2
 800139c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	0c1a      	lsrs	r2, r3, #16
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	3302      	adds	r3, #2
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0e1a      	lsrs	r2, r3, #24
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3303      	adds	r3, #3
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	4413      	add	r3, r2
 80013d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3304      	adds	r3, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0a1a      	lsrs	r2, r3, #8
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	3305      	adds	r3, #5
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0c1a      	lsrs	r2, r3, #16
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3306      	adds	r3, #6
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0e1a      	lsrs	r2, r3, #24
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3307      	adds	r3, #7
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d108      	bne.n	8001444 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0220 	orr.w	r2, r2, #32
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	e007      	b.n	8001454 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0220 	orr.w	r2, r2, #32
 8001452:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	e006      	b.n	8001466 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
  }
}
 8001466:	4618      	mov	r0, r3
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001472:	b480      	push	{r7}
 8001474:	b085      	sub	sp, #20
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001482:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d002      	beq.n	8001490 <HAL_CAN_ActivateNotification+0x1e>
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d109      	bne.n	80014a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6959      	ldr	r1, [r3, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e006      	b.n	80014b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
  }
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b08a      	sub	sp, #40	; 0x28
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d07c      	beq.n	80015fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d023      	beq.n	8001556 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2201      	movs	r2, #1
 8001514:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f983 	bl	800182c <HAL_CAN_TxMailbox0CompleteCallback>
 8001526:	e016      	b.n	8001556 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	e00c      	b.n	8001556 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	e002      	b.n	8001556 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f989 	bl	8001868 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d024      	beq.n	80015aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001568:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f963 	bl	8001840 <HAL_CAN_TxMailbox1CompleteCallback>
 800157a:	e016      	b.n	80015aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	e00c      	b.n	80015aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
 80015a2:	e002      	b.n	80015aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f969 	bl	800187c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d024      	beq.n	80015fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f943 	bl	8001854 <HAL_CAN_TxMailbox2CompleteCallback>
 80015ce:	e016      	b.n	80015fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
 80015e2:	e00c      	b.n	80015fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
 80015f6:	e002      	b.n	80015fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f949 	bl	8001890 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00c      	beq.n	8001622 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001618:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2210      	movs	r2, #16
 8001620:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00b      	beq.n	8001644 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2208      	movs	r2, #8
 800163c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f930 	bl	80018a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff f8bb 	bl	80007d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00c      	beq.n	8001686 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800167c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2210      	movs	r2, #16
 8001684:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00b      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2208      	movs	r2, #8
 80016a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f912 	bl	80018cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f8f9 	bl	80018b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2210      	movs	r2, #16
 80016e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f8fc 	bl	80018e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00b      	beq.n	800170a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2208      	movs	r2, #8
 8001702:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f8f5 	bl	80018f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d07b      	beq.n	800180c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	2b00      	cmp	r3, #0
 800171c:	d072      	beq.n	8001804 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001778:	2b00      	cmp	r3, #0
 800177a:	d043      	beq.n	8001804 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001782:	2b00      	cmp	r3, #0
 8001784:	d03e      	beq.n	8001804 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800178c:	2b60      	cmp	r3, #96	; 0x60
 800178e:	d02b      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x32a>
 8001790:	2b60      	cmp	r3, #96	; 0x60
 8001792:	d82e      	bhi.n	80017f2 <HAL_CAN_IRQHandler+0x334>
 8001794:	2b50      	cmp	r3, #80	; 0x50
 8001796:	d022      	beq.n	80017de <HAL_CAN_IRQHandler+0x320>
 8001798:	2b50      	cmp	r3, #80	; 0x50
 800179a:	d82a      	bhi.n	80017f2 <HAL_CAN_IRQHandler+0x334>
 800179c:	2b40      	cmp	r3, #64	; 0x40
 800179e:	d019      	beq.n	80017d4 <HAL_CAN_IRQHandler+0x316>
 80017a0:	2b40      	cmp	r3, #64	; 0x40
 80017a2:	d826      	bhi.n	80017f2 <HAL_CAN_IRQHandler+0x334>
 80017a4:	2b30      	cmp	r3, #48	; 0x30
 80017a6:	d010      	beq.n	80017ca <HAL_CAN_IRQHandler+0x30c>
 80017a8:	2b30      	cmp	r3, #48	; 0x30
 80017aa:	d822      	bhi.n	80017f2 <HAL_CAN_IRQHandler+0x334>
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d002      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x2f8>
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d005      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80017b4:	e01d      	b.n	80017f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017be:	e019      	b.n	80017f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	f043 0310 	orr.w	r3, r3, #16
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017c8:	e014      	b.n	80017f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	f043 0320 	orr.w	r3, r3, #32
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017d2:	e00f      	b.n	80017f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017dc:	e00a      	b.n	80017f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017e6:	e005      	b.n	80017f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017f0:	e000      	b.n	80017f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80017f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001802:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2204      	movs	r2, #4
 800180a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f872 	bl	8001908 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	; (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff4c 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9e:	f7ff ff61 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001aa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	6978      	ldr	r0, [r7, #20]
 8001aaa:	f7ff ffb1 	bl	8001a10 <NVIC_EncodePriority>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff80 	bl	80019bc <__NVIC_SetPriority>
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff54 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	e154      	b.n	8001d9a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2101      	movs	r1, #1
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8146 	beq.w	8001d94 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d005      	beq.n	8001b20 <HAL_GPIO_Init+0x40>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d130      	bne.n	8001b82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b56:	2201      	movs	r2, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 0201 	and.w	r2, r3, #1
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d017      	beq.n	8001bbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d123      	bne.n	8001c12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	691a      	ldr	r2, [r3, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	6939      	ldr	r1, [r7, #16]
 8001c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0203 	and.w	r2, r3, #3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80a0 	beq.w	8001d94 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <HAL_GPIO_Init+0x2d8>)
 8001c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c58:	4a57      	ldr	r2, [pc, #348]	; (8001db8 <HAL_GPIO_Init+0x2d8>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c60:	4b55      	ldr	r3, [pc, #340]	; (8001db8 <HAL_GPIO_Init+0x2d8>)
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6c:	4a53      	ldr	r2, [pc, #332]	; (8001dbc <HAL_GPIO_Init+0x2dc>)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c96:	d019      	beq.n	8001ccc <HAL_GPIO_Init+0x1ec>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a49      	ldr	r2, [pc, #292]	; (8001dc0 <HAL_GPIO_Init+0x2e0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_GPIO_Init+0x1e8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a48      	ldr	r2, [pc, #288]	; (8001dc4 <HAL_GPIO_Init+0x2e4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_GPIO_Init+0x1e4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a47      	ldr	r2, [pc, #284]	; (8001dc8 <HAL_GPIO_Init+0x2e8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <HAL_GPIO_Init+0x1e0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a46      	ldr	r2, [pc, #280]	; (8001dcc <HAL_GPIO_Init+0x2ec>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_GPIO_Init+0x1dc>
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e008      	b.n	8001cce <HAL_GPIO_Init+0x1ee>
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	e006      	b.n	8001cce <HAL_GPIO_Init+0x1ee>
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e004      	b.n	8001cce <HAL_GPIO_Init+0x1ee>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e002      	b.n	8001cce <HAL_GPIO_Init+0x1ee>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_GPIO_Init+0x1ee>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	f002 0203 	and.w	r2, r2, #3
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	4093      	lsls	r3, r2
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cde:	4937      	ldr	r1, [pc, #220]	; (8001dbc <HAL_GPIO_Init+0x2dc>)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_GPIO_Init+0x2f0>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d10:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <HAL_GPIO_Init+0x2f0>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_GPIO_Init+0x2f0>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d3a:	4a25      	ldr	r2, [pc, #148]	; (8001dd0 <HAL_GPIO_Init+0x2f0>)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_GPIO_Init+0x2f0>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <HAL_GPIO_Init+0x2f0>)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_GPIO_Init+0x2f0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_GPIO_Init+0x2f0>)
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f aea3 	bne.w	8001af0 <HAL_GPIO_Init+0x10>
  }
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	48000400 	.word	0x48000400
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	48000c00 	.word	0x48000c00
 8001dcc:	48001000 	.word	0x48001000
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40007000 	.word	0x40007000

08001e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4e:	d130      	bne.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	4b23      	ldr	r3, [pc, #140]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e5c:	d038      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2232      	movs	r2, #50	; 0x32
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e84:	e002      	b.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	d102      	bne.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f2      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eac:	d110      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e00f      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebe:	d007      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec8:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	431bde83 	.word	0x431bde83

08001eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f000 bc02 	b.w	8002704 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f00:	4b96      	ldr	r3, [pc, #600]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f0a:	4b94      	ldr	r3, [pc, #592]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80e4 	beq.w	80020ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4c>
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	f040 808b 	bne.w	8002046 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	f040 8087 	bne.w	8002046 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f38:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x64>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e3d9      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4b81      	ldr	r3, [pc, #516]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_RCC_OscConfig+0x7e>
 8001f60:	4b7e      	ldr	r3, [pc, #504]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f68:	e005      	b.n	8001f76 <HAL_RCC_OscConfig+0x8a>
 8001f6a:	4b7c      	ldr	r3, [pc, #496]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d223      	bcs.n	8001fc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fda8 	bl	8002ad4 <RCC_SetFlashLatencyFromMSIRange>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e3ba      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8e:	4b73      	ldr	r3, [pc, #460]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a72      	ldr	r2, [pc, #456]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b70      	ldr	r3, [pc, #448]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	496d      	ldr	r1, [pc, #436]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fac:	4b6b      	ldr	r3, [pc, #428]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	4968      	ldr	r1, [pc, #416]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	e025      	b.n	800200e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	4b66      	ldr	r3, [pc, #408]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a65      	ldr	r2, [pc, #404]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4960      	ldr	r1, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	495b      	ldr	r1, [pc, #364]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fd68 	bl	8002ad4 <RCC_SetFlashLatencyFromMSIRange>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e37a      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800200e:	f000 fc81 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8002012:	4602      	mov	r2, r0
 8002014:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	4950      	ldr	r1, [pc, #320]	; (8002160 <HAL_RCC_OscConfig+0x274>)
 8002020:	5ccb      	ldrb	r3, [r1, r3]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <HAL_RCC_OscConfig+0x278>)
 800202c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCC_OscConfig+0x27c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fd64 	bl	8000b00 <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d052      	beq.n	80020e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	e35e      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d032      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800204e:	4b43      	ldr	r3, [pc, #268]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a42      	ldr	r2, [pc, #264]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800205a:	f7fe fedd 	bl	8000e18 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002062:	f7fe fed9 	bl	8000e18 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e347      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a35      	ldr	r2, [pc, #212]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <HAL_RCC_OscConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4930      	ldr	r1, [pc, #192]	; (800215c <HAL_RCC_OscConfig+0x270>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	492b      	ldr	r1, [pc, #172]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
 80020b2:	e01a      	b.n	80020ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a28      	ldr	r2, [pc, #160]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020c0:	f7fe feaa 	bl	8000e18 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c8:	f7fe fea6 	bl	8000e18 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e314      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1dc>
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d073      	beq.n	80021de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_OscConfig+0x21c>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d10e      	bne.n	8002120 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d063      	beq.n	80021dc <HAL_RCC_OscConfig+0x2f0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d15f      	bne.n	80021dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e2f1      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x24c>
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e025      	b.n	8002184 <HAL_RCC_OscConfig+0x298>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d114      	bne.n	800216c <HAL_RCC_OscConfig+0x280>
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a02      	ldr	r2, [pc, #8]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e013      	b.n	8002184 <HAL_RCC_OscConfig+0x298>
 800215c:	40021000 	.word	0x40021000
 8002160:	08006074 	.word	0x08006074
 8002164:	20000000 	.word	0x20000000
 8002168:	20000004 	.word	0x20000004
 800216c:	4ba0      	ldr	r3, [pc, #640]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a9f      	ldr	r2, [pc, #636]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b9d      	ldr	r3, [pc, #628]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a9c      	ldr	r2, [pc, #624]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fe44 	bl	8000e18 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe fe40 	bl	8000e18 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e2ae      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x2a8>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fe30 	bl	8000e18 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fe2c 	bl	8000e18 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e29a      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x2d0>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d060      	beq.n	80022ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x310>
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d119      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d116      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_OscConfig+0x328>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e277      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	4973      	ldr	r1, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002228:	e040      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d023      	beq.n	800227a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002232:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fdeb 	bl	8000e18 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe fde7 	bl	8000e18 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e255      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002258:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	495f      	ldr	r1, [pc, #380]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	e018      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5c      	ldr	r2, [pc, #368]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7fe fdc7 	bl	8000e18 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7fe fdc3 	bl	8000e18 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e231      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a0:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d03c      	beq.n	8002332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01c      	beq.n	80022fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c0:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	4a4a      	ldr	r2, [pc, #296]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fda2 	bl	8000e18 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7fe fd9e 	bl	8000e18 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e20c      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ef      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3ec>
 80022f8:	e01b      	b.n	8002332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002300:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7fe fd85 	bl	8000e18 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7fe fd81 	bl	8000e18 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1ef      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ef      	bne.n	8002312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a6 	beq.w	800248c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	; 0x58
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002368:	2301      	movs	r3, #1
 800236a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCC_OscConfig+0x508>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d118      	bne.n	80023aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <HAL_RCC_OscConfig+0x508>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1d      	ldr	r2, [pc, #116]	; (80023f4 <HAL_RCC_OscConfig+0x508>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002384:	f7fe fd48 	bl	8000e18 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7fe fd44 	bl	8000e18 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1b2      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_RCC_OscConfig+0x508>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4d8>
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c2:	e029      	b.n	8002418 <HAL_RCC_OscConfig+0x52c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d115      	bne.n	80023f8 <HAL_RCC_OscConfig+0x50c>
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x52c>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	4b9a      	ldr	r3, [pc, #616]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	4a99      	ldr	r2, [pc, #612]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002408:	4b96      	ldr	r3, [pc, #600]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	4a95      	ldr	r2, [pc, #596]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d016      	beq.n	800244e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7fe fcfa 	bl	8000e18 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002426:	e00a      	b.n	800243e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7fe fcf6 	bl	8000e18 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e162      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243e:	4b89      	ldr	r3, [pc, #548]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ed      	beq.n	8002428 <HAL_RCC_OscConfig+0x53c>
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe fce3 	bl	8000e18 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fcdf 	bl	8000e18 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e14b      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246c:	4b7d      	ldr	r3, [pc, #500]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ed      	bne.n	8002456 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b78      	ldr	r3, [pc, #480]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	4a77      	ldr	r2, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03c      	beq.n	8002512 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01c      	beq.n	80024da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024a0:	4b70      	ldr	r3, [pc, #448]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a6:	4a6f      	ldr	r2, [pc, #444]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7fe fcb2 	bl	8000e18 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b8:	f7fe fcae 	bl	8000e18 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e11c      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ca:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ef      	beq.n	80024b8 <HAL_RCC_OscConfig+0x5cc>
 80024d8:	e01b      	b.n	8002512 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024da:	4b62      	ldr	r3, [pc, #392]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e0:	4a60      	ldr	r2, [pc, #384]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe fc95 	bl	8000e18 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f2:	f7fe fc91 	bl	8000e18 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0ff      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002504:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ef      	bne.n	80024f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80f3 	beq.w	8002702 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	2b02      	cmp	r3, #2
 8002522:	f040 80c9 	bne.w	80026b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002526:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0203 	and.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	429a      	cmp	r2, r3
 8002538:	d12c      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	3b01      	subs	r3, #1
 8002546:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d123      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002556:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d11b      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d113      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d109      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	3b01      	subs	r3, #1
 800258e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d06b      	beq.n	800266c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d062      	beq.n	8002660 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800259a:	4b32      	ldr	r3, [pc, #200]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0ac      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025aa:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2d      	ldr	r2, [pc, #180]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80025b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025b6:	f7fe fc2f 	bl	8000e18 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7fe fc2b 	bl	8000e18 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e099      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_RCC_OscConfig+0x77c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025f6:	0212      	lsls	r2, r2, #8
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025fe:	0852      	lsrs	r2, r2, #1
 8002600:	3a01      	subs	r2, #1
 8002602:	0552      	lsls	r2, r2, #21
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800260a:	0852      	lsrs	r2, r2, #1
 800260c:	3a01      	subs	r2, #1
 800260e:	0652      	lsls	r2, r2, #25
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002616:	06d2      	lsls	r2, r2, #27
 8002618:	430a      	orrs	r2, r1
 800261a:	4912      	ldr	r1, [pc, #72]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800261c:	4313      	orrs	r3, r2
 800261e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800262c:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002636:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002638:	f7fe fbee 	bl	8000e18 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe fbea 	bl	8000e18 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e058      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_RCC_OscConfig+0x778>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800265e:	e050      	b.n	8002702 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e04f      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
 8002664:	40021000 	.word	0x40021000
 8002668:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_RCC_OscConfig+0x820>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d144      	bne.n	8002702 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x820>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_RCC_OscConfig+0x820>)
 800267e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_RCC_OscConfig+0x820>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a20      	ldr	r2, [pc, #128]	; (800270c <HAL_RCC_OscConfig+0x820>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800268e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002690:	f7fe fbc2 	bl	8000e18 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7fe fbbe 	bl	8000e18 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e02c      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x7ac>
 80026b6:	e024      	b.n	8002702 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d01f      	beq.n	80026fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fba5 	bl	8000e18 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe fba1 	bl	8000e18 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e00f      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4905      	ldr	r1, [pc, #20]	; (800270c <HAL_RCC_OscConfig+0x820>)
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_OscConfig+0x824>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
 80026fc:	e001      	b.n	8002702 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	feeefffc 	.word	0xfeeefffc

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0e7      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b75      	ldr	r3, [pc, #468]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b72      	ldr	r3, [pc, #456]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4970      	ldr	r1, [pc, #448]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b6e      	ldr	r3, [pc, #440]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cf      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	429a      	cmp	r2, r3
 8002772:	d908      	bls.n	8002786 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4960      	ldr	r1, [pc, #384]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d04c      	beq.n	800282c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279a:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d121      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0a6      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b2:	4b54      	ldr	r3, [pc, #336]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d115      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e09a      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ca:	4b4e      	ldr	r3, [pc, #312]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e08e      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027da:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e086      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b46      	ldr	r3, [pc, #280]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4943      	ldr	r1, [pc, #268]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fc:	f7fe fb0c 	bl	8000e18 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7fe fb08 	bl	8000e18 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e06e      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	4b31      	ldr	r3, [pc, #196]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002844:	429a      	cmp	r2, r3
 8002846:	d208      	bcs.n	800285a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	492b      	ldr	r1, [pc, #172]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d210      	bcs.n	800288a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 0207 	bic.w	r2, r3, #7
 8002870:	4923      	ldr	r1, [pc, #140]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002878:	4b21      	ldr	r3, [pc, #132]	; (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e036      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4918      	ldr	r1, [pc, #96]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4910      	ldr	r1, [pc, #64]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c8:	f000 f824 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	490b      	ldr	r1, [pc, #44]	; (8002908 <HAL_RCC_ClockConfig+0x1f4>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1fc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe f907 	bl	8000b00 <HAL_InitTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80028f6:	7afb      	ldrb	r3, [r7, #11]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40022000 	.word	0x40022000
 8002904:	40021000 	.word	0x40021000
 8002908:	08006074 	.word	0x08006074
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002922:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292c:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x34>
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d121      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d11e      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002948:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002954:	4b31      	ldr	r3, [pc, #196]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e005      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002970:	4a2b      	ldr	r2, [pc, #172]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002984:	e00a      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d102      	bne.n	8002992 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x110>)
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	e004      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d101      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002998:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x114>)
 800299a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d134      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0xa6>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d003      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0xac>
 80029b8:	e005      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x110>)
 80029bc:	617b      	str	r3, [r7, #20]
      break;
 80029be:	e005      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x114>)
 80029c2:	617b      	str	r3, [r7, #20]
      break;
 80029c4:	e002      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	617b      	str	r3, [r7, #20]
      break;
 80029ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	3301      	adds	r3, #1
 80029d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	fb03 f202 	mul.w	r2, r3, r2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	0e5b      	lsrs	r3, r3, #25
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	3301      	adds	r3, #1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	0800608c 	.word	0x0800608c
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	007a1200 	.word	0x007a1200

08002a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000000 	.word	0x20000000

08002a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a48:	f7ff fff0 	bl	8002a2c <HAL_RCC_GetHCLKFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	0a1b      	lsrs	r3, r3, #8
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	4904      	ldr	r1, [pc, #16]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	08006084 	.word	0x08006084

08002a70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	220f      	movs	r2, #15
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_RCC_GetClockConfig+0x5c>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_RCC_GetClockConfig+0x5c>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_RCC_GetClockConfig+0x5c>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_GetClockConfig+0x5c>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	08db      	lsrs	r3, r3, #3
 8002aaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_RCC_GetClockConfig+0x60>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0207 	and.w	r2, r3, #7
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40022000 	.word	0x40022000

08002ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aec:	f7ff f99a 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002af0:	6178      	str	r0, [r7, #20]
 8002af2:	e014      	b.n	8002b1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afe:	6593      	str	r3, [r2, #88]	; 0x58
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b0c:	f7ff f98a 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002b10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b24:	d10b      	bne.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d919      	bls.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b30:	d902      	bls.n	8002b38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b32:	2302      	movs	r3, #2
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e013      	b.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b38:	2301      	movs	r3, #1
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	e010      	b.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d902      	bls.n	8002b4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b44:	2303      	movs	r3, #3
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e00a      	b.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d102      	bne.n	8002b56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b50:	2302      	movs	r3, #2
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	e004      	b.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b70      	cmp	r3, #112	; 0x70
 8002b5a:	d101      	bne.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 0207 	bic.w	r2, r3, #7
 8002b68:	4909      	ldr	r1, [pc, #36]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d001      	beq.n	8002b82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40022000 	.word	0x40022000

08002b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d031      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bb8:	d01a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002bba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bbe:	d814      	bhi.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bc8:	d10f      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bca:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	4a5c      	ldr	r2, [pc, #368]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd6:	e00c      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fa44 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002be8:	e003      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	74fb      	strb	r3, [r7, #19]
      break;
 8002bee:	e000      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf2:	7cfb      	ldrb	r3, [r7, #19]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bf8:	4b51      	ldr	r3, [pc, #324]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	494e      	ldr	r1, [pc, #312]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c0e:	e001      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 809e 	beq.w	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c26:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4a3f      	ldr	r2, [pc, #252]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
 8002c48:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c58:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c64:	f7fe f8d8 	bl	8000e18 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c6a:	e009      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6c:	f7fe f8d4 	bl	8000e18 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	74fb      	strb	r3, [r7, #19]
        break;
 8002c7e:	e005      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c80:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ef      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d15a      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c92:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01e      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d019      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cda:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d016      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe f894 	bl	8000e18 <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fe f890 	bl	8000e18 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d902      	bls.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	74fb      	strb	r3, [r7, #19]
            break;
 8002d0a:	e006      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ec      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10b      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2e:	4904      	ldr	r1, [pc, #16]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d36:	e009      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	74bb      	strb	r3, [r7, #18]
 8002d3c:	e006      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d4c:	7c7b      	ldrb	r3, [r7, #17]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d52:	4b9e      	ldr	r3, [pc, #632]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	4a9d      	ldr	r2, [pc, #628]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d6a:	4b98      	ldr	r3, [pc, #608]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	f023 0203 	bic.w	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4994      	ldr	r1, [pc, #592]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d8c:	4b8f      	ldr	r3, [pc, #572]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f023 020c 	bic.w	r2, r3, #12
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	498c      	ldr	r1, [pc, #560]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dae:	4b87      	ldr	r3, [pc, #540]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	4983      	ldr	r1, [pc, #524]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd0:	4b7e      	ldr	r3, [pc, #504]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	497b      	ldr	r1, [pc, #492]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002df2:	4b76      	ldr	r3, [pc, #472]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	4972      	ldr	r1, [pc, #456]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e14:	4b6d      	ldr	r3, [pc, #436]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	496a      	ldr	r1, [pc, #424]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e36:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	4961      	ldr	r1, [pc, #388]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e58:	4b5c      	ldr	r3, [pc, #368]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	4959      	ldr	r1, [pc, #356]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e7a:	4b54      	ldr	r3, [pc, #336]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	4950      	ldr	r1, [pc, #320]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e9c:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	4948      	ldr	r1, [pc, #288]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ec4:	f023 0203 	bic.w	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	493f      	ldr	r1, [pc, #252]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d028      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eee:	4937      	ldr	r1, [pc, #220]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002efe:	d106      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f00:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a31      	ldr	r2, [pc, #196]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0a:	60d3      	str	r3, [r2, #12]
 8002f0c:	e011      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f16:	d10c      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f8a4 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d028      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f3e:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	491f      	ldr	r1, [pc, #124]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f68:	60d3      	str	r3, [r2, #12]
 8002f6a:	e011      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f875 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002f82:	4603      	mov	r3, r0
 8002f84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f86:	7cfb      	ldrb	r3, [r7, #19]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d02b      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fba:	d109      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4a02      	ldr	r2, [pc, #8]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc6:	60d3      	str	r3, [r2, #12]
 8002fc8:	e014      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 f843 	bl	800306c <RCCEx_PLLSAI1_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fea:	7cfb      	ldrb	r3, [r7, #19]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01c      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	4916      	ldr	r1, [pc, #88]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800301e:	d10c      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3304      	adds	r3, #4
 8003024:	2102      	movs	r1, #2
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f820 	bl	800306c <RCCEx_PLLSAI1_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003036:	7cfb      	ldrb	r3, [r7, #19]
 8003038:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003054:	4904      	ldr	r1, [pc, #16]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800305c:	7cbb      	ldrb	r3, [r7, #18]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000

0800306c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800307a:	4b74      	ldr	r3, [pc, #464]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d018      	beq.n	80030b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003086:	4b71      	ldr	r3, [pc, #452]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0203 	and.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d10d      	bne.n	80030b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
       ||
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800309e:	4b6b      	ldr	r3, [pc, #428]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
       ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d047      	beq.n	8003142 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	e044      	b.n	8003142 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d018      	beq.n	80030f2 <RCCEx_PLLSAI1_Config+0x86>
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d825      	bhi.n	8003110 <RCCEx_PLLSAI1_Config+0xa4>
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d002      	beq.n	80030ce <RCCEx_PLLSAI1_Config+0x62>
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d009      	beq.n	80030e0 <RCCEx_PLLSAI1_Config+0x74>
 80030cc:	e020      	b.n	8003110 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ce:	4b5f      	ldr	r3, [pc, #380]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d11d      	bne.n	8003116 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030de:	e01a      	b.n	8003116 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030e0:	4b5a      	ldr	r3, [pc, #360]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d116      	bne.n	800311a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f0:	e013      	b.n	800311a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030f2:	4b56      	ldr	r3, [pc, #344]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030fe:	4b53      	ldr	r3, [pc, #332]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800310e:	e006      	b.n	800311e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      break;
 8003114:	e004      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003116:	bf00      	nop
 8003118:	e002      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800311e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003126:	4b49      	ldr	r3, [pc, #292]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	3b01      	subs	r3, #1
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	430b      	orrs	r3, r1
 800313c:	4943      	ldr	r1, [pc, #268]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 800313e:	4313      	orrs	r3, r2
 8003140:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d17c      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3f      	ldr	r2, [pc, #252]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 800314e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003154:	f7fd fe60 	bl	8000e18 <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800315a:	e009      	b.n	8003170 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800315c:	f7fd fe5c 	bl	8000e18 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d902      	bls.n	8003170 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	73fb      	strb	r3, [r7, #15]
        break;
 800316e:	e005      	b.n	800317c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003170:	4b36      	ldr	r3, [pc, #216]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ef      	bne.n	800315c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d15f      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d110      	bne.n	80031aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003188:	4b30      	ldr	r3, [pc, #192]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003190:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6892      	ldr	r2, [r2, #8]
 8003198:	0211      	lsls	r1, r2, #8
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	06d2      	lsls	r2, r2, #27
 80031a0:	430a      	orrs	r2, r1
 80031a2:	492a      	ldr	r1, [pc, #168]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	610b      	str	r3, [r1, #16]
 80031a8:	e027      	b.n	80031fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d112      	bne.n	80031d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6892      	ldr	r2, [r2, #8]
 80031c0:	0211      	lsls	r1, r2, #8
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6912      	ldr	r2, [r2, #16]
 80031c6:	0852      	lsrs	r2, r2, #1
 80031c8:	3a01      	subs	r2, #1
 80031ca:	0552      	lsls	r2, r2, #21
 80031cc:	430a      	orrs	r2, r1
 80031ce:	491f      	ldr	r1, [pc, #124]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	610b      	str	r3, [r1, #16]
 80031d4:	e011      	b.n	80031fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031d6:	4b1d      	ldr	r3, [pc, #116]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6892      	ldr	r2, [r2, #8]
 80031e6:	0211      	lsls	r1, r2, #8
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6952      	ldr	r2, [r2, #20]
 80031ec:	0852      	lsrs	r2, r2, #1
 80031ee:	3a01      	subs	r2, #1
 80031f0:	0652      	lsls	r2, r2, #25
 80031f2:	430a      	orrs	r2, r1
 80031f4:	4915      	ldr	r1, [pc, #84]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031fa:	4b14      	ldr	r3, [pc, #80]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a13      	ldr	r2, [pc, #76]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003204:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7fd fe07 	bl	8000e18 <HAL_GetTick>
 800320a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800320c:	e009      	b.n	8003222 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800320e:	f7fd fe03 	bl	8000e18 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d902      	bls.n	8003222 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	73fb      	strb	r3, [r7, #15]
          break;
 8003220:	e005      	b.n	800322e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0ef      	beq.n	800320e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d106      	bne.n	8003242 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	4903      	ldr	r1, [pc, #12]	; (800324c <RCCEx_PLLSAI1_Config+0x1e0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000

08003250 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06c      	beq.n	800333c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fb4e 	bl	8000918 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	22ca      	movs	r2, #202	; 0xca
 800328a:	625a      	str	r2, [r3, #36]	; 0x24
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2253      	movs	r2, #83	; 0x53
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f87c 	bl	8003392 <RTC_EnterInitMode>
 800329a:	4603      	mov	r3, r0
 800329c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d14b      	bne.n	800333c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80032b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68d2      	ldr	r2, [r2, #12]
 80032de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6919      	ldr	r1, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	041a      	lsls	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f87f 	bl	80033f8 <RTC_ExitInitMode>
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d11b      	bne.n	800333c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0203 	bic.w	r2, r2, #3
 8003312:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	22ff      	movs	r2, #255	; 0xff
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800335c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800335e:	f7fd fd5b 	bl	8000e18 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003364:	e009      	b.n	800337a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003366:	f7fd fd57 	bl	8000e18 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003374:	d901      	bls.n	800337a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e007      	b.n	800338a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d120      	bne.n	80033ee <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80033b6:	f7fd fd2f 	bl	8000e18 <HAL_GetTick>
 80033ba:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80033bc:	e00d      	b.n	80033da <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80033be:	f7fd fd2b 	bl	8000e18 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033cc:	d905      	bls.n	80033da <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2203      	movs	r2, #3
 80033d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <RTC_EnterInitMode+0x5c>
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d1e7      	bne.n	80033be <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <RTC_ExitInitMode+0x78>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a19      	ldr	r2, [pc, #100]	; (8003470 <RTC_ExitInitMode+0x78>)
 800340a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <RTC_ExitInitMode+0x78>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10c      	bne.n	8003436 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ff92 	bl	8003346 <HAL_RTC_WaitForSynchro>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01e      	beq.n	8003466 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e017      	b.n	8003466 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <RTC_ExitInitMode+0x78>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <RTC_ExitInitMode+0x78>)
 800343c:	f023 0320 	bic.w	r3, r3, #32
 8003440:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff7f 	bl	8003346 <HAL_RTC_WaitForSynchro>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2203      	movs	r2, #3
 8003452:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <RTC_ExitInitMode+0x78>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <RTC_ExitInitMode+0x78>)
 8003460:	f043 0320 	orr.w	r3, r3, #32
 8003464:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40002800 	.word	0x40002800

08003474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e095      	b.n	80035b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d108      	bne.n	80034a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003496:	d009      	beq.n	80034ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
 800349e:	e005      	b.n	80034ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fa56 	bl	8000978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ec:	d902      	bls.n	80034f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e002      	b.n	80034fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003502:	d007      	beq.n	8003514 <HAL_SPI_Init+0xa0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800350c:	d002      	beq.n	8003514 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	ea42 0103 	orr.w	r1, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	0c1b      	lsrs	r3, r3, #16
 8003570:	f003 0204 	and.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003590:	ea42 0103 	orr.w	r1, r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e049      	b.n	8003660 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f841 	bl	8003668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f000 f9e3 	bl	80039c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d001      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e040      	b.n	8003716 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <HAL_TIM_Base_Start_IT+0xa8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00e      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x58>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036be:	d009      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x58>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <HAL_TIM_Base_Start_IT+0xac>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d004      	beq.n	80036d4 <HAL_TIM_Base_Start_IT+0x58>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_TIM_Base_Start_IT+0xb0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d115      	bne.n	8003700 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_TIM_Base_Start_IT+0xb4>)
 80036dc:	4013      	ands	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b06      	cmp	r3, #6
 80036e4:	d015      	beq.n	8003712 <HAL_TIM_Base_Start_IT+0x96>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d011      	beq.n	8003712 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fe:	e008      	b.n	8003712 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e000      	b.n	8003714 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40000400 	.word	0x40000400
 800372c:	40014000 	.word	0x40014000
 8003730:	00010007 	.word	0x00010007

08003734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d122      	bne.n	8003790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b02      	cmp	r3, #2
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0202 	mvn.w	r2, #2
 8003760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f905 	bl	8003986 <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f8f7 	bl	8003972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f908 	bl	800399a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d122      	bne.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d11b      	bne.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0204 	mvn.w	r2, #4
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f8db 	bl	8003986 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8cd 	bl	8003972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f8de 	bl	800399a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0208 	mvn.w	r2, #8
 8003808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2204      	movs	r2, #4
 800380e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8b1 	bl	8003986 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f8a3 	bl	8003972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f8b4 	bl	800399a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b10      	cmp	r3, #16
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b10      	cmp	r3, #16
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0210 	mvn.w	r2, #16
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2208      	movs	r2, #8
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f887 	bl	8003986 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f879 	bl	8003972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f88a 	bl	800399a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10e      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d107      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0201 	mvn.w	r2, #1
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fc ffa4 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b80      	cmp	r3, #128	; 0x80
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8e8 	bl	8003ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f2:	d10e      	bne.n	8003912 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d107      	bne.n	8003912 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800390a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8db 	bl	8003ac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d10e      	bne.n	800393e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f838 	bl	80039ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b20      	cmp	r3, #32
 800394a:	d10e      	bne.n	800396a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d107      	bne.n	800396a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0220 	mvn.w	r2, #32
 8003962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f89b 	bl	8003aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a2e      	ldr	r2, [pc, #184]	; (8003a90 <TIM_Base_SetConfig+0xcc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_Base_SetConfig+0x28>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d003      	beq.n	80039ec <TIM_Base_SetConfig+0x28>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a2b      	ldr	r2, [pc, #172]	; (8003a94 <TIM_Base_SetConfig+0xd0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d108      	bne.n	80039fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <TIM_Base_SetConfig+0xcc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_Base_SetConfig+0x62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0c:	d00b      	beq.n	8003a26 <TIM_Base_SetConfig+0x62>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a20      	ldr	r2, [pc, #128]	; (8003a94 <TIM_Base_SetConfig+0xd0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_Base_SetConfig+0x62>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <TIM_Base_SetConfig+0xd4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_Base_SetConfig+0x62>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <TIM_Base_SetConfig+0xd8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d108      	bne.n	8003a38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <TIM_Base_SetConfig+0xcc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0xb0>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <TIM_Base_SetConfig+0xd4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0xb0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a0b      	ldr	r2, [pc, #44]	; (8003a9c <TIM_Base_SetConfig+0xd8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d103      	bne.n	8003a7c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	615a      	str	r2, [r3, #20]
}
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400

08003aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aee:	2b84      	cmp	r3, #132	; 0x84
 8003af0:	d005      	beq.n	8003afe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003af2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4413      	add	r3, r2
 8003afa:	3303      	adds	r3, #3
 8003afc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b10:	f000 faf6 	bl	8004100 <vTaskStartScheduler>
  
  return osOK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1c:	b089      	sub	sp, #36	; 0x24
 8003b1e:	af04      	add	r7, sp, #16
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d020      	beq.n	8003b6e <osThreadCreate+0x54>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01c      	beq.n	8003b6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685c      	ldr	r4, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681d      	ldr	r5, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691e      	ldr	r6, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff ffc8 	bl	8003adc <makeFreeRtosPriority>
 8003b4c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b56:	9202      	str	r2, [sp, #8]
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	9100      	str	r1, [sp, #0]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	4632      	mov	r2, r6
 8003b60:	4629      	mov	r1, r5
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 f8ed 	bl	8003d42 <xTaskCreateStatic>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e01c      	b.n	8003ba8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685c      	ldr	r4, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b7a:	b29e      	uxth	r6, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ffaa 	bl	8003adc <makeFreeRtosPriority>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f107 030c 	add.w	r3, r7, #12
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	9200      	str	r2, [sp, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	4632      	mov	r2, r6
 8003b96:	4629      	mov	r1, r5
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f000 f92f 	bl	8003dfc <xTaskCreate>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d001      	beq.n	8003ba8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <osDelay+0x16>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	e000      	b.n	8003bca <osDelay+0x18>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fa64 	bl	8004098 <vTaskDelay>
  
  return osOK;
 8003bd0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f103 0208 	add.w	r2, r3, #8
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f103 0208 	add.w	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f103 0208 	add.w	r2, r3, #8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	601a      	str	r2, [r3, #0]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d103      	bne.n	8003c9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e00c      	b.n	8003cb6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e002      	b.n	8003caa <vListInsert+0x2e>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d2f6      	bcs.n	8003ca4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6892      	ldr	r2, [r2, #8]
 8003d04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6852      	ldr	r2, [r2, #4]
 8003d0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d103      	bne.n	8003d22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b08e      	sub	sp, #56	; 0x38
 8003d46:	af04      	add	r7, sp, #16
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <xTaskCreateStatic+0x46>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	61fb      	str	r3, [r7, #28]
}
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d88:	23b4      	movs	r3, #180	; 0xb4
 8003d8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2bb4      	cmp	r3, #180	; 0xb4
 8003d90:	d00a      	beq.n	8003da8 <xTaskCreateStatic+0x66>
	__asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	61bb      	str	r3, [r7, #24]
}
 8003da4:	bf00      	nop
 8003da6:	e7fe      	b.n	8003da6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003da8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01e      	beq.n	8003dee <xTaskCreateStatic+0xac>
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01b      	beq.n	8003dee <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9303      	str	r3, [sp, #12]
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	9302      	str	r3, [sp, #8]
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f851 	bl	8003e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003de8:	f000 f8ec 	bl	8003fc4 <prvAddNewTaskToReadyList>
 8003dec:	e001      	b.n	8003df2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003df2:	697b      	ldr	r3, [r7, #20]
	}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3728      	adds	r7, #40	; 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08c      	sub	sp, #48	; 0x30
 8003e00:	af04      	add	r7, sp, #16
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fef1 	bl	8004bf8 <pvPortMalloc>
 8003e16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00e      	beq.n	8003e3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e1e:	20b4      	movs	r0, #180	; 0xb4
 8003e20:	f000 feea 	bl	8004bf8 <pvPortMalloc>
 8003e24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
 8003e32:	e005      	b.n	8003e40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e34:	6978      	ldr	r0, [r7, #20]
 8003e36:	f000 ffab 	bl	8004d90 <vPortFree>
 8003e3a:	e001      	b.n	8003e40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	2300      	movs	r3, #0
 8003e52:	9303      	str	r3, [sp, #12]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	9302      	str	r3, [sp, #8]
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f80f 	bl	8003e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e6a:	69f8      	ldr	r0, [r7, #28]
 8003e6c:	f000 f8aa 	bl	8003fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e70:	2301      	movs	r3, #1
 8003e72:	61bb      	str	r3, [r7, #24]
 8003e74:	e002      	b.n	8003e7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
	}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f023 0307 	bic.w	r3, r3, #7
 8003eae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	617b      	str	r3, [r7, #20]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01f      	beq.n	8003f16 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e012      	b.n	8003f02 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	7819      	ldrb	r1, [r3, #0]
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3334      	adds	r3, #52	; 0x34
 8003eec:	460a      	mov	r2, r1
 8003eee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b0f      	cmp	r3, #15
 8003f06:	d9e9      	bls.n	8003edc <prvInitialiseNewTask+0x54>
 8003f08:	e000      	b.n	8003f0c <prvInitialiseNewTask+0x84>
			{
				break;
 8003f0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f14:	e003      	b.n	8003f1e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	2b06      	cmp	r3, #6
 8003f22:	d901      	bls.n	8003f28 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f24:	2306      	movs	r3, #6
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f32:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	2200      	movs	r2, #0
 8003f38:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fe6b 	bl	8003c1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	3318      	adds	r3, #24
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fe66 	bl	8003c1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	f1c3 0207 	rsb	r2, r3, #7
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	334c      	adds	r3, #76	; 0x4c
 8003f78:	2260      	movs	r2, #96	; 0x60
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 f948 	bl	8005212 <memset>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <prvInitialiseNewTask+0x130>)
 8003f86:	651a      	str	r2, [r3, #80]	; 0x50
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <prvInitialiseNewTask+0x134>)
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <prvInitialiseNewTask+0x138>)
 8003f92:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	69b8      	ldr	r0, [r7, #24]
 8003f9a:	f000 fc1f 	bl	80047dc <pxPortInitialiseStack>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fb0:	bf00      	nop
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	080060dc 	.word	0x080060dc
 8003fbc:	080060fc 	.word	0x080060fc
 8003fc0:	080060bc 	.word	0x080060bc

08003fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fcc:	f000 fd32 	bl	8004a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <prvAddNewTaskToReadyList+0xb8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	4a29      	ldr	r2, [pc, #164]	; (800407c <prvAddNewTaskToReadyList+0xb8>)
 8003fd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fda:	4b29      	ldr	r3, [pc, #164]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fe2:	4a27      	ldr	r2, [pc, #156]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fe8:	4b24      	ldr	r3, [pc, #144]	; (800407c <prvAddNewTaskToReadyList+0xb8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d110      	bne.n	8004012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ff0:	f000 facc 	bl	800458c <prvInitialiseTaskLists>
 8003ff4:	e00d      	b.n	8004012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <prvAddNewTaskToReadyList+0xc0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	429a      	cmp	r2, r3
 800400a:	d802      	bhi.n	8004012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800400c:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <prvAddNewTaskToReadyList+0xc4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3301      	adds	r3, #1
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <prvAddNewTaskToReadyList+0xc4>)
 800401a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	2201      	movs	r2, #1
 8004022:	409a      	lsls	r2, r3
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <prvAddNewTaskToReadyList+0xc8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4313      	orrs	r3, r2
 800402a:	4a18      	ldr	r2, [pc, #96]	; (800408c <prvAddNewTaskToReadyList+0xc8>)
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4a15      	ldr	r2, [pc, #84]	; (8004090 <prvAddNewTaskToReadyList+0xcc>)
 800403c:	441a      	add	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7ff fdf5 	bl	8003c34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800404a:	f000 fd23 	bl	8004a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <prvAddNewTaskToReadyList+0xc0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00e      	beq.n	8004074 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <prvAddNewTaskToReadyList+0xbc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	429a      	cmp	r2, r3
 8004062:	d207      	bcs.n	8004074 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <prvAddNewTaskToReadyList+0xd0>)
 8004066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004074:	bf00      	nop
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	2000065c 	.word	0x2000065c
 8004080:	2000055c 	.word	0x2000055c
 8004084:	20000668 	.word	0x20000668
 8004088:	20000678 	.word	0x20000678
 800408c:	20000664 	.word	0x20000664
 8004090:	20000560 	.word	0x20000560
 8004094:	e000ed04 	.word	0xe000ed04

08004098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d017      	beq.n	80040da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <vTaskDelay+0x60>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <vTaskDelay+0x30>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60bb      	str	r3, [r7, #8]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040c8:	f000 f884 	bl	80041d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040cc:	2100      	movs	r1, #0
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fb1e 	bl	8004710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040d4:	f000 f88c 	bl	80041f0 <xTaskResumeAll>
 80040d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d107      	bne.n	80040f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80040e0:	4b06      	ldr	r3, [pc, #24]	; (80040fc <vTaskDelay+0x64>)
 80040e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000684 	.word	0x20000684
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800410e:	463a      	mov	r2, r7
 8004110:	1d39      	adds	r1, r7, #4
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc f8fa 	bl	8000310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	9202      	str	r2, [sp, #8]
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	2300      	movs	r3, #0
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	2300      	movs	r3, #0
 800412c:	460a      	mov	r2, r1
 800412e:	4921      	ldr	r1, [pc, #132]	; (80041b4 <vTaskStartScheduler+0xb4>)
 8004130:	4821      	ldr	r0, [pc, #132]	; (80041b8 <vTaskStartScheduler+0xb8>)
 8004132:	f7ff fe06 	bl	8003d42 <xTaskCreateStatic>
 8004136:	4603      	mov	r3, r0
 8004138:	4a20      	ldr	r2, [pc, #128]	; (80041bc <vTaskStartScheduler+0xbc>)
 800413a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800413c:	4b1f      	ldr	r3, [pc, #124]	; (80041bc <vTaskStartScheduler+0xbc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004144:	2301      	movs	r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e001      	b.n	800414e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d11b      	bne.n	800418c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	613b      	str	r3, [r7, #16]
}
 8004166:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004168:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <vTaskStartScheduler+0xc0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	334c      	adds	r3, #76	; 0x4c
 800416e:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <vTaskStartScheduler+0xc4>)
 8004170:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <vTaskStartScheduler+0xc8>)
 8004174:	f04f 32ff 	mov.w	r2, #4294967295
 8004178:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <vTaskStartScheduler+0xcc>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <vTaskStartScheduler+0xd0>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004186:	f000 fbb3 	bl	80048f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800418a:	e00e      	b.n	80041aa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d10a      	bne.n	80041aa <vTaskStartScheduler+0xaa>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	60fb      	str	r3, [r7, #12]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <vTaskStartScheduler+0xa8>
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	0800606c 	.word	0x0800606c
 80041b8:	0800455d 	.word	0x0800455d
 80041bc:	20000680 	.word	0x20000680
 80041c0:	2000055c 	.word	0x2000055c
 80041c4:	20000010 	.word	0x20000010
 80041c8:	2000067c 	.word	0x2000067c
 80041cc:	20000668 	.word	0x20000668
 80041d0:	20000660 	.word	0x20000660

080041d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <vTaskSuspendAll+0x18>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3301      	adds	r3, #1
 80041de:	4a03      	ldr	r2, [pc, #12]	; (80041ec <vTaskSuspendAll+0x18>)
 80041e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041e2:	bf00      	nop
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	20000684 	.word	0x20000684

080041f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041fe:	4b41      	ldr	r3, [pc, #260]	; (8004304 <xTaskResumeAll+0x114>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <xTaskResumeAll+0x2c>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	603b      	str	r3, [r7, #0]
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800421c:	f000 fc0a 	bl	8004a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004220:	4b38      	ldr	r3, [pc, #224]	; (8004304 <xTaskResumeAll+0x114>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3b01      	subs	r3, #1
 8004226:	4a37      	ldr	r2, [pc, #220]	; (8004304 <xTaskResumeAll+0x114>)
 8004228:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800422a:	4b36      	ldr	r3, [pc, #216]	; (8004304 <xTaskResumeAll+0x114>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d161      	bne.n	80042f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004232:	4b35      	ldr	r3, [pc, #212]	; (8004308 <xTaskResumeAll+0x118>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d05d      	beq.n	80042f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800423a:	e02e      	b.n	800429a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423c:	4b33      	ldr	r3, [pc, #204]	; (800430c <xTaskResumeAll+0x11c>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3318      	adds	r3, #24
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fd50 	bl	8003cee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3304      	adds	r3, #4
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fd4b 	bl	8003cee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	2201      	movs	r2, #1
 800425e:	409a      	lsls	r2, r3
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <xTaskResumeAll+0x120>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4313      	orrs	r3, r2
 8004266:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <xTaskResumeAll+0x120>)
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4a27      	ldr	r2, [pc, #156]	; (8004314 <xTaskResumeAll+0x124>)
 8004278:	441a      	add	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7ff fcd7 	bl	8003c34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428a:	4b23      	ldr	r3, [pc, #140]	; (8004318 <xTaskResumeAll+0x128>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	429a      	cmp	r2, r3
 8004292:	d302      	bcc.n	800429a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004294:	4b21      	ldr	r3, [pc, #132]	; (800431c <xTaskResumeAll+0x12c>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800429a:	4b1c      	ldr	r3, [pc, #112]	; (800430c <xTaskResumeAll+0x11c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1cc      	bne.n	800423c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80042a8:	f000 fa12 	bl	80046d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042ac:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <xTaskResumeAll+0x130>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d010      	beq.n	80042da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042b8:	f000 f836 	bl	8004328 <xTaskIncrementTick>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <xTaskResumeAll+0x12c>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f1      	bne.n	80042b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <xTaskResumeAll+0x130>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <xTaskResumeAll+0x12c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042e2:	2301      	movs	r3, #1
 80042e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <xTaskResumeAll+0x134>)
 80042e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042f6:	f000 fbcd 	bl	8004a94 <vPortExitCritical>

	return xAlreadyYielded;
 80042fa:	68bb      	ldr	r3, [r7, #8]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000684 	.word	0x20000684
 8004308:	2000065c 	.word	0x2000065c
 800430c:	2000061c 	.word	0x2000061c
 8004310:	20000664 	.word	0x20000664
 8004314:	20000560 	.word	0x20000560
 8004318:	2000055c 	.word	0x2000055c
 800431c:	20000670 	.word	0x20000670
 8004320:	2000066c 	.word	0x2000066c
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004332:	4b4e      	ldr	r3, [pc, #312]	; (800446c <xTaskIncrementTick+0x144>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 808e 	bne.w	8004458 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800433c:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <xTaskIncrementTick+0x148>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3301      	adds	r3, #1
 8004342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004344:	4a4a      	ldr	r2, [pc, #296]	; (8004470 <xTaskIncrementTick+0x148>)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d120      	bne.n	8004392 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004350:	4b48      	ldr	r3, [pc, #288]	; (8004474 <xTaskIncrementTick+0x14c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <xTaskIncrementTick+0x48>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	603b      	str	r3, [r7, #0]
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <xTaskIncrementTick+0x46>
 8004370:	4b40      	ldr	r3, [pc, #256]	; (8004474 <xTaskIncrementTick+0x14c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	4b40      	ldr	r3, [pc, #256]	; (8004478 <xTaskIncrementTick+0x150>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3e      	ldr	r2, [pc, #248]	; (8004474 <xTaskIncrementTick+0x14c>)
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4a3e      	ldr	r2, [pc, #248]	; (8004478 <xTaskIncrementTick+0x150>)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b3d      	ldr	r3, [pc, #244]	; (800447c <xTaskIncrementTick+0x154>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	4a3c      	ldr	r2, [pc, #240]	; (800447c <xTaskIncrementTick+0x154>)
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	f000 f99f 	bl	80046d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004392:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <xTaskIncrementTick+0x158>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	429a      	cmp	r2, r3
 800439a:	d348      	bcc.n	800442e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439c:	4b35      	ldr	r3, [pc, #212]	; (8004474 <xTaskIncrementTick+0x14c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a6:	4b36      	ldr	r3, [pc, #216]	; (8004480 <xTaskIncrementTick+0x158>)
 80043a8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ac:	601a      	str	r2, [r3, #0]
					break;
 80043ae:	e03e      	b.n	800442e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b0:	4b30      	ldr	r3, [pc, #192]	; (8004474 <xTaskIncrementTick+0x14c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d203      	bcs.n	80043d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043c8:	4a2d      	ldr	r2, [pc, #180]	; (8004480 <xTaskIncrementTick+0x158>)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043ce:	e02e      	b.n	800442e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fc8a 	bl	8003cee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	3318      	adds	r3, #24
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fc81 	bl	8003cee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	2201      	movs	r2, #1
 80043f2:	409a      	lsls	r2, r3
 80043f4:	4b23      	ldr	r3, [pc, #140]	; (8004484 <xTaskIncrementTick+0x15c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	4a22      	ldr	r2, [pc, #136]	; (8004484 <xTaskIncrementTick+0x15c>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <xTaskIncrementTick+0x160>)
 800440c:	441a      	add	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	3304      	adds	r3, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f7ff fc0d 	bl	8003c34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4b1b      	ldr	r3, [pc, #108]	; (800448c <xTaskIncrementTick+0x164>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	429a      	cmp	r2, r3
 8004426:	d3b9      	bcc.n	800439c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004428:	2301      	movs	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800442c:	e7b6      	b.n	800439c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800442e:	4b17      	ldr	r3, [pc, #92]	; (800448c <xTaskIncrementTick+0x164>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004434:	4914      	ldr	r1, [pc, #80]	; (8004488 <xTaskIncrementTick+0x160>)
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d901      	bls.n	800444a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004446:	2301      	movs	r3, #1
 8004448:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <xTaskIncrementTick+0x168>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004452:	2301      	movs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e004      	b.n	8004462 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <xTaskIncrementTick+0x16c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <xTaskIncrementTick+0x16c>)
 8004460:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004462:	697b      	ldr	r3, [r7, #20]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000684 	.word	0x20000684
 8004470:	20000660 	.word	0x20000660
 8004474:	20000614 	.word	0x20000614
 8004478:	20000618 	.word	0x20000618
 800447c:	20000674 	.word	0x20000674
 8004480:	2000067c 	.word	0x2000067c
 8004484:	20000664 	.word	0x20000664
 8004488:	20000560 	.word	0x20000560
 800448c:	2000055c 	.word	0x2000055c
 8004490:	20000670 	.word	0x20000670
 8004494:	2000066c 	.word	0x2000066c

08004498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <vTaskSwitchContext+0xac>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044a6:	4b28      	ldr	r3, [pc, #160]	; (8004548 <vTaskSwitchContext+0xb0>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044ac:	e044      	b.n	8004538 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80044ae:	4b26      	ldr	r3, [pc, #152]	; (8004548 <vTaskSwitchContext+0xb0>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <vTaskSwitchContext+0xb4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80044c2:	7afb      	ldrb	r3, [r7, #11]
 80044c4:	f1c3 031f 	rsb	r3, r3, #31
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	4921      	ldr	r1, [pc, #132]	; (8004550 <vTaskSwitchContext+0xb8>)
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <vTaskSwitchContext+0x5a>
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4a14      	ldr	r2, [pc, #80]	; (8004550 <vTaskSwitchContext+0xb8>)
 8004500:	4413      	add	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	3308      	adds	r3, #8
 8004516:	429a      	cmp	r2, r3
 8004518:	d104      	bne.n	8004524 <vTaskSwitchContext+0x8c>
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <vTaskSwitchContext+0xbc>)
 800452c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <vTaskSwitchContext+0xbc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	334c      	adds	r3, #76	; 0x4c
 8004534:	4a08      	ldr	r2, [pc, #32]	; (8004558 <vTaskSwitchContext+0xc0>)
 8004536:	6013      	str	r3, [r2, #0]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	20000684 	.word	0x20000684
 8004548:	20000670 	.word	0x20000670
 800454c:	20000664 	.word	0x20000664
 8004550:	20000560 	.word	0x20000560
 8004554:	2000055c 	.word	0x2000055c
 8004558:	20000010 	.word	0x20000010

0800455c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004564:	f000 f852 	bl	800460c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <prvIdleTask+0x28>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d9f9      	bls.n	8004564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <prvIdleTask+0x2c>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004580:	e7f0      	b.n	8004564 <prvIdleTask+0x8>
 8004582:	bf00      	nop
 8004584:	20000560 	.word	0x20000560
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	e00c      	b.n	80045b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4a12      	ldr	r2, [pc, #72]	; (80045ec <prvInitialiseTaskLists+0x60>)
 80045a4:	4413      	add	r3, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff fb17 	bl	8003bda <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3301      	adds	r3, #1
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b06      	cmp	r3, #6
 80045b6:	d9ef      	bls.n	8004598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045b8:	480d      	ldr	r0, [pc, #52]	; (80045f0 <prvInitialiseTaskLists+0x64>)
 80045ba:	f7ff fb0e 	bl	8003bda <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045be:	480d      	ldr	r0, [pc, #52]	; (80045f4 <prvInitialiseTaskLists+0x68>)
 80045c0:	f7ff fb0b 	bl	8003bda <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045c4:	480c      	ldr	r0, [pc, #48]	; (80045f8 <prvInitialiseTaskLists+0x6c>)
 80045c6:	f7ff fb08 	bl	8003bda <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045ca:	480c      	ldr	r0, [pc, #48]	; (80045fc <prvInitialiseTaskLists+0x70>)
 80045cc:	f7ff fb05 	bl	8003bda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045d0:	480b      	ldr	r0, [pc, #44]	; (8004600 <prvInitialiseTaskLists+0x74>)
 80045d2:	f7ff fb02 	bl	8003bda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <prvInitialiseTaskLists+0x78>)
 80045d8:	4a05      	ldr	r2, [pc, #20]	; (80045f0 <prvInitialiseTaskLists+0x64>)
 80045da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <prvInitialiseTaskLists+0x7c>)
 80045de:	4a05      	ldr	r2, [pc, #20]	; (80045f4 <prvInitialiseTaskLists+0x68>)
 80045e0:	601a      	str	r2, [r3, #0]
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000560 	.word	0x20000560
 80045f0:	200005ec 	.word	0x200005ec
 80045f4:	20000600 	.word	0x20000600
 80045f8:	2000061c 	.word	0x2000061c
 80045fc:	20000630 	.word	0x20000630
 8004600:	20000648 	.word	0x20000648
 8004604:	20000614 	.word	0x20000614
 8004608:	20000618 	.word	0x20000618

0800460c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004612:	e019      	b.n	8004648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004614:	f000 fa0e 	bl	8004a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004618:	4b10      	ldr	r3, [pc, #64]	; (800465c <prvCheckTasksWaitingTermination+0x50>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fb62 	bl	8003cee <uxListRemove>
				--uxCurrentNumberOfTasks;
 800462a:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <prvCheckTasksWaitingTermination+0x54>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3b01      	subs	r3, #1
 8004630:	4a0b      	ldr	r2, [pc, #44]	; (8004660 <prvCheckTasksWaitingTermination+0x54>)
 8004632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <prvCheckTasksWaitingTermination+0x58>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3b01      	subs	r3, #1
 800463a:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <prvCheckTasksWaitingTermination+0x58>)
 800463c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800463e:	f000 fa29 	bl	8004a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f810 	bl	8004668 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <prvCheckTasksWaitingTermination+0x58>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e1      	bne.n	8004614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000630 	.word	0x20000630
 8004660:	2000065c 	.word	0x2000065c
 8004664:	20000644 	.word	0x20000644

08004668 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	334c      	adds	r3, #76	; 0x4c
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fe8f 	bl	8005398 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d108      	bne.n	8004696 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fb81 	bl	8004d90 <vPortFree>
				vPortFree( pxTCB );
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fb7e 	bl	8004d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004694:	e018      	b.n	80046c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d103      	bne.n	80046a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fb75 	bl	8004d90 <vPortFree>
	}
 80046a6:	e00f      	b.n	80046c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d00a      	beq.n	80046c8 <prvDeleteTCB+0x60>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	60fb      	str	r3, [r7, #12]
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <prvDeleteTCB+0x5e>
	}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <prvResetNextTaskUnblockTime+0x38>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046e0:	4b0a      	ldr	r3, [pc, #40]	; (800470c <prvResetNextTaskUnblockTime+0x3c>)
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046e8:	e008      	b.n	80046fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <prvResetNextTaskUnblockTime+0x38>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4a04      	ldr	r2, [pc, #16]	; (800470c <prvResetNextTaskUnblockTime+0x3c>)
 80046fa:	6013      	str	r3, [r2, #0]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	20000614 	.word	0x20000614
 800470c:	2000067c 	.word	0x2000067c

08004710 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800471a:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3304      	adds	r3, #4
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fae1 	bl	8003cee <uxListRemove>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	2201      	movs	r2, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43da      	mvns	r2, r3
 8004740:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4013      	ands	r3, r2
 8004746:	4a20      	ldr	r2, [pc, #128]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004748:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d10a      	bne.n	8004768 <prvAddCurrentTaskToDelayedList+0x58>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3304      	adds	r3, #4
 800475e:	4619      	mov	r1, r3
 8004760:	481a      	ldr	r0, [pc, #104]	; (80047cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004762:	f7ff fa67 	bl	8003c34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004766:	e026      	b.n	80047b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	d209      	bcs.n	8004794 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3304      	adds	r3, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f7ff fa75 	bl	8003c7c <vListInsert>
}
 8004792:	e010      	b.n	80047b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3304      	adds	r3, #4
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f7ff fa6b 	bl	8003c7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047a6:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d202      	bcs.n	80047b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047b0:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6013      	str	r3, [r2, #0]
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000660 	.word	0x20000660
 80047c4:	2000055c 	.word	0x2000055c
 80047c8:	20000664 	.word	0x20000664
 80047cc:	20000648 	.word	0x20000648
 80047d0:	20000618 	.word	0x20000618
 80047d4:	20000614 	.word	0x20000614
 80047d8:	2000067c 	.word	0x2000067c

080047dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3b04      	subs	r3, #4
 80047ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3b04      	subs	r3, #4
 80047fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f023 0201 	bic.w	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3b04      	subs	r3, #4
 800480a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800480c:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <pxPortInitialiseStack+0x64>)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3b14      	subs	r3, #20
 8004816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3b04      	subs	r3, #4
 8004822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f06f 0202 	mvn.w	r2, #2
 800482a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3b20      	subs	r3, #32
 8004830:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004832:	68fb      	ldr	r3, [r7, #12]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	08004845 	.word	0x08004845

08004844 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <prvTaskExitError+0x54>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d00a      	beq.n	800486e <prvTaskExitError+0x2a>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	60fb      	str	r3, [r7, #12]
}
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <prvTaskExitError+0x28>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	60bb      	str	r3, [r7, #8]
}
 8004880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004882:	bf00      	nop
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0fc      	beq.n	8004884 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800488a:	bf00      	nop
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	2000000c 	.word	0x2000000c
 800489c:	00000000 	.word	0x00000000

080048a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <pxCurrentTCBConst2>)
 80048a2:	6819      	ldr	r1, [r3, #0]
 80048a4:	6808      	ldr	r0, [r1, #0]
 80048a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048aa:	f380 8809 	msr	PSP, r0
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f04f 0000 	mov.w	r0, #0
 80048b6:	f380 8811 	msr	BASEPRI, r0
 80048ba:	4770      	bx	lr
 80048bc:	f3af 8000 	nop.w

080048c0 <pxCurrentTCBConst2>:
 80048c0:	2000055c 	.word	0x2000055c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop

080048c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80048c8:	4808      	ldr	r0, [pc, #32]	; (80048ec <prvPortStartFirstTask+0x24>)
 80048ca:	6800      	ldr	r0, [r0, #0]
 80048cc:	6800      	ldr	r0, [r0, #0]
 80048ce:	f380 8808 	msr	MSP, r0
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f380 8814 	msr	CONTROL, r0
 80048da:	b662      	cpsie	i
 80048dc:	b661      	cpsie	f
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	df00      	svc	0
 80048e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048ea:	bf00      	nop
 80048ec:	e000ed08 	.word	0xe000ed08

080048f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048f6:	4b46      	ldr	r3, [pc, #280]	; (8004a10 <xPortStartScheduler+0x120>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a46      	ldr	r2, [pc, #280]	; (8004a14 <xPortStartScheduler+0x124>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d10a      	bne.n	8004916 <xPortStartScheduler+0x26>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	613b      	str	r3, [r7, #16]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004916:	4b3e      	ldr	r3, [pc, #248]	; (8004a10 <xPortStartScheduler+0x120>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a3f      	ldr	r2, [pc, #252]	; (8004a18 <xPortStartScheduler+0x128>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10a      	bne.n	8004936 <xPortStartScheduler+0x46>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60fb      	str	r3, [r7, #12]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004936:	4b39      	ldr	r3, [pc, #228]	; (8004a1c <xPortStartScheduler+0x12c>)
 8004938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	22ff      	movs	r2, #255	; 0xff
 8004946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004958:	b2da      	uxtb	r2, r3
 800495a:	4b31      	ldr	r3, [pc, #196]	; (8004a20 <xPortStartScheduler+0x130>)
 800495c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800495e:	4b31      	ldr	r3, [pc, #196]	; (8004a24 <xPortStartScheduler+0x134>)
 8004960:	2207      	movs	r2, #7
 8004962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004964:	e009      	b.n	800497a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004966:	4b2f      	ldr	r3, [pc, #188]	; (8004a24 <xPortStartScheduler+0x134>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3b01      	subs	r3, #1
 800496c:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <xPortStartScheduler+0x134>)
 800496e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d0ef      	beq.n	8004966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004986:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <xPortStartScheduler+0x134>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1c3 0307 	rsb	r3, r3, #7
 800498e:	2b04      	cmp	r3, #4
 8004990:	d00a      	beq.n	80049a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60bb      	str	r3, [r7, #8]
}
 80049a4:	bf00      	nop
 80049a6:	e7fe      	b.n	80049a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049a8:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <xPortStartScheduler+0x134>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	4a1d      	ldr	r2, [pc, #116]	; (8004a24 <xPortStartScheduler+0x134>)
 80049b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <xPortStartScheduler+0x134>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ba:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <xPortStartScheduler+0x134>)
 80049bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049c6:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <xPortStartScheduler+0x138>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <xPortStartScheduler+0x138>)
 80049cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <xPortStartScheduler+0x138>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <xPortStartScheduler+0x138>)
 80049d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049de:	f000 f8dd 	bl	8004b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049e2:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <xPortStartScheduler+0x13c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049e8:	f000 f8fc 	bl	8004be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049ec:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <xPortStartScheduler+0x140>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0f      	ldr	r2, [pc, #60]	; (8004a30 <xPortStartScheduler+0x140>)
 80049f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049f8:	f7ff ff66 	bl	80048c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049fc:	f7ff fd4c 	bl	8004498 <vTaskSwitchContext>
	prvTaskExitError();
 8004a00:	f7ff ff20 	bl	8004844 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	e000ed00 	.word	0xe000ed00
 8004a14:	410fc271 	.word	0x410fc271
 8004a18:	410fc270 	.word	0x410fc270
 8004a1c:	e000e400 	.word	0xe000e400
 8004a20:	20000688 	.word	0x20000688
 8004a24:	2000068c 	.word	0x2000068c
 8004a28:	e000ed20 	.word	0xe000ed20
 8004a2c:	2000000c 	.word	0x2000000c
 8004a30:	e000ef34 	.word	0xe000ef34

08004a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	607b      	str	r3, [r7, #4]
}
 8004a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <vPortEnterCritical+0x58>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <vPortEnterCritical+0x58>)
 8004a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <vPortEnterCritical+0x58>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d10f      	bne.n	8004a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <vPortEnterCritical+0x5c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	603b      	str	r3, [r7, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	e7fe      	b.n	8004a7e <vPortEnterCritical+0x4a>
	}
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	2000000c 	.word	0x2000000c
 8004a90:	e000ed04 	.word	0xe000ed04

08004a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a9a:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <vPortExitCritical+0x50>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10a      	bne.n	8004ab8 <vPortExitCritical+0x24>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	607b      	str	r3, [r7, #4]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <vPortExitCritical+0x50>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <vPortExitCritical+0x50>)
 8004ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ac2:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <vPortExitCritical+0x50>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d105      	bne.n	8004ad6 <vPortExitCritical+0x42>
 8004aca:	2300      	movs	r3, #0
 8004acc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	2000000c 	.word	0x2000000c
	...

08004af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004af0:	f3ef 8009 	mrs	r0, PSP
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <pxCurrentTCBConst>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	f01e 0f10 	tst.w	lr, #16
 8004b00:	bf08      	it	eq
 8004b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0a:	6010      	str	r0, [r2, #0]
 8004b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b14:	f380 8811 	msr	BASEPRI, r0
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f7ff fcba 	bl	8004498 <vTaskSwitchContext>
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f380 8811 	msr	BASEPRI, r0
 8004b2c:	bc09      	pop	{r0, r3}
 8004b2e:	6819      	ldr	r1, [r3, #0]
 8004b30:	6808      	ldr	r0, [r1, #0]
 8004b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b36:	f01e 0f10 	tst.w	lr, #16
 8004b3a:	bf08      	it	eq
 8004b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b40:	f380 8809 	msr	PSP, r0
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	f3af 8000 	nop.w

08004b50 <pxCurrentTCBConst>:
 8004b50:	2000055c 	.word	0x2000055c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop

08004b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	607b      	str	r3, [r7, #4]
}
 8004b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b72:	f7ff fbd9 	bl	8004328 <xTaskIncrementTick>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <SysTick_Handler+0x40>)
 8004b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f383 8811 	msr	BASEPRI, r3
}
 8004b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	e000ed04 	.word	0xe000ed04

08004b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <vPortSetupTimerInterrupt+0x34>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <vPortSetupTimerInterrupt+0x38>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <vPortSetupTimerInterrupt+0x3c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <vPortSetupTimerInterrupt+0x40>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	099b      	lsrs	r3, r3, #6
 8004bb8:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <vPortSetupTimerInterrupt+0x44>)
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <vPortSetupTimerInterrupt+0x34>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000e010 	.word	0xe000e010
 8004bd4:	e000e018 	.word	0xe000e018
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	10624dd3 	.word	0x10624dd3
 8004be0:	e000e014 	.word	0xe000e014

08004be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004bf4 <vPortEnableVFP+0x10>
 8004be8:	6801      	ldr	r1, [r0, #0]
 8004bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bee:	6001      	str	r1, [r0, #0]
 8004bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bf2:	bf00      	nop
 8004bf4:	e000ed88 	.word	0xe000ed88

08004bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c04:	f7ff fae6 	bl	80041d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c08:	4b5b      	ldr	r3, [pc, #364]	; (8004d78 <pvPortMalloc+0x180>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c10:	f000 f920 	bl	8004e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c14:	4b59      	ldr	r3, [pc, #356]	; (8004d7c <pvPortMalloc+0x184>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f040 8093 	bne.w	8004d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01d      	beq.n	8004c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c28:	2208      	movs	r2, #8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d014      	beq.n	8004c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f023 0307 	bic.w	r3, r3, #7
 8004c40:	3308      	adds	r3, #8
 8004c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <pvPortMalloc+0x6c>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	617b      	str	r3, [r7, #20]
}
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d06e      	beq.n	8004d48 <pvPortMalloc+0x150>
 8004c6a:	4b45      	ldr	r3, [pc, #276]	; (8004d80 <pvPortMalloc+0x188>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d869      	bhi.n	8004d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c74:	4b43      	ldr	r3, [pc, #268]	; (8004d84 <pvPortMalloc+0x18c>)
 8004c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c78:	4b42      	ldr	r3, [pc, #264]	; (8004d84 <pvPortMalloc+0x18c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c7e:	e004      	b.n	8004c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d903      	bls.n	8004c9c <pvPortMalloc+0xa4>
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f1      	bne.n	8004c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c9c:	4b36      	ldr	r3, [pc, #216]	; (8004d78 <pvPortMalloc+0x180>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d050      	beq.n	8004d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2208      	movs	r2, #8
 8004cac:	4413      	add	r3, r2
 8004cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	1ad2      	subs	r2, r2, r3
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d91f      	bls.n	8004d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4413      	add	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	613b      	str	r3, [r7, #16]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d02:	69b8      	ldr	r0, [r7, #24]
 8004d04:	f000 f908 	bl	8004f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <pvPortMalloc+0x188>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <pvPortMalloc+0x188>)
 8004d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d16:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <pvPortMalloc+0x188>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <pvPortMalloc+0x190>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d203      	bcs.n	8004d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d22:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <pvPortMalloc+0x188>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <pvPortMalloc+0x190>)
 8004d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <pvPortMalloc+0x184>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d3e:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <pvPortMalloc+0x194>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3301      	adds	r3, #1
 8004d44:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <pvPortMalloc+0x194>)
 8004d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d48:	f7ff fa52 	bl	80041f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <pvPortMalloc+0x174>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60fb      	str	r3, [r7, #12]
}
 8004d68:	bf00      	nop
 8004d6a:	e7fe      	b.n	8004d6a <pvPortMalloc+0x172>
	return pvReturn;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3728      	adds	r7, #40	; 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20001250 	.word	0x20001250
 8004d7c:	20001264 	.word	0x20001264
 8004d80:	20001254 	.word	0x20001254
 8004d84:	20001248 	.word	0x20001248
 8004d88:	20001258 	.word	0x20001258
 8004d8c:	2000125c 	.word	0x2000125c

08004d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d04d      	beq.n	8004e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004da2:	2308      	movs	r3, #8
 8004da4:	425b      	negs	r3, r3
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4413      	add	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <vPortFree+0xb8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <vPortFree+0x44>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	60fb      	str	r3, [r7, #12]
}
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00a      	beq.n	8004df2 <vPortFree+0x62>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	60bb      	str	r3, [r7, #8]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <vPortFree+0xb8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01e      	beq.n	8004e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11a      	bne.n	8004e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4b0e      	ldr	r3, [pc, #56]	; (8004e48 <vPortFree+0xb8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	401a      	ands	r2, r3
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e18:	f7ff f9dc 	bl	80041d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <vPortFree+0xbc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4413      	add	r3, r2
 8004e26:	4a09      	ldr	r2, [pc, #36]	; (8004e4c <vPortFree+0xbc>)
 8004e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e2a:	6938      	ldr	r0, [r7, #16]
 8004e2c:	f000 f874 	bl	8004f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <vPortFree+0xc0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3301      	adds	r3, #1
 8004e36:	4a06      	ldr	r2, [pc, #24]	; (8004e50 <vPortFree+0xc0>)
 8004e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e3a:	f7ff f9d9 	bl	80041f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e3e:	bf00      	nop
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20001264 	.word	0x20001264
 8004e4c:	20001254 	.word	0x20001254
 8004e50:	20001260 	.word	0x20001260

08004e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e60:	4b27      	ldr	r3, [pc, #156]	; (8004f00 <prvHeapInit+0xac>)
 8004e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00c      	beq.n	8004e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3307      	adds	r3, #7
 8004e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0307 	bic.w	r3, r3, #7
 8004e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	4a1f      	ldr	r2, [pc, #124]	; (8004f00 <prvHeapInit+0xac>)
 8004e84:	4413      	add	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e8c:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <prvHeapInit+0xb0>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e92:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <prvHeapInit+0xb0>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0307 	bic.w	r3, r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <prvHeapInit+0xb4>)
 8004eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004eb6:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <prvHeapInit+0xb4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <prvHeapInit+0xb4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	1ad2      	subs	r2, r2, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <prvHeapInit+0xb4>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <prvHeapInit+0xb8>)
 8004ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <prvHeapInit+0xbc>)
 8004eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <prvHeapInit+0xc0>)
 8004eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ef2:	601a      	str	r2, [r3, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	20000690 	.word	0x20000690
 8004f04:	20001248 	.word	0x20001248
 8004f08:	20001250 	.word	0x20001250
 8004f0c:	20001258 	.word	0x20001258
 8004f10:	20001254 	.word	0x20001254
 8004f14:	20001264 	.word	0x20001264

08004f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f20:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <prvInsertBlockIntoFreeList+0xac>)
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e002      	b.n	8004f2c <prvInsertBlockIntoFreeList+0x14>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d8f7      	bhi.n	8004f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	4413      	add	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d108      	bne.n	8004f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	441a      	add	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	441a      	add	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d118      	bne.n	8004fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d00d      	beq.n	8004f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	441a      	add	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e008      	b.n	8004fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f96:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e003      	b.n	8004fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d002      	beq.n	8004fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fb6:	bf00      	nop
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20001248 	.word	0x20001248
 8004fc8:	20001250 	.word	0x20001250

08004fcc <__errno>:
 8004fcc:	4b01      	ldr	r3, [pc, #4]	; (8004fd4 <__errno+0x8>)
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000010 	.word	0x20000010

08004fd8 <std>:
 8004fd8:	2300      	movs	r3, #0
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	4604      	mov	r4, r0
 8004fde:	e9c0 3300 	strd	r3, r3, [r0]
 8004fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fe6:	6083      	str	r3, [r0, #8]
 8004fe8:	8181      	strh	r1, [r0, #12]
 8004fea:	6643      	str	r3, [r0, #100]	; 0x64
 8004fec:	81c2      	strh	r2, [r0, #14]
 8004fee:	6183      	str	r3, [r0, #24]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	305c      	adds	r0, #92	; 0x5c
 8004ff6:	f000 f90c 	bl	8005212 <memset>
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <std+0x38>)
 8004ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <std+0x3c>)
 8005000:	62a3      	str	r3, [r4, #40]	; 0x28
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <std+0x40>)
 8005004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <std+0x44>)
 8005008:	6224      	str	r4, [r4, #32]
 800500a:	6323      	str	r3, [r4, #48]	; 0x30
 800500c:	bd10      	pop	{r4, pc}
 800500e:	bf00      	nop
 8005010:	08005471 	.word	0x08005471
 8005014:	08005493 	.word	0x08005493
 8005018:	080054cb 	.word	0x080054cb
 800501c:	080054ef 	.word	0x080054ef

08005020 <_cleanup_r>:
 8005020:	4901      	ldr	r1, [pc, #4]	; (8005028 <_cleanup_r+0x8>)
 8005022:	f000 b8af 	b.w	8005184 <_fwalk_reent>
 8005026:	bf00      	nop
 8005028:	08005649 	.word	0x08005649

0800502c <__sfmoreglue>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	2268      	movs	r2, #104	; 0x68
 8005030:	1e4d      	subs	r5, r1, #1
 8005032:	4355      	muls	r5, r2
 8005034:	460e      	mov	r6, r1
 8005036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800503a:	f000 f913 	bl	8005264 <_malloc_r>
 800503e:	4604      	mov	r4, r0
 8005040:	b140      	cbz	r0, 8005054 <__sfmoreglue+0x28>
 8005042:	2100      	movs	r1, #0
 8005044:	e9c0 1600 	strd	r1, r6, [r0]
 8005048:	300c      	adds	r0, #12
 800504a:	60a0      	str	r0, [r4, #8]
 800504c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005050:	f000 f8df 	bl	8005212 <memset>
 8005054:	4620      	mov	r0, r4
 8005056:	bd70      	pop	{r4, r5, r6, pc}

08005058 <__sfp_lock_acquire>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__sfp_lock_acquire+0x8>)
 800505a:	f000 b8d8 	b.w	800520e <__retarget_lock_acquire_recursive>
 800505e:	bf00      	nop
 8005060:	20001269 	.word	0x20001269

08005064 <__sfp_lock_release>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__sfp_lock_release+0x8>)
 8005066:	f000 b8d3 	b.w	8005210 <__retarget_lock_release_recursive>
 800506a:	bf00      	nop
 800506c:	20001269 	.word	0x20001269

08005070 <__sinit_lock_acquire>:
 8005070:	4801      	ldr	r0, [pc, #4]	; (8005078 <__sinit_lock_acquire+0x8>)
 8005072:	f000 b8cc 	b.w	800520e <__retarget_lock_acquire_recursive>
 8005076:	bf00      	nop
 8005078:	2000126a 	.word	0x2000126a

0800507c <__sinit_lock_release>:
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <__sinit_lock_release+0x8>)
 800507e:	f000 b8c7 	b.w	8005210 <__retarget_lock_release_recursive>
 8005082:	bf00      	nop
 8005084:	2000126a 	.word	0x2000126a

08005088 <__sinit>:
 8005088:	b510      	push	{r4, lr}
 800508a:	4604      	mov	r4, r0
 800508c:	f7ff fff0 	bl	8005070 <__sinit_lock_acquire>
 8005090:	69a3      	ldr	r3, [r4, #24]
 8005092:	b11b      	cbz	r3, 800509c <__sinit+0x14>
 8005094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005098:	f7ff bff0 	b.w	800507c <__sinit_lock_release>
 800509c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050a0:	6523      	str	r3, [r4, #80]	; 0x50
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <__sinit+0x68>)
 80050a4:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <__sinit+0x6c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	bf04      	itt	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	61a3      	streq	r3, [r4, #24]
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f820 	bl	80050f8 <__sfp>
 80050b8:	6060      	str	r0, [r4, #4]
 80050ba:	4620      	mov	r0, r4
 80050bc:	f000 f81c 	bl	80050f8 <__sfp>
 80050c0:	60a0      	str	r0, [r4, #8]
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f818 	bl	80050f8 <__sfp>
 80050c8:	2200      	movs	r2, #0
 80050ca:	60e0      	str	r0, [r4, #12]
 80050cc:	2104      	movs	r1, #4
 80050ce:	6860      	ldr	r0, [r4, #4]
 80050d0:	f7ff ff82 	bl	8004fd8 <std>
 80050d4:	68a0      	ldr	r0, [r4, #8]
 80050d6:	2201      	movs	r2, #1
 80050d8:	2109      	movs	r1, #9
 80050da:	f7ff ff7d 	bl	8004fd8 <std>
 80050de:	68e0      	ldr	r0, [r4, #12]
 80050e0:	2202      	movs	r2, #2
 80050e2:	2112      	movs	r1, #18
 80050e4:	f7ff ff78 	bl	8004fd8 <std>
 80050e8:	2301      	movs	r3, #1
 80050ea:	61a3      	str	r3, [r4, #24]
 80050ec:	e7d2      	b.n	8005094 <__sinit+0xc>
 80050ee:	bf00      	nop
 80050f0:	0800611c 	.word	0x0800611c
 80050f4:	08005021 	.word	0x08005021

080050f8 <__sfp>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	4607      	mov	r7, r0
 80050fc:	f7ff ffac 	bl	8005058 <__sfp_lock_acquire>
 8005100:	4b1e      	ldr	r3, [pc, #120]	; (800517c <__sfp+0x84>)
 8005102:	681e      	ldr	r6, [r3, #0]
 8005104:	69b3      	ldr	r3, [r6, #24]
 8005106:	b913      	cbnz	r3, 800510e <__sfp+0x16>
 8005108:	4630      	mov	r0, r6
 800510a:	f7ff ffbd 	bl	8005088 <__sinit>
 800510e:	3648      	adds	r6, #72	; 0x48
 8005110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005114:	3b01      	subs	r3, #1
 8005116:	d503      	bpl.n	8005120 <__sfp+0x28>
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	b30b      	cbz	r3, 8005160 <__sfp+0x68>
 800511c:	6836      	ldr	r6, [r6, #0]
 800511e:	e7f7      	b.n	8005110 <__sfp+0x18>
 8005120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005124:	b9d5      	cbnz	r5, 800515c <__sfp+0x64>
 8005126:	4b16      	ldr	r3, [pc, #88]	; (8005180 <__sfp+0x88>)
 8005128:	60e3      	str	r3, [r4, #12]
 800512a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800512e:	6665      	str	r5, [r4, #100]	; 0x64
 8005130:	f000 f86c 	bl	800520c <__retarget_lock_init_recursive>
 8005134:	f7ff ff96 	bl	8005064 <__sfp_lock_release>
 8005138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800513c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005140:	6025      	str	r5, [r4, #0]
 8005142:	61a5      	str	r5, [r4, #24]
 8005144:	2208      	movs	r2, #8
 8005146:	4629      	mov	r1, r5
 8005148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800514c:	f000 f861 	bl	8005212 <memset>
 8005150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005158:	4620      	mov	r0, r4
 800515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800515c:	3468      	adds	r4, #104	; 0x68
 800515e:	e7d9      	b.n	8005114 <__sfp+0x1c>
 8005160:	2104      	movs	r1, #4
 8005162:	4638      	mov	r0, r7
 8005164:	f7ff ff62 	bl	800502c <__sfmoreglue>
 8005168:	4604      	mov	r4, r0
 800516a:	6030      	str	r0, [r6, #0]
 800516c:	2800      	cmp	r0, #0
 800516e:	d1d5      	bne.n	800511c <__sfp+0x24>
 8005170:	f7ff ff78 	bl	8005064 <__sfp_lock_release>
 8005174:	230c      	movs	r3, #12
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	e7ee      	b.n	8005158 <__sfp+0x60>
 800517a:	bf00      	nop
 800517c:	0800611c 	.word	0x0800611c
 8005180:	ffff0001 	.word	0xffff0001

08005184 <_fwalk_reent>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	4606      	mov	r6, r0
 800518a:	4688      	mov	r8, r1
 800518c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005190:	2700      	movs	r7, #0
 8005192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005196:	f1b9 0901 	subs.w	r9, r9, #1
 800519a:	d505      	bpl.n	80051a8 <_fwalk_reent+0x24>
 800519c:	6824      	ldr	r4, [r4, #0]
 800519e:	2c00      	cmp	r4, #0
 80051a0:	d1f7      	bne.n	8005192 <_fwalk_reent+0xe>
 80051a2:	4638      	mov	r0, r7
 80051a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051a8:	89ab      	ldrh	r3, [r5, #12]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d907      	bls.n	80051be <_fwalk_reent+0x3a>
 80051ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b2:	3301      	adds	r3, #1
 80051b4:	d003      	beq.n	80051be <_fwalk_reent+0x3a>
 80051b6:	4629      	mov	r1, r5
 80051b8:	4630      	mov	r0, r6
 80051ba:	47c0      	blx	r8
 80051bc:	4307      	orrs	r7, r0
 80051be:	3568      	adds	r5, #104	; 0x68
 80051c0:	e7e9      	b.n	8005196 <_fwalk_reent+0x12>
	...

080051c4 <__libc_init_array>:
 80051c4:	b570      	push	{r4, r5, r6, lr}
 80051c6:	4d0d      	ldr	r5, [pc, #52]	; (80051fc <__libc_init_array+0x38>)
 80051c8:	4c0d      	ldr	r4, [pc, #52]	; (8005200 <__libc_init_array+0x3c>)
 80051ca:	1b64      	subs	r4, r4, r5
 80051cc:	10a4      	asrs	r4, r4, #2
 80051ce:	2600      	movs	r6, #0
 80051d0:	42a6      	cmp	r6, r4
 80051d2:	d109      	bne.n	80051e8 <__libc_init_array+0x24>
 80051d4:	4d0b      	ldr	r5, [pc, #44]	; (8005204 <__libc_init_array+0x40>)
 80051d6:	4c0c      	ldr	r4, [pc, #48]	; (8005208 <__libc_init_array+0x44>)
 80051d8:	f000 ff24 	bl	8006024 <_init>
 80051dc:	1b64      	subs	r4, r4, r5
 80051de:	10a4      	asrs	r4, r4, #2
 80051e0:	2600      	movs	r6, #0
 80051e2:	42a6      	cmp	r6, r4
 80051e4:	d105      	bne.n	80051f2 <__libc_init_array+0x2e>
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
 80051e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ec:	4798      	blx	r3
 80051ee:	3601      	adds	r6, #1
 80051f0:	e7ee      	b.n	80051d0 <__libc_init_array+0xc>
 80051f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f6:	4798      	blx	r3
 80051f8:	3601      	adds	r6, #1
 80051fa:	e7f2      	b.n	80051e2 <__libc_init_array+0x1e>
 80051fc:	08006154 	.word	0x08006154
 8005200:	08006154 	.word	0x08006154
 8005204:	08006154 	.word	0x08006154
 8005208:	08006158 	.word	0x08006158

0800520c <__retarget_lock_init_recursive>:
 800520c:	4770      	bx	lr

0800520e <__retarget_lock_acquire_recursive>:
 800520e:	4770      	bx	lr

08005210 <__retarget_lock_release_recursive>:
 8005210:	4770      	bx	lr

08005212 <memset>:
 8005212:	4402      	add	r2, r0
 8005214:	4603      	mov	r3, r0
 8005216:	4293      	cmp	r3, r2
 8005218:	d100      	bne.n	800521c <memset+0xa>
 800521a:	4770      	bx	lr
 800521c:	f803 1b01 	strb.w	r1, [r3], #1
 8005220:	e7f9      	b.n	8005216 <memset+0x4>
	...

08005224 <sbrk_aligned>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	4e0e      	ldr	r6, [pc, #56]	; (8005260 <sbrk_aligned+0x3c>)
 8005228:	460c      	mov	r4, r1
 800522a:	6831      	ldr	r1, [r6, #0]
 800522c:	4605      	mov	r5, r0
 800522e:	b911      	cbnz	r1, 8005236 <sbrk_aligned+0x12>
 8005230:	f000 f90e 	bl	8005450 <_sbrk_r>
 8005234:	6030      	str	r0, [r6, #0]
 8005236:	4621      	mov	r1, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f000 f909 	bl	8005450 <_sbrk_r>
 800523e:	1c43      	adds	r3, r0, #1
 8005240:	d00a      	beq.n	8005258 <sbrk_aligned+0x34>
 8005242:	1cc4      	adds	r4, r0, #3
 8005244:	f024 0403 	bic.w	r4, r4, #3
 8005248:	42a0      	cmp	r0, r4
 800524a:	d007      	beq.n	800525c <sbrk_aligned+0x38>
 800524c:	1a21      	subs	r1, r4, r0
 800524e:	4628      	mov	r0, r5
 8005250:	f000 f8fe 	bl	8005450 <_sbrk_r>
 8005254:	3001      	adds	r0, #1
 8005256:	d101      	bne.n	800525c <sbrk_aligned+0x38>
 8005258:	f04f 34ff 	mov.w	r4, #4294967295
 800525c:	4620      	mov	r0, r4
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	20001270 	.word	0x20001270

08005264 <_malloc_r>:
 8005264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005268:	1ccd      	adds	r5, r1, #3
 800526a:	f025 0503 	bic.w	r5, r5, #3
 800526e:	3508      	adds	r5, #8
 8005270:	2d0c      	cmp	r5, #12
 8005272:	bf38      	it	cc
 8005274:	250c      	movcc	r5, #12
 8005276:	2d00      	cmp	r5, #0
 8005278:	4607      	mov	r7, r0
 800527a:	db01      	blt.n	8005280 <_malloc_r+0x1c>
 800527c:	42a9      	cmp	r1, r5
 800527e:	d905      	bls.n	800528c <_malloc_r+0x28>
 8005280:	230c      	movs	r3, #12
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	2600      	movs	r6, #0
 8005286:	4630      	mov	r0, r6
 8005288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800528c:	4e2e      	ldr	r6, [pc, #184]	; (8005348 <_malloc_r+0xe4>)
 800528e:	f000 fa29 	bl	80056e4 <__malloc_lock>
 8005292:	6833      	ldr	r3, [r6, #0]
 8005294:	461c      	mov	r4, r3
 8005296:	bb34      	cbnz	r4, 80052e6 <_malloc_r+0x82>
 8005298:	4629      	mov	r1, r5
 800529a:	4638      	mov	r0, r7
 800529c:	f7ff ffc2 	bl	8005224 <sbrk_aligned>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	4604      	mov	r4, r0
 80052a4:	d14d      	bne.n	8005342 <_malloc_r+0xde>
 80052a6:	6834      	ldr	r4, [r6, #0]
 80052a8:	4626      	mov	r6, r4
 80052aa:	2e00      	cmp	r6, #0
 80052ac:	d140      	bne.n	8005330 <_malloc_r+0xcc>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	4631      	mov	r1, r6
 80052b2:	4638      	mov	r0, r7
 80052b4:	eb04 0803 	add.w	r8, r4, r3
 80052b8:	f000 f8ca 	bl	8005450 <_sbrk_r>
 80052bc:	4580      	cmp	r8, r0
 80052be:	d13a      	bne.n	8005336 <_malloc_r+0xd2>
 80052c0:	6821      	ldr	r1, [r4, #0]
 80052c2:	3503      	adds	r5, #3
 80052c4:	1a6d      	subs	r5, r5, r1
 80052c6:	f025 0503 	bic.w	r5, r5, #3
 80052ca:	3508      	adds	r5, #8
 80052cc:	2d0c      	cmp	r5, #12
 80052ce:	bf38      	it	cc
 80052d0:	250c      	movcc	r5, #12
 80052d2:	4629      	mov	r1, r5
 80052d4:	4638      	mov	r0, r7
 80052d6:	f7ff ffa5 	bl	8005224 <sbrk_aligned>
 80052da:	3001      	adds	r0, #1
 80052dc:	d02b      	beq.n	8005336 <_malloc_r+0xd2>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	442b      	add	r3, r5
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	e00e      	b.n	8005304 <_malloc_r+0xa0>
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	1b52      	subs	r2, r2, r5
 80052ea:	d41e      	bmi.n	800532a <_malloc_r+0xc6>
 80052ec:	2a0b      	cmp	r2, #11
 80052ee:	d916      	bls.n	800531e <_malloc_r+0xba>
 80052f0:	1961      	adds	r1, r4, r5
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	6025      	str	r5, [r4, #0]
 80052f6:	bf18      	it	ne
 80052f8:	6059      	strne	r1, [r3, #4]
 80052fa:	6863      	ldr	r3, [r4, #4]
 80052fc:	bf08      	it	eq
 80052fe:	6031      	streq	r1, [r6, #0]
 8005300:	5162      	str	r2, [r4, r5]
 8005302:	604b      	str	r3, [r1, #4]
 8005304:	4638      	mov	r0, r7
 8005306:	f104 060b 	add.w	r6, r4, #11
 800530a:	f000 f9f1 	bl	80056f0 <__malloc_unlock>
 800530e:	f026 0607 	bic.w	r6, r6, #7
 8005312:	1d23      	adds	r3, r4, #4
 8005314:	1af2      	subs	r2, r6, r3
 8005316:	d0b6      	beq.n	8005286 <_malloc_r+0x22>
 8005318:	1b9b      	subs	r3, r3, r6
 800531a:	50a3      	str	r3, [r4, r2]
 800531c:	e7b3      	b.n	8005286 <_malloc_r+0x22>
 800531e:	6862      	ldr	r2, [r4, #4]
 8005320:	42a3      	cmp	r3, r4
 8005322:	bf0c      	ite	eq
 8005324:	6032      	streq	r2, [r6, #0]
 8005326:	605a      	strne	r2, [r3, #4]
 8005328:	e7ec      	b.n	8005304 <_malloc_r+0xa0>
 800532a:	4623      	mov	r3, r4
 800532c:	6864      	ldr	r4, [r4, #4]
 800532e:	e7b2      	b.n	8005296 <_malloc_r+0x32>
 8005330:	4634      	mov	r4, r6
 8005332:	6876      	ldr	r6, [r6, #4]
 8005334:	e7b9      	b.n	80052aa <_malloc_r+0x46>
 8005336:	230c      	movs	r3, #12
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	4638      	mov	r0, r7
 800533c:	f000 f9d8 	bl	80056f0 <__malloc_unlock>
 8005340:	e7a1      	b.n	8005286 <_malloc_r+0x22>
 8005342:	6025      	str	r5, [r4, #0]
 8005344:	e7de      	b.n	8005304 <_malloc_r+0xa0>
 8005346:	bf00      	nop
 8005348:	2000126c 	.word	0x2000126c

0800534c <iprintf>:
 800534c:	b40f      	push	{r0, r1, r2, r3}
 800534e:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <iprintf+0x2c>)
 8005350:	b513      	push	{r0, r1, r4, lr}
 8005352:	681c      	ldr	r4, [r3, #0]
 8005354:	b124      	cbz	r4, 8005360 <iprintf+0x14>
 8005356:	69a3      	ldr	r3, [r4, #24]
 8005358:	b913      	cbnz	r3, 8005360 <iprintf+0x14>
 800535a:	4620      	mov	r0, r4
 800535c:	f7ff fe94 	bl	8005088 <__sinit>
 8005360:	ab05      	add	r3, sp, #20
 8005362:	9a04      	ldr	r2, [sp, #16]
 8005364:	68a1      	ldr	r1, [r4, #8]
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	4620      	mov	r0, r4
 800536a:	f000 fa3d 	bl	80057e8 <_vfiprintf_r>
 800536e:	b002      	add	sp, #8
 8005370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005374:	b004      	add	sp, #16
 8005376:	4770      	bx	lr
 8005378:	20000010 	.word	0x20000010

0800537c <cleanup_glue>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	460c      	mov	r4, r1
 8005380:	6809      	ldr	r1, [r1, #0]
 8005382:	4605      	mov	r5, r0
 8005384:	b109      	cbz	r1, 800538a <cleanup_glue+0xe>
 8005386:	f7ff fff9 	bl	800537c <cleanup_glue>
 800538a:	4621      	mov	r1, r4
 800538c:	4628      	mov	r0, r5
 800538e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005392:	f000 b9b3 	b.w	80056fc <_free_r>
	...

08005398 <_reclaim_reent>:
 8005398:	4b2c      	ldr	r3, [pc, #176]	; (800544c <_reclaim_reent+0xb4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4283      	cmp	r3, r0
 800539e:	b570      	push	{r4, r5, r6, lr}
 80053a0:	4604      	mov	r4, r0
 80053a2:	d051      	beq.n	8005448 <_reclaim_reent+0xb0>
 80053a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053a6:	b143      	cbz	r3, 80053ba <_reclaim_reent+0x22>
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d14a      	bne.n	8005444 <_reclaim_reent+0xac>
 80053ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b0:	6819      	ldr	r1, [r3, #0]
 80053b2:	b111      	cbz	r1, 80053ba <_reclaim_reent+0x22>
 80053b4:	4620      	mov	r0, r4
 80053b6:	f000 f9a1 	bl	80056fc <_free_r>
 80053ba:	6961      	ldr	r1, [r4, #20]
 80053bc:	b111      	cbz	r1, 80053c4 <_reclaim_reent+0x2c>
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 f99c 	bl	80056fc <_free_r>
 80053c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053c6:	b111      	cbz	r1, 80053ce <_reclaim_reent+0x36>
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 f997 	bl	80056fc <_free_r>
 80053ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053d0:	b111      	cbz	r1, 80053d8 <_reclaim_reent+0x40>
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 f992 	bl	80056fc <_free_r>
 80053d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80053da:	b111      	cbz	r1, 80053e2 <_reclaim_reent+0x4a>
 80053dc:	4620      	mov	r0, r4
 80053de:	f000 f98d 	bl	80056fc <_free_r>
 80053e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80053e4:	b111      	cbz	r1, 80053ec <_reclaim_reent+0x54>
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 f988 	bl	80056fc <_free_r>
 80053ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80053ee:	b111      	cbz	r1, 80053f6 <_reclaim_reent+0x5e>
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 f983 	bl	80056fc <_free_r>
 80053f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80053f8:	b111      	cbz	r1, 8005400 <_reclaim_reent+0x68>
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 f97e 	bl	80056fc <_free_r>
 8005400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005402:	b111      	cbz	r1, 800540a <_reclaim_reent+0x72>
 8005404:	4620      	mov	r0, r4
 8005406:	f000 f979 	bl	80056fc <_free_r>
 800540a:	69a3      	ldr	r3, [r4, #24]
 800540c:	b1e3      	cbz	r3, 8005448 <_reclaim_reent+0xb0>
 800540e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005410:	4620      	mov	r0, r4
 8005412:	4798      	blx	r3
 8005414:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005416:	b1b9      	cbz	r1, 8005448 <_reclaim_reent+0xb0>
 8005418:	4620      	mov	r0, r4
 800541a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800541e:	f7ff bfad 	b.w	800537c <cleanup_glue>
 8005422:	5949      	ldr	r1, [r1, r5]
 8005424:	b941      	cbnz	r1, 8005438 <_reclaim_reent+0xa0>
 8005426:	3504      	adds	r5, #4
 8005428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800542a:	2d80      	cmp	r5, #128	; 0x80
 800542c:	68d9      	ldr	r1, [r3, #12]
 800542e:	d1f8      	bne.n	8005422 <_reclaim_reent+0x8a>
 8005430:	4620      	mov	r0, r4
 8005432:	f000 f963 	bl	80056fc <_free_r>
 8005436:	e7ba      	b.n	80053ae <_reclaim_reent+0x16>
 8005438:	680e      	ldr	r6, [r1, #0]
 800543a:	4620      	mov	r0, r4
 800543c:	f000 f95e 	bl	80056fc <_free_r>
 8005440:	4631      	mov	r1, r6
 8005442:	e7ef      	b.n	8005424 <_reclaim_reent+0x8c>
 8005444:	2500      	movs	r5, #0
 8005446:	e7ef      	b.n	8005428 <_reclaim_reent+0x90>
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	bf00      	nop
 800544c:	20000010 	.word	0x20000010

08005450 <_sbrk_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d06      	ldr	r5, [pc, #24]	; (800546c <_sbrk_r+0x1c>)
 8005454:	2300      	movs	r3, #0
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fb fc3e 	bl	8000cdc <_sbrk>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_sbrk_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_sbrk_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	20001274 	.word	0x20001274

08005470 <__sread>:
 8005470:	b510      	push	{r4, lr}
 8005472:	460c      	mov	r4, r1
 8005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005478:	f000 fc7a 	bl	8005d70 <_read_r>
 800547c:	2800      	cmp	r0, #0
 800547e:	bfab      	itete	ge
 8005480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005482:	89a3      	ldrhlt	r3, [r4, #12]
 8005484:	181b      	addge	r3, r3, r0
 8005486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800548a:	bfac      	ite	ge
 800548c:	6563      	strge	r3, [r4, #84]	; 0x54
 800548e:	81a3      	strhlt	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__swrite>:
 8005492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005496:	461f      	mov	r7, r3
 8005498:	898b      	ldrh	r3, [r1, #12]
 800549a:	05db      	lsls	r3, r3, #23
 800549c:	4605      	mov	r5, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	4616      	mov	r6, r2
 80054a2:	d505      	bpl.n	80054b0 <__swrite+0x1e>
 80054a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a8:	2302      	movs	r3, #2
 80054aa:	2200      	movs	r2, #0
 80054ac:	f000 f908 	bl	80056c0 <_lseek_r>
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ba:	81a3      	strh	r3, [r4, #12]
 80054bc:	4632      	mov	r2, r6
 80054be:	463b      	mov	r3, r7
 80054c0:	4628      	mov	r0, r5
 80054c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	f000 b817 	b.w	80054f8 <_write_r>

080054ca <__sseek>:
 80054ca:	b510      	push	{r4, lr}
 80054cc:	460c      	mov	r4, r1
 80054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d2:	f000 f8f5 	bl	80056c0 <_lseek_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	bf15      	itete	ne
 80054dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80054de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054e6:	81a3      	strheq	r3, [r4, #12]
 80054e8:	bf18      	it	ne
 80054ea:	81a3      	strhne	r3, [r4, #12]
 80054ec:	bd10      	pop	{r4, pc}

080054ee <__sclose>:
 80054ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f2:	f000 b813 	b.w	800551c <_close_r>
	...

080054f8 <_write_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	; (8005518 <_write_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fb fb97 	bl	8000c3a <_write>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_write_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_write_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20001274 	.word	0x20001274

0800551c <_close_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d06      	ldr	r5, [pc, #24]	; (8005538 <_close_r+0x1c>)
 8005520:	2300      	movs	r3, #0
 8005522:	4604      	mov	r4, r0
 8005524:	4608      	mov	r0, r1
 8005526:	602b      	str	r3, [r5, #0]
 8005528:	f7fb fba3 	bl	8000c72 <_close>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	d102      	bne.n	8005536 <_close_r+0x1a>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	b103      	cbz	r3, 8005536 <_close_r+0x1a>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	bd38      	pop	{r3, r4, r5, pc}
 8005538:	20001274 	.word	0x20001274

0800553c <__sflush_r>:
 800553c:	898a      	ldrh	r2, [r1, #12]
 800553e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005542:	4605      	mov	r5, r0
 8005544:	0710      	lsls	r0, r2, #28
 8005546:	460c      	mov	r4, r1
 8005548:	d458      	bmi.n	80055fc <__sflush_r+0xc0>
 800554a:	684b      	ldr	r3, [r1, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	dc05      	bgt.n	800555c <__sflush_r+0x20>
 8005550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	dc02      	bgt.n	800555c <__sflush_r+0x20>
 8005556:	2000      	movs	r0, #0
 8005558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800555e:	2e00      	cmp	r6, #0
 8005560:	d0f9      	beq.n	8005556 <__sflush_r+0x1a>
 8005562:	2300      	movs	r3, #0
 8005564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005568:	682f      	ldr	r7, [r5, #0]
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	d032      	beq.n	80055d4 <__sflush_r+0x98>
 800556e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	075a      	lsls	r2, r3, #29
 8005574:	d505      	bpl.n	8005582 <__sflush_r+0x46>
 8005576:	6863      	ldr	r3, [r4, #4]
 8005578:	1ac0      	subs	r0, r0, r3
 800557a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800557c:	b10b      	cbz	r3, 8005582 <__sflush_r+0x46>
 800557e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005580:	1ac0      	subs	r0, r0, r3
 8005582:	2300      	movs	r3, #0
 8005584:	4602      	mov	r2, r0
 8005586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005588:	6a21      	ldr	r1, [r4, #32]
 800558a:	4628      	mov	r0, r5
 800558c:	47b0      	blx	r6
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	d106      	bne.n	80055a2 <__sflush_r+0x66>
 8005594:	6829      	ldr	r1, [r5, #0]
 8005596:	291d      	cmp	r1, #29
 8005598:	d82c      	bhi.n	80055f4 <__sflush_r+0xb8>
 800559a:	4a2a      	ldr	r2, [pc, #168]	; (8005644 <__sflush_r+0x108>)
 800559c:	40ca      	lsrs	r2, r1
 800559e:	07d6      	lsls	r6, r2, #31
 80055a0:	d528      	bpl.n	80055f4 <__sflush_r+0xb8>
 80055a2:	2200      	movs	r2, #0
 80055a4:	6062      	str	r2, [r4, #4]
 80055a6:	04d9      	lsls	r1, r3, #19
 80055a8:	6922      	ldr	r2, [r4, #16]
 80055aa:	6022      	str	r2, [r4, #0]
 80055ac:	d504      	bpl.n	80055b8 <__sflush_r+0x7c>
 80055ae:	1c42      	adds	r2, r0, #1
 80055b0:	d101      	bne.n	80055b6 <__sflush_r+0x7a>
 80055b2:	682b      	ldr	r3, [r5, #0]
 80055b4:	b903      	cbnz	r3, 80055b8 <__sflush_r+0x7c>
 80055b6:	6560      	str	r0, [r4, #84]	; 0x54
 80055b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055ba:	602f      	str	r7, [r5, #0]
 80055bc:	2900      	cmp	r1, #0
 80055be:	d0ca      	beq.n	8005556 <__sflush_r+0x1a>
 80055c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055c4:	4299      	cmp	r1, r3
 80055c6:	d002      	beq.n	80055ce <__sflush_r+0x92>
 80055c8:	4628      	mov	r0, r5
 80055ca:	f000 f897 	bl	80056fc <_free_r>
 80055ce:	2000      	movs	r0, #0
 80055d0:	6360      	str	r0, [r4, #52]	; 0x34
 80055d2:	e7c1      	b.n	8005558 <__sflush_r+0x1c>
 80055d4:	6a21      	ldr	r1, [r4, #32]
 80055d6:	2301      	movs	r3, #1
 80055d8:	4628      	mov	r0, r5
 80055da:	47b0      	blx	r6
 80055dc:	1c41      	adds	r1, r0, #1
 80055de:	d1c7      	bne.n	8005570 <__sflush_r+0x34>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0c4      	beq.n	8005570 <__sflush_r+0x34>
 80055e6:	2b1d      	cmp	r3, #29
 80055e8:	d001      	beq.n	80055ee <__sflush_r+0xb2>
 80055ea:	2b16      	cmp	r3, #22
 80055ec:	d101      	bne.n	80055f2 <__sflush_r+0xb6>
 80055ee:	602f      	str	r7, [r5, #0]
 80055f0:	e7b1      	b.n	8005556 <__sflush_r+0x1a>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	e7ad      	b.n	8005558 <__sflush_r+0x1c>
 80055fc:	690f      	ldr	r7, [r1, #16]
 80055fe:	2f00      	cmp	r7, #0
 8005600:	d0a9      	beq.n	8005556 <__sflush_r+0x1a>
 8005602:	0793      	lsls	r3, r2, #30
 8005604:	680e      	ldr	r6, [r1, #0]
 8005606:	bf08      	it	eq
 8005608:	694b      	ldreq	r3, [r1, #20]
 800560a:	600f      	str	r7, [r1, #0]
 800560c:	bf18      	it	ne
 800560e:	2300      	movne	r3, #0
 8005610:	eba6 0807 	sub.w	r8, r6, r7
 8005614:	608b      	str	r3, [r1, #8]
 8005616:	f1b8 0f00 	cmp.w	r8, #0
 800561a:	dd9c      	ble.n	8005556 <__sflush_r+0x1a>
 800561c:	6a21      	ldr	r1, [r4, #32]
 800561e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005620:	4643      	mov	r3, r8
 8005622:	463a      	mov	r2, r7
 8005624:	4628      	mov	r0, r5
 8005626:	47b0      	blx	r6
 8005628:	2800      	cmp	r0, #0
 800562a:	dc06      	bgt.n	800563a <__sflush_r+0xfe>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005632:	81a3      	strh	r3, [r4, #12]
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	e78e      	b.n	8005558 <__sflush_r+0x1c>
 800563a:	4407      	add	r7, r0
 800563c:	eba8 0800 	sub.w	r8, r8, r0
 8005640:	e7e9      	b.n	8005616 <__sflush_r+0xda>
 8005642:	bf00      	nop
 8005644:	20400001 	.word	0x20400001

08005648 <_fflush_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	690b      	ldr	r3, [r1, #16]
 800564c:	4605      	mov	r5, r0
 800564e:	460c      	mov	r4, r1
 8005650:	b913      	cbnz	r3, 8005658 <_fflush_r+0x10>
 8005652:	2500      	movs	r5, #0
 8005654:	4628      	mov	r0, r5
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	b118      	cbz	r0, 8005662 <_fflush_r+0x1a>
 800565a:	6983      	ldr	r3, [r0, #24]
 800565c:	b90b      	cbnz	r3, 8005662 <_fflush_r+0x1a>
 800565e:	f7ff fd13 	bl	8005088 <__sinit>
 8005662:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <_fflush_r+0x6c>)
 8005664:	429c      	cmp	r4, r3
 8005666:	d11b      	bne.n	80056a0 <_fflush_r+0x58>
 8005668:	686c      	ldr	r4, [r5, #4]
 800566a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0ef      	beq.n	8005652 <_fflush_r+0xa>
 8005672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005674:	07d0      	lsls	r0, r2, #31
 8005676:	d404      	bmi.n	8005682 <_fflush_r+0x3a>
 8005678:	0599      	lsls	r1, r3, #22
 800567a:	d402      	bmi.n	8005682 <_fflush_r+0x3a>
 800567c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567e:	f7ff fdc6 	bl	800520e <__retarget_lock_acquire_recursive>
 8005682:	4628      	mov	r0, r5
 8005684:	4621      	mov	r1, r4
 8005686:	f7ff ff59 	bl	800553c <__sflush_r>
 800568a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800568c:	07da      	lsls	r2, r3, #31
 800568e:	4605      	mov	r5, r0
 8005690:	d4e0      	bmi.n	8005654 <_fflush_r+0xc>
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	059b      	lsls	r3, r3, #22
 8005696:	d4dd      	bmi.n	8005654 <_fflush_r+0xc>
 8005698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800569a:	f7ff fdb9 	bl	8005210 <__retarget_lock_release_recursive>
 800569e:	e7d9      	b.n	8005654 <_fflush_r+0xc>
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <_fflush_r+0x70>)
 80056a2:	429c      	cmp	r4, r3
 80056a4:	d101      	bne.n	80056aa <_fflush_r+0x62>
 80056a6:	68ac      	ldr	r4, [r5, #8]
 80056a8:	e7df      	b.n	800566a <_fflush_r+0x22>
 80056aa:	4b04      	ldr	r3, [pc, #16]	; (80056bc <_fflush_r+0x74>)
 80056ac:	429c      	cmp	r4, r3
 80056ae:	bf08      	it	eq
 80056b0:	68ec      	ldreq	r4, [r5, #12]
 80056b2:	e7da      	b.n	800566a <_fflush_r+0x22>
 80056b4:	080060dc 	.word	0x080060dc
 80056b8:	080060fc 	.word	0x080060fc
 80056bc:	080060bc 	.word	0x080060bc

080056c0 <_lseek_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d07      	ldr	r5, [pc, #28]	; (80056e0 <_lseek_r+0x20>)
 80056c4:	4604      	mov	r4, r0
 80056c6:	4608      	mov	r0, r1
 80056c8:	4611      	mov	r1, r2
 80056ca:	2200      	movs	r2, #0
 80056cc:	602a      	str	r2, [r5, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f7fb faf6 	bl	8000cc0 <_lseek>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d102      	bne.n	80056de <_lseek_r+0x1e>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	b103      	cbz	r3, 80056de <_lseek_r+0x1e>
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	20001274 	.word	0x20001274

080056e4 <__malloc_lock>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__malloc_lock+0x8>)
 80056e6:	f7ff bd92 	b.w	800520e <__retarget_lock_acquire_recursive>
 80056ea:	bf00      	nop
 80056ec:	20001268 	.word	0x20001268

080056f0 <__malloc_unlock>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__malloc_unlock+0x8>)
 80056f2:	f7ff bd8d 	b.w	8005210 <__retarget_lock_release_recursive>
 80056f6:	bf00      	nop
 80056f8:	20001268 	.word	0x20001268

080056fc <_free_r>:
 80056fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056fe:	2900      	cmp	r1, #0
 8005700:	d044      	beq.n	800578c <_free_r+0x90>
 8005702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005706:	9001      	str	r0, [sp, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f1a1 0404 	sub.w	r4, r1, #4
 800570e:	bfb8      	it	lt
 8005710:	18e4      	addlt	r4, r4, r3
 8005712:	f7ff ffe7 	bl	80056e4 <__malloc_lock>
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <_free_r+0x94>)
 8005718:	9801      	ldr	r0, [sp, #4]
 800571a:	6813      	ldr	r3, [r2, #0]
 800571c:	b933      	cbnz	r3, 800572c <_free_r+0x30>
 800571e:	6063      	str	r3, [r4, #4]
 8005720:	6014      	str	r4, [r2, #0]
 8005722:	b003      	add	sp, #12
 8005724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005728:	f7ff bfe2 	b.w	80056f0 <__malloc_unlock>
 800572c:	42a3      	cmp	r3, r4
 800572e:	d908      	bls.n	8005742 <_free_r+0x46>
 8005730:	6825      	ldr	r5, [r4, #0]
 8005732:	1961      	adds	r1, r4, r5
 8005734:	428b      	cmp	r3, r1
 8005736:	bf01      	itttt	eq
 8005738:	6819      	ldreq	r1, [r3, #0]
 800573a:	685b      	ldreq	r3, [r3, #4]
 800573c:	1949      	addeq	r1, r1, r5
 800573e:	6021      	streq	r1, [r4, #0]
 8005740:	e7ed      	b.n	800571e <_free_r+0x22>
 8005742:	461a      	mov	r2, r3
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	b10b      	cbz	r3, 800574c <_free_r+0x50>
 8005748:	42a3      	cmp	r3, r4
 800574a:	d9fa      	bls.n	8005742 <_free_r+0x46>
 800574c:	6811      	ldr	r1, [r2, #0]
 800574e:	1855      	adds	r5, r2, r1
 8005750:	42a5      	cmp	r5, r4
 8005752:	d10b      	bne.n	800576c <_free_r+0x70>
 8005754:	6824      	ldr	r4, [r4, #0]
 8005756:	4421      	add	r1, r4
 8005758:	1854      	adds	r4, r2, r1
 800575a:	42a3      	cmp	r3, r4
 800575c:	6011      	str	r1, [r2, #0]
 800575e:	d1e0      	bne.n	8005722 <_free_r+0x26>
 8005760:	681c      	ldr	r4, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	6053      	str	r3, [r2, #4]
 8005766:	4421      	add	r1, r4
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	e7da      	b.n	8005722 <_free_r+0x26>
 800576c:	d902      	bls.n	8005774 <_free_r+0x78>
 800576e:	230c      	movs	r3, #12
 8005770:	6003      	str	r3, [r0, #0]
 8005772:	e7d6      	b.n	8005722 <_free_r+0x26>
 8005774:	6825      	ldr	r5, [r4, #0]
 8005776:	1961      	adds	r1, r4, r5
 8005778:	428b      	cmp	r3, r1
 800577a:	bf04      	itt	eq
 800577c:	6819      	ldreq	r1, [r3, #0]
 800577e:	685b      	ldreq	r3, [r3, #4]
 8005780:	6063      	str	r3, [r4, #4]
 8005782:	bf04      	itt	eq
 8005784:	1949      	addeq	r1, r1, r5
 8005786:	6021      	streq	r1, [r4, #0]
 8005788:	6054      	str	r4, [r2, #4]
 800578a:	e7ca      	b.n	8005722 <_free_r+0x26>
 800578c:	b003      	add	sp, #12
 800578e:	bd30      	pop	{r4, r5, pc}
 8005790:	2000126c 	.word	0x2000126c

08005794 <__sfputc_r>:
 8005794:	6893      	ldr	r3, [r2, #8]
 8005796:	3b01      	subs	r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	b410      	push	{r4}
 800579c:	6093      	str	r3, [r2, #8]
 800579e:	da08      	bge.n	80057b2 <__sfputc_r+0x1e>
 80057a0:	6994      	ldr	r4, [r2, #24]
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	db01      	blt.n	80057aa <__sfputc_r+0x16>
 80057a6:	290a      	cmp	r1, #10
 80057a8:	d103      	bne.n	80057b2 <__sfputc_r+0x1e>
 80057aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ae:	f000 baf1 	b.w	8005d94 <__swbuf_r>
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	1c58      	adds	r0, r3, #1
 80057b6:	6010      	str	r0, [r2, #0]
 80057b8:	7019      	strb	r1, [r3, #0]
 80057ba:	4608      	mov	r0, r1
 80057bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <__sfputs_r>:
 80057c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c4:	4606      	mov	r6, r0
 80057c6:	460f      	mov	r7, r1
 80057c8:	4614      	mov	r4, r2
 80057ca:	18d5      	adds	r5, r2, r3
 80057cc:	42ac      	cmp	r4, r5
 80057ce:	d101      	bne.n	80057d4 <__sfputs_r+0x12>
 80057d0:	2000      	movs	r0, #0
 80057d2:	e007      	b.n	80057e4 <__sfputs_r+0x22>
 80057d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d8:	463a      	mov	r2, r7
 80057da:	4630      	mov	r0, r6
 80057dc:	f7ff ffda 	bl	8005794 <__sfputc_r>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d1f3      	bne.n	80057cc <__sfputs_r+0xa>
 80057e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057e8 <_vfiprintf_r>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	460d      	mov	r5, r1
 80057ee:	b09d      	sub	sp, #116	; 0x74
 80057f0:	4614      	mov	r4, r2
 80057f2:	4698      	mov	r8, r3
 80057f4:	4606      	mov	r6, r0
 80057f6:	b118      	cbz	r0, 8005800 <_vfiprintf_r+0x18>
 80057f8:	6983      	ldr	r3, [r0, #24]
 80057fa:	b90b      	cbnz	r3, 8005800 <_vfiprintf_r+0x18>
 80057fc:	f7ff fc44 	bl	8005088 <__sinit>
 8005800:	4b89      	ldr	r3, [pc, #548]	; (8005a28 <_vfiprintf_r+0x240>)
 8005802:	429d      	cmp	r5, r3
 8005804:	d11b      	bne.n	800583e <_vfiprintf_r+0x56>
 8005806:	6875      	ldr	r5, [r6, #4]
 8005808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800580a:	07d9      	lsls	r1, r3, #31
 800580c:	d405      	bmi.n	800581a <_vfiprintf_r+0x32>
 800580e:	89ab      	ldrh	r3, [r5, #12]
 8005810:	059a      	lsls	r2, r3, #22
 8005812:	d402      	bmi.n	800581a <_vfiprintf_r+0x32>
 8005814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005816:	f7ff fcfa 	bl	800520e <__retarget_lock_acquire_recursive>
 800581a:	89ab      	ldrh	r3, [r5, #12]
 800581c:	071b      	lsls	r3, r3, #28
 800581e:	d501      	bpl.n	8005824 <_vfiprintf_r+0x3c>
 8005820:	692b      	ldr	r3, [r5, #16]
 8005822:	b9eb      	cbnz	r3, 8005860 <_vfiprintf_r+0x78>
 8005824:	4629      	mov	r1, r5
 8005826:	4630      	mov	r0, r6
 8005828:	f000 fb06 	bl	8005e38 <__swsetup_r>
 800582c:	b1c0      	cbz	r0, 8005860 <_vfiprintf_r+0x78>
 800582e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005830:	07dc      	lsls	r4, r3, #31
 8005832:	d50e      	bpl.n	8005852 <_vfiprintf_r+0x6a>
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	b01d      	add	sp, #116	; 0x74
 800583a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583e:	4b7b      	ldr	r3, [pc, #492]	; (8005a2c <_vfiprintf_r+0x244>)
 8005840:	429d      	cmp	r5, r3
 8005842:	d101      	bne.n	8005848 <_vfiprintf_r+0x60>
 8005844:	68b5      	ldr	r5, [r6, #8]
 8005846:	e7df      	b.n	8005808 <_vfiprintf_r+0x20>
 8005848:	4b79      	ldr	r3, [pc, #484]	; (8005a30 <_vfiprintf_r+0x248>)
 800584a:	429d      	cmp	r5, r3
 800584c:	bf08      	it	eq
 800584e:	68f5      	ldreq	r5, [r6, #12]
 8005850:	e7da      	b.n	8005808 <_vfiprintf_r+0x20>
 8005852:	89ab      	ldrh	r3, [r5, #12]
 8005854:	0598      	lsls	r0, r3, #22
 8005856:	d4ed      	bmi.n	8005834 <_vfiprintf_r+0x4c>
 8005858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800585a:	f7ff fcd9 	bl	8005210 <__retarget_lock_release_recursive>
 800585e:	e7e9      	b.n	8005834 <_vfiprintf_r+0x4c>
 8005860:	2300      	movs	r3, #0
 8005862:	9309      	str	r3, [sp, #36]	; 0x24
 8005864:	2320      	movs	r3, #32
 8005866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800586a:	f8cd 800c 	str.w	r8, [sp, #12]
 800586e:	2330      	movs	r3, #48	; 0x30
 8005870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a34 <_vfiprintf_r+0x24c>
 8005874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005878:	f04f 0901 	mov.w	r9, #1
 800587c:	4623      	mov	r3, r4
 800587e:	469a      	mov	sl, r3
 8005880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005884:	b10a      	cbz	r2, 800588a <_vfiprintf_r+0xa2>
 8005886:	2a25      	cmp	r2, #37	; 0x25
 8005888:	d1f9      	bne.n	800587e <_vfiprintf_r+0x96>
 800588a:	ebba 0b04 	subs.w	fp, sl, r4
 800588e:	d00b      	beq.n	80058a8 <_vfiprintf_r+0xc0>
 8005890:	465b      	mov	r3, fp
 8005892:	4622      	mov	r2, r4
 8005894:	4629      	mov	r1, r5
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff ff93 	bl	80057c2 <__sfputs_r>
 800589c:	3001      	adds	r0, #1
 800589e:	f000 80aa 	beq.w	80059f6 <_vfiprintf_r+0x20e>
 80058a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058a4:	445a      	add	r2, fp
 80058a6:	9209      	str	r2, [sp, #36]	; 0x24
 80058a8:	f89a 3000 	ldrb.w	r3, [sl]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 80a2 	beq.w	80059f6 <_vfiprintf_r+0x20e>
 80058b2:	2300      	movs	r3, #0
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058bc:	f10a 0a01 	add.w	sl, sl, #1
 80058c0:	9304      	str	r3, [sp, #16]
 80058c2:	9307      	str	r3, [sp, #28]
 80058c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058c8:	931a      	str	r3, [sp, #104]	; 0x68
 80058ca:	4654      	mov	r4, sl
 80058cc:	2205      	movs	r2, #5
 80058ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d2:	4858      	ldr	r0, [pc, #352]	; (8005a34 <_vfiprintf_r+0x24c>)
 80058d4:	f7fa fc84 	bl	80001e0 <memchr>
 80058d8:	9a04      	ldr	r2, [sp, #16]
 80058da:	b9d8      	cbnz	r0, 8005914 <_vfiprintf_r+0x12c>
 80058dc:	06d1      	lsls	r1, r2, #27
 80058de:	bf44      	itt	mi
 80058e0:	2320      	movmi	r3, #32
 80058e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e6:	0713      	lsls	r3, r2, #28
 80058e8:	bf44      	itt	mi
 80058ea:	232b      	movmi	r3, #43	; 0x2b
 80058ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f0:	f89a 3000 	ldrb.w	r3, [sl]
 80058f4:	2b2a      	cmp	r3, #42	; 0x2a
 80058f6:	d015      	beq.n	8005924 <_vfiprintf_r+0x13c>
 80058f8:	9a07      	ldr	r2, [sp, #28]
 80058fa:	4654      	mov	r4, sl
 80058fc:	2000      	movs	r0, #0
 80058fe:	f04f 0c0a 	mov.w	ip, #10
 8005902:	4621      	mov	r1, r4
 8005904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005908:	3b30      	subs	r3, #48	; 0x30
 800590a:	2b09      	cmp	r3, #9
 800590c:	d94e      	bls.n	80059ac <_vfiprintf_r+0x1c4>
 800590e:	b1b0      	cbz	r0, 800593e <_vfiprintf_r+0x156>
 8005910:	9207      	str	r2, [sp, #28]
 8005912:	e014      	b.n	800593e <_vfiprintf_r+0x156>
 8005914:	eba0 0308 	sub.w	r3, r0, r8
 8005918:	fa09 f303 	lsl.w	r3, r9, r3
 800591c:	4313      	orrs	r3, r2
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	46a2      	mov	sl, r4
 8005922:	e7d2      	b.n	80058ca <_vfiprintf_r+0xe2>
 8005924:	9b03      	ldr	r3, [sp, #12]
 8005926:	1d19      	adds	r1, r3, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	9103      	str	r1, [sp, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	bfbb      	ittet	lt
 8005930:	425b      	neglt	r3, r3
 8005932:	f042 0202 	orrlt.w	r2, r2, #2
 8005936:	9307      	strge	r3, [sp, #28]
 8005938:	9307      	strlt	r3, [sp, #28]
 800593a:	bfb8      	it	lt
 800593c:	9204      	strlt	r2, [sp, #16]
 800593e:	7823      	ldrb	r3, [r4, #0]
 8005940:	2b2e      	cmp	r3, #46	; 0x2e
 8005942:	d10c      	bne.n	800595e <_vfiprintf_r+0x176>
 8005944:	7863      	ldrb	r3, [r4, #1]
 8005946:	2b2a      	cmp	r3, #42	; 0x2a
 8005948:	d135      	bne.n	80059b6 <_vfiprintf_r+0x1ce>
 800594a:	9b03      	ldr	r3, [sp, #12]
 800594c:	1d1a      	adds	r2, r3, #4
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	9203      	str	r2, [sp, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfb8      	it	lt
 8005956:	f04f 33ff 	movlt.w	r3, #4294967295
 800595a:	3402      	adds	r4, #2
 800595c:	9305      	str	r3, [sp, #20]
 800595e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a44 <_vfiprintf_r+0x25c>
 8005962:	7821      	ldrb	r1, [r4, #0]
 8005964:	2203      	movs	r2, #3
 8005966:	4650      	mov	r0, sl
 8005968:	f7fa fc3a 	bl	80001e0 <memchr>
 800596c:	b140      	cbz	r0, 8005980 <_vfiprintf_r+0x198>
 800596e:	2340      	movs	r3, #64	; 0x40
 8005970:	eba0 000a 	sub.w	r0, r0, sl
 8005974:	fa03 f000 	lsl.w	r0, r3, r0
 8005978:	9b04      	ldr	r3, [sp, #16]
 800597a:	4303      	orrs	r3, r0
 800597c:	3401      	adds	r4, #1
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005984:	482c      	ldr	r0, [pc, #176]	; (8005a38 <_vfiprintf_r+0x250>)
 8005986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800598a:	2206      	movs	r2, #6
 800598c:	f7fa fc28 	bl	80001e0 <memchr>
 8005990:	2800      	cmp	r0, #0
 8005992:	d03f      	beq.n	8005a14 <_vfiprintf_r+0x22c>
 8005994:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <_vfiprintf_r+0x254>)
 8005996:	bb1b      	cbnz	r3, 80059e0 <_vfiprintf_r+0x1f8>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	3307      	adds	r3, #7
 800599c:	f023 0307 	bic.w	r3, r3, #7
 80059a0:	3308      	adds	r3, #8
 80059a2:	9303      	str	r3, [sp, #12]
 80059a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a6:	443b      	add	r3, r7
 80059a8:	9309      	str	r3, [sp, #36]	; 0x24
 80059aa:	e767      	b.n	800587c <_vfiprintf_r+0x94>
 80059ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80059b0:	460c      	mov	r4, r1
 80059b2:	2001      	movs	r0, #1
 80059b4:	e7a5      	b.n	8005902 <_vfiprintf_r+0x11a>
 80059b6:	2300      	movs	r3, #0
 80059b8:	3401      	adds	r4, #1
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	4619      	mov	r1, r3
 80059be:	f04f 0c0a 	mov.w	ip, #10
 80059c2:	4620      	mov	r0, r4
 80059c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059c8:	3a30      	subs	r2, #48	; 0x30
 80059ca:	2a09      	cmp	r2, #9
 80059cc:	d903      	bls.n	80059d6 <_vfiprintf_r+0x1ee>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0c5      	beq.n	800595e <_vfiprintf_r+0x176>
 80059d2:	9105      	str	r1, [sp, #20]
 80059d4:	e7c3      	b.n	800595e <_vfiprintf_r+0x176>
 80059d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80059da:	4604      	mov	r4, r0
 80059dc:	2301      	movs	r3, #1
 80059de:	e7f0      	b.n	80059c2 <_vfiprintf_r+0x1da>
 80059e0:	ab03      	add	r3, sp, #12
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	462a      	mov	r2, r5
 80059e6:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <_vfiprintf_r+0x258>)
 80059e8:	a904      	add	r1, sp, #16
 80059ea:	4630      	mov	r0, r6
 80059ec:	f3af 8000 	nop.w
 80059f0:	4607      	mov	r7, r0
 80059f2:	1c78      	adds	r0, r7, #1
 80059f4:	d1d6      	bne.n	80059a4 <_vfiprintf_r+0x1bc>
 80059f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059f8:	07d9      	lsls	r1, r3, #31
 80059fa:	d405      	bmi.n	8005a08 <_vfiprintf_r+0x220>
 80059fc:	89ab      	ldrh	r3, [r5, #12]
 80059fe:	059a      	lsls	r2, r3, #22
 8005a00:	d402      	bmi.n	8005a08 <_vfiprintf_r+0x220>
 8005a02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a04:	f7ff fc04 	bl	8005210 <__retarget_lock_release_recursive>
 8005a08:	89ab      	ldrh	r3, [r5, #12]
 8005a0a:	065b      	lsls	r3, r3, #25
 8005a0c:	f53f af12 	bmi.w	8005834 <_vfiprintf_r+0x4c>
 8005a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a12:	e711      	b.n	8005838 <_vfiprintf_r+0x50>
 8005a14:	ab03      	add	r3, sp, #12
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	462a      	mov	r2, r5
 8005a1a:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <_vfiprintf_r+0x258>)
 8005a1c:	a904      	add	r1, sp, #16
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f000 f880 	bl	8005b24 <_printf_i>
 8005a24:	e7e4      	b.n	80059f0 <_vfiprintf_r+0x208>
 8005a26:	bf00      	nop
 8005a28:	080060dc 	.word	0x080060dc
 8005a2c:	080060fc 	.word	0x080060fc
 8005a30:	080060bc 	.word	0x080060bc
 8005a34:	08006120 	.word	0x08006120
 8005a38:	0800612a 	.word	0x0800612a
 8005a3c:	00000000 	.word	0x00000000
 8005a40:	080057c3 	.word	0x080057c3
 8005a44:	08006126 	.word	0x08006126

08005a48 <_printf_common>:
 8005a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4c:	4616      	mov	r6, r2
 8005a4e:	4699      	mov	r9, r3
 8005a50:	688a      	ldr	r2, [r1, #8]
 8005a52:	690b      	ldr	r3, [r1, #16]
 8005a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	bfb8      	it	lt
 8005a5c:	4613      	movlt	r3, r2
 8005a5e:	6033      	str	r3, [r6, #0]
 8005a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a64:	4607      	mov	r7, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	b10a      	cbz	r2, 8005a6e <_printf_common+0x26>
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	0699      	lsls	r1, r3, #26
 8005a72:	bf42      	ittt	mi
 8005a74:	6833      	ldrmi	r3, [r6, #0]
 8005a76:	3302      	addmi	r3, #2
 8005a78:	6033      	strmi	r3, [r6, #0]
 8005a7a:	6825      	ldr	r5, [r4, #0]
 8005a7c:	f015 0506 	ands.w	r5, r5, #6
 8005a80:	d106      	bne.n	8005a90 <_printf_common+0x48>
 8005a82:	f104 0a19 	add.w	sl, r4, #25
 8005a86:	68e3      	ldr	r3, [r4, #12]
 8005a88:	6832      	ldr	r2, [r6, #0]
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	42ab      	cmp	r3, r5
 8005a8e:	dc26      	bgt.n	8005ade <_printf_common+0x96>
 8005a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a94:	1e13      	subs	r3, r2, #0
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	bf18      	it	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	0692      	lsls	r2, r2, #26
 8005a9e:	d42b      	bmi.n	8005af8 <_printf_common+0xb0>
 8005aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	47c0      	blx	r8
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d01e      	beq.n	8005aec <_printf_common+0xa4>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	68e5      	ldr	r5, [r4, #12]
 8005ab2:	6832      	ldr	r2, [r6, #0]
 8005ab4:	f003 0306 	and.w	r3, r3, #6
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	bf08      	it	eq
 8005abc:	1aad      	subeq	r5, r5, r2
 8005abe:	68a3      	ldr	r3, [r4, #8]
 8005ac0:	6922      	ldr	r2, [r4, #16]
 8005ac2:	bf0c      	ite	eq
 8005ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ac8:	2500      	movne	r5, #0
 8005aca:	4293      	cmp	r3, r2
 8005acc:	bfc4      	itt	gt
 8005ace:	1a9b      	subgt	r3, r3, r2
 8005ad0:	18ed      	addgt	r5, r5, r3
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	341a      	adds	r4, #26
 8005ad6:	42b5      	cmp	r5, r6
 8005ad8:	d11a      	bne.n	8005b10 <_printf_common+0xc8>
 8005ada:	2000      	movs	r0, #0
 8005adc:	e008      	b.n	8005af0 <_printf_common+0xa8>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	47c0      	blx	r8
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d103      	bne.n	8005af4 <_printf_common+0xac>
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295
 8005af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af4:	3501      	adds	r5, #1
 8005af6:	e7c6      	b.n	8005a86 <_printf_common+0x3e>
 8005af8:	18e1      	adds	r1, r4, r3
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	2030      	movs	r0, #48	; 0x30
 8005afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b02:	4422      	add	r2, r4
 8005b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	e7c7      	b.n	8005aa0 <_printf_common+0x58>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4622      	mov	r2, r4
 8005b14:	4649      	mov	r1, r9
 8005b16:	4638      	mov	r0, r7
 8005b18:	47c0      	blx	r8
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d0e6      	beq.n	8005aec <_printf_common+0xa4>
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7d9      	b.n	8005ad6 <_printf_common+0x8e>
	...

08005b24 <_printf_i>:
 8005b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b28:	7e0f      	ldrb	r7, [r1, #24]
 8005b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b2c:	2f78      	cmp	r7, #120	; 0x78
 8005b2e:	4691      	mov	r9, r2
 8005b30:	4680      	mov	r8, r0
 8005b32:	460c      	mov	r4, r1
 8005b34:	469a      	mov	sl, r3
 8005b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b3a:	d807      	bhi.n	8005b4c <_printf_i+0x28>
 8005b3c:	2f62      	cmp	r7, #98	; 0x62
 8005b3e:	d80a      	bhi.n	8005b56 <_printf_i+0x32>
 8005b40:	2f00      	cmp	r7, #0
 8005b42:	f000 80d8 	beq.w	8005cf6 <_printf_i+0x1d2>
 8005b46:	2f58      	cmp	r7, #88	; 0x58
 8005b48:	f000 80a3 	beq.w	8005c92 <_printf_i+0x16e>
 8005b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b54:	e03a      	b.n	8005bcc <_printf_i+0xa8>
 8005b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b5a:	2b15      	cmp	r3, #21
 8005b5c:	d8f6      	bhi.n	8005b4c <_printf_i+0x28>
 8005b5e:	a101      	add	r1, pc, #4	; (adr r1, 8005b64 <_printf_i+0x40>)
 8005b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b64:	08005bbd 	.word	0x08005bbd
 8005b68:	08005bd1 	.word	0x08005bd1
 8005b6c:	08005b4d 	.word	0x08005b4d
 8005b70:	08005b4d 	.word	0x08005b4d
 8005b74:	08005b4d 	.word	0x08005b4d
 8005b78:	08005b4d 	.word	0x08005b4d
 8005b7c:	08005bd1 	.word	0x08005bd1
 8005b80:	08005b4d 	.word	0x08005b4d
 8005b84:	08005b4d 	.word	0x08005b4d
 8005b88:	08005b4d 	.word	0x08005b4d
 8005b8c:	08005b4d 	.word	0x08005b4d
 8005b90:	08005cdd 	.word	0x08005cdd
 8005b94:	08005c01 	.word	0x08005c01
 8005b98:	08005cbf 	.word	0x08005cbf
 8005b9c:	08005b4d 	.word	0x08005b4d
 8005ba0:	08005b4d 	.word	0x08005b4d
 8005ba4:	08005cff 	.word	0x08005cff
 8005ba8:	08005b4d 	.word	0x08005b4d
 8005bac:	08005c01 	.word	0x08005c01
 8005bb0:	08005b4d 	.word	0x08005b4d
 8005bb4:	08005b4d 	.word	0x08005b4d
 8005bb8:	08005cc7 	.word	0x08005cc7
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	1d1a      	adds	r2, r3, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	602a      	str	r2, [r5, #0]
 8005bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0a3      	b.n	8005d18 <_printf_i+0x1f4>
 8005bd0:	6820      	ldr	r0, [r4, #0]
 8005bd2:	6829      	ldr	r1, [r5, #0]
 8005bd4:	0606      	lsls	r6, r0, #24
 8005bd6:	f101 0304 	add.w	r3, r1, #4
 8005bda:	d50a      	bpl.n	8005bf2 <_printf_i+0xce>
 8005bdc:	680e      	ldr	r6, [r1, #0]
 8005bde:	602b      	str	r3, [r5, #0]
 8005be0:	2e00      	cmp	r6, #0
 8005be2:	da03      	bge.n	8005bec <_printf_i+0xc8>
 8005be4:	232d      	movs	r3, #45	; 0x2d
 8005be6:	4276      	negs	r6, r6
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bec:	485e      	ldr	r0, [pc, #376]	; (8005d68 <_printf_i+0x244>)
 8005bee:	230a      	movs	r3, #10
 8005bf0:	e019      	b.n	8005c26 <_printf_i+0x102>
 8005bf2:	680e      	ldr	r6, [r1, #0]
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bfa:	bf18      	it	ne
 8005bfc:	b236      	sxthne	r6, r6
 8005bfe:	e7ef      	b.n	8005be0 <_printf_i+0xbc>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	6820      	ldr	r0, [r4, #0]
 8005c04:	1d19      	adds	r1, r3, #4
 8005c06:	6029      	str	r1, [r5, #0]
 8005c08:	0601      	lsls	r1, r0, #24
 8005c0a:	d501      	bpl.n	8005c10 <_printf_i+0xec>
 8005c0c:	681e      	ldr	r6, [r3, #0]
 8005c0e:	e002      	b.n	8005c16 <_printf_i+0xf2>
 8005c10:	0646      	lsls	r6, r0, #25
 8005c12:	d5fb      	bpl.n	8005c0c <_printf_i+0xe8>
 8005c14:	881e      	ldrh	r6, [r3, #0]
 8005c16:	4854      	ldr	r0, [pc, #336]	; (8005d68 <_printf_i+0x244>)
 8005c18:	2f6f      	cmp	r7, #111	; 0x6f
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2308      	moveq	r3, #8
 8005c1e:	230a      	movne	r3, #10
 8005c20:	2100      	movs	r1, #0
 8005c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c26:	6865      	ldr	r5, [r4, #4]
 8005c28:	60a5      	str	r5, [r4, #8]
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	bfa2      	ittt	ge
 8005c2e:	6821      	ldrge	r1, [r4, #0]
 8005c30:	f021 0104 	bicge.w	r1, r1, #4
 8005c34:	6021      	strge	r1, [r4, #0]
 8005c36:	b90e      	cbnz	r6, 8005c3c <_printf_i+0x118>
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	d04d      	beq.n	8005cd8 <_printf_i+0x1b4>
 8005c3c:	4615      	mov	r5, r2
 8005c3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c42:	fb03 6711 	mls	r7, r3, r1, r6
 8005c46:	5dc7      	ldrb	r7, [r0, r7]
 8005c48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c4c:	4637      	mov	r7, r6
 8005c4e:	42bb      	cmp	r3, r7
 8005c50:	460e      	mov	r6, r1
 8005c52:	d9f4      	bls.n	8005c3e <_printf_i+0x11a>
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d10b      	bne.n	8005c70 <_printf_i+0x14c>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	07de      	lsls	r6, r3, #31
 8005c5c:	d508      	bpl.n	8005c70 <_printf_i+0x14c>
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	6861      	ldr	r1, [r4, #4]
 8005c62:	4299      	cmp	r1, r3
 8005c64:	bfde      	ittt	le
 8005c66:	2330      	movle	r3, #48	; 0x30
 8005c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c70:	1b52      	subs	r2, r2, r5
 8005c72:	6122      	str	r2, [r4, #16]
 8005c74:	f8cd a000 	str.w	sl, [sp]
 8005c78:	464b      	mov	r3, r9
 8005c7a:	aa03      	add	r2, sp, #12
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f7ff fee2 	bl	8005a48 <_printf_common>
 8005c84:	3001      	adds	r0, #1
 8005c86:	d14c      	bne.n	8005d22 <_printf_i+0x1fe>
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	b004      	add	sp, #16
 8005c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c92:	4835      	ldr	r0, [pc, #212]	; (8005d68 <_printf_i+0x244>)
 8005c94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c98:	6829      	ldr	r1, [r5, #0]
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ca0:	6029      	str	r1, [r5, #0]
 8005ca2:	061d      	lsls	r5, r3, #24
 8005ca4:	d514      	bpl.n	8005cd0 <_printf_i+0x1ac>
 8005ca6:	07df      	lsls	r7, r3, #31
 8005ca8:	bf44      	itt	mi
 8005caa:	f043 0320 	orrmi.w	r3, r3, #32
 8005cae:	6023      	strmi	r3, [r4, #0]
 8005cb0:	b91e      	cbnz	r6, 8005cba <_printf_i+0x196>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	f023 0320 	bic.w	r3, r3, #32
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	2310      	movs	r3, #16
 8005cbc:	e7b0      	b.n	8005c20 <_printf_i+0xfc>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	f043 0320 	orr.w	r3, r3, #32
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	2378      	movs	r3, #120	; 0x78
 8005cc8:	4828      	ldr	r0, [pc, #160]	; (8005d6c <_printf_i+0x248>)
 8005cca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cce:	e7e3      	b.n	8005c98 <_printf_i+0x174>
 8005cd0:	0659      	lsls	r1, r3, #25
 8005cd2:	bf48      	it	mi
 8005cd4:	b2b6      	uxthmi	r6, r6
 8005cd6:	e7e6      	b.n	8005ca6 <_printf_i+0x182>
 8005cd8:	4615      	mov	r5, r2
 8005cda:	e7bb      	b.n	8005c54 <_printf_i+0x130>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	6826      	ldr	r6, [r4, #0]
 8005ce0:	6961      	ldr	r1, [r4, #20]
 8005ce2:	1d18      	adds	r0, r3, #4
 8005ce4:	6028      	str	r0, [r5, #0]
 8005ce6:	0635      	lsls	r5, r6, #24
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	d501      	bpl.n	8005cf0 <_printf_i+0x1cc>
 8005cec:	6019      	str	r1, [r3, #0]
 8005cee:	e002      	b.n	8005cf6 <_printf_i+0x1d2>
 8005cf0:	0670      	lsls	r0, r6, #25
 8005cf2:	d5fb      	bpl.n	8005cec <_printf_i+0x1c8>
 8005cf4:	8019      	strh	r1, [r3, #0]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	6123      	str	r3, [r4, #16]
 8005cfa:	4615      	mov	r5, r2
 8005cfc:	e7ba      	b.n	8005c74 <_printf_i+0x150>
 8005cfe:	682b      	ldr	r3, [r5, #0]
 8005d00:	1d1a      	adds	r2, r3, #4
 8005d02:	602a      	str	r2, [r5, #0]
 8005d04:	681d      	ldr	r5, [r3, #0]
 8005d06:	6862      	ldr	r2, [r4, #4]
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f7fa fa68 	bl	80001e0 <memchr>
 8005d10:	b108      	cbz	r0, 8005d16 <_printf_i+0x1f2>
 8005d12:	1b40      	subs	r0, r0, r5
 8005d14:	6060      	str	r0, [r4, #4]
 8005d16:	6863      	ldr	r3, [r4, #4]
 8005d18:	6123      	str	r3, [r4, #16]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d20:	e7a8      	b.n	8005c74 <_printf_i+0x150>
 8005d22:	6923      	ldr	r3, [r4, #16]
 8005d24:	462a      	mov	r2, r5
 8005d26:	4649      	mov	r1, r9
 8005d28:	4640      	mov	r0, r8
 8005d2a:	47d0      	blx	sl
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d0ab      	beq.n	8005c88 <_printf_i+0x164>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	079b      	lsls	r3, r3, #30
 8005d34:	d413      	bmi.n	8005d5e <_printf_i+0x23a>
 8005d36:	68e0      	ldr	r0, [r4, #12]
 8005d38:	9b03      	ldr	r3, [sp, #12]
 8005d3a:	4298      	cmp	r0, r3
 8005d3c:	bfb8      	it	lt
 8005d3e:	4618      	movlt	r0, r3
 8005d40:	e7a4      	b.n	8005c8c <_printf_i+0x168>
 8005d42:	2301      	movs	r3, #1
 8005d44:	4632      	mov	r2, r6
 8005d46:	4649      	mov	r1, r9
 8005d48:	4640      	mov	r0, r8
 8005d4a:	47d0      	blx	sl
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d09b      	beq.n	8005c88 <_printf_i+0x164>
 8005d50:	3501      	adds	r5, #1
 8005d52:	68e3      	ldr	r3, [r4, #12]
 8005d54:	9903      	ldr	r1, [sp, #12]
 8005d56:	1a5b      	subs	r3, r3, r1
 8005d58:	42ab      	cmp	r3, r5
 8005d5a:	dcf2      	bgt.n	8005d42 <_printf_i+0x21e>
 8005d5c:	e7eb      	b.n	8005d36 <_printf_i+0x212>
 8005d5e:	2500      	movs	r5, #0
 8005d60:	f104 0619 	add.w	r6, r4, #25
 8005d64:	e7f5      	b.n	8005d52 <_printf_i+0x22e>
 8005d66:	bf00      	nop
 8005d68:	08006131 	.word	0x08006131
 8005d6c:	08006142 	.word	0x08006142

08005d70 <_read_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d07      	ldr	r5, [pc, #28]	; (8005d90 <_read_r+0x20>)
 8005d74:	4604      	mov	r4, r0
 8005d76:	4608      	mov	r0, r1
 8005d78:	4611      	mov	r1, r2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	602a      	str	r2, [r5, #0]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f7fa ff3e 	bl	8000c00 <_read>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d102      	bne.n	8005d8e <_read_r+0x1e>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	b103      	cbz	r3, 8005d8e <_read_r+0x1e>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	20001274 	.word	0x20001274

08005d94 <__swbuf_r>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	460e      	mov	r6, r1
 8005d98:	4614      	mov	r4, r2
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	b118      	cbz	r0, 8005da6 <__swbuf_r+0x12>
 8005d9e:	6983      	ldr	r3, [r0, #24]
 8005da0:	b90b      	cbnz	r3, 8005da6 <__swbuf_r+0x12>
 8005da2:	f7ff f971 	bl	8005088 <__sinit>
 8005da6:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <__swbuf_r+0x98>)
 8005da8:	429c      	cmp	r4, r3
 8005daa:	d12b      	bne.n	8005e04 <__swbuf_r+0x70>
 8005dac:	686c      	ldr	r4, [r5, #4]
 8005dae:	69a3      	ldr	r3, [r4, #24]
 8005db0:	60a3      	str	r3, [r4, #8]
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	071a      	lsls	r2, r3, #28
 8005db6:	d52f      	bpl.n	8005e18 <__swbuf_r+0x84>
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	b36b      	cbz	r3, 8005e18 <__swbuf_r+0x84>
 8005dbc:	6923      	ldr	r3, [r4, #16]
 8005dbe:	6820      	ldr	r0, [r4, #0]
 8005dc0:	1ac0      	subs	r0, r0, r3
 8005dc2:	6963      	ldr	r3, [r4, #20]
 8005dc4:	b2f6      	uxtb	r6, r6
 8005dc6:	4283      	cmp	r3, r0
 8005dc8:	4637      	mov	r7, r6
 8005dca:	dc04      	bgt.n	8005dd6 <__swbuf_r+0x42>
 8005dcc:	4621      	mov	r1, r4
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f7ff fc3a 	bl	8005648 <_fflush_r>
 8005dd4:	bb30      	cbnz	r0, 8005e24 <__swbuf_r+0x90>
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	60a3      	str	r3, [r4, #8]
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	6022      	str	r2, [r4, #0]
 8005de2:	701e      	strb	r6, [r3, #0]
 8005de4:	6963      	ldr	r3, [r4, #20]
 8005de6:	3001      	adds	r0, #1
 8005de8:	4283      	cmp	r3, r0
 8005dea:	d004      	beq.n	8005df6 <__swbuf_r+0x62>
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	07db      	lsls	r3, r3, #31
 8005df0:	d506      	bpl.n	8005e00 <__swbuf_r+0x6c>
 8005df2:	2e0a      	cmp	r6, #10
 8005df4:	d104      	bne.n	8005e00 <__swbuf_r+0x6c>
 8005df6:	4621      	mov	r1, r4
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f7ff fc25 	bl	8005648 <_fflush_r>
 8005dfe:	b988      	cbnz	r0, 8005e24 <__swbuf_r+0x90>
 8005e00:	4638      	mov	r0, r7
 8005e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <__swbuf_r+0x9c>)
 8005e06:	429c      	cmp	r4, r3
 8005e08:	d101      	bne.n	8005e0e <__swbuf_r+0x7a>
 8005e0a:	68ac      	ldr	r4, [r5, #8]
 8005e0c:	e7cf      	b.n	8005dae <__swbuf_r+0x1a>
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <__swbuf_r+0xa0>)
 8005e10:	429c      	cmp	r4, r3
 8005e12:	bf08      	it	eq
 8005e14:	68ec      	ldreq	r4, [r5, #12]
 8005e16:	e7ca      	b.n	8005dae <__swbuf_r+0x1a>
 8005e18:	4621      	mov	r1, r4
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 f80c 	bl	8005e38 <__swsetup_r>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d0cb      	beq.n	8005dbc <__swbuf_r+0x28>
 8005e24:	f04f 37ff 	mov.w	r7, #4294967295
 8005e28:	e7ea      	b.n	8005e00 <__swbuf_r+0x6c>
 8005e2a:	bf00      	nop
 8005e2c:	080060dc 	.word	0x080060dc
 8005e30:	080060fc 	.word	0x080060fc
 8005e34:	080060bc 	.word	0x080060bc

08005e38 <__swsetup_r>:
 8005e38:	4b32      	ldr	r3, [pc, #200]	; (8005f04 <__swsetup_r+0xcc>)
 8005e3a:	b570      	push	{r4, r5, r6, lr}
 8005e3c:	681d      	ldr	r5, [r3, #0]
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	b125      	cbz	r5, 8005e4e <__swsetup_r+0x16>
 8005e44:	69ab      	ldr	r3, [r5, #24]
 8005e46:	b913      	cbnz	r3, 8005e4e <__swsetup_r+0x16>
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f7ff f91d 	bl	8005088 <__sinit>
 8005e4e:	4b2e      	ldr	r3, [pc, #184]	; (8005f08 <__swsetup_r+0xd0>)
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d10f      	bne.n	8005e74 <__swsetup_r+0x3c>
 8005e54:	686c      	ldr	r4, [r5, #4]
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e5c:	0719      	lsls	r1, r3, #28
 8005e5e:	d42c      	bmi.n	8005eba <__swsetup_r+0x82>
 8005e60:	06dd      	lsls	r5, r3, #27
 8005e62:	d411      	bmi.n	8005e88 <__swsetup_r+0x50>
 8005e64:	2309      	movs	r3, #9
 8005e66:	6033      	str	r3, [r6, #0]
 8005e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e72:	e03e      	b.n	8005ef2 <__swsetup_r+0xba>
 8005e74:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <__swsetup_r+0xd4>)
 8005e76:	429c      	cmp	r4, r3
 8005e78:	d101      	bne.n	8005e7e <__swsetup_r+0x46>
 8005e7a:	68ac      	ldr	r4, [r5, #8]
 8005e7c:	e7eb      	b.n	8005e56 <__swsetup_r+0x1e>
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <__swsetup_r+0xd8>)
 8005e80:	429c      	cmp	r4, r3
 8005e82:	bf08      	it	eq
 8005e84:	68ec      	ldreq	r4, [r5, #12]
 8005e86:	e7e6      	b.n	8005e56 <__swsetup_r+0x1e>
 8005e88:	0758      	lsls	r0, r3, #29
 8005e8a:	d512      	bpl.n	8005eb2 <__swsetup_r+0x7a>
 8005e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e8e:	b141      	cbz	r1, 8005ea2 <__swsetup_r+0x6a>
 8005e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e94:	4299      	cmp	r1, r3
 8005e96:	d002      	beq.n	8005e9e <__swsetup_r+0x66>
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f7ff fc2f 	bl	80056fc <_free_r>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6063      	str	r3, [r4, #4]
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f043 0308 	orr.w	r3, r3, #8
 8005eb8:	81a3      	strh	r3, [r4, #12]
 8005eba:	6923      	ldr	r3, [r4, #16]
 8005ebc:	b94b      	cbnz	r3, 8005ed2 <__swsetup_r+0x9a>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec8:	d003      	beq.n	8005ed2 <__swsetup_r+0x9a>
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f847 	bl	8005f60 <__smakebuf_r>
 8005ed2:	89a0      	ldrh	r0, [r4, #12]
 8005ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ed8:	f010 0301 	ands.w	r3, r0, #1
 8005edc:	d00a      	beq.n	8005ef4 <__swsetup_r+0xbc>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60a3      	str	r3, [r4, #8]
 8005ee2:	6963      	ldr	r3, [r4, #20]
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	61a3      	str	r3, [r4, #24]
 8005ee8:	6923      	ldr	r3, [r4, #16]
 8005eea:	b943      	cbnz	r3, 8005efe <__swsetup_r+0xc6>
 8005eec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ef0:	d1ba      	bne.n	8005e68 <__swsetup_r+0x30>
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	0781      	lsls	r1, r0, #30
 8005ef6:	bf58      	it	pl
 8005ef8:	6963      	ldrpl	r3, [r4, #20]
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	e7f4      	b.n	8005ee8 <__swsetup_r+0xb0>
 8005efe:	2000      	movs	r0, #0
 8005f00:	e7f7      	b.n	8005ef2 <__swsetup_r+0xba>
 8005f02:	bf00      	nop
 8005f04:	20000010 	.word	0x20000010
 8005f08:	080060dc 	.word	0x080060dc
 8005f0c:	080060fc 	.word	0x080060fc
 8005f10:	080060bc 	.word	0x080060bc

08005f14 <__swhatbuf_r>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	460e      	mov	r6, r1
 8005f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	b096      	sub	sp, #88	; 0x58
 8005f20:	4614      	mov	r4, r2
 8005f22:	461d      	mov	r5, r3
 8005f24:	da08      	bge.n	8005f38 <__swhatbuf_r+0x24>
 8005f26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	602a      	str	r2, [r5, #0]
 8005f2e:	061a      	lsls	r2, r3, #24
 8005f30:	d410      	bmi.n	8005f54 <__swhatbuf_r+0x40>
 8005f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f36:	e00e      	b.n	8005f56 <__swhatbuf_r+0x42>
 8005f38:	466a      	mov	r2, sp
 8005f3a:	f000 f851 	bl	8005fe0 <_fstat_r>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	dbf1      	blt.n	8005f26 <__swhatbuf_r+0x12>
 8005f42:	9a01      	ldr	r2, [sp, #4]
 8005f44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f4c:	425a      	negs	r2, r3
 8005f4e:	415a      	adcs	r2, r3
 8005f50:	602a      	str	r2, [r5, #0]
 8005f52:	e7ee      	b.n	8005f32 <__swhatbuf_r+0x1e>
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	2000      	movs	r0, #0
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	b016      	add	sp, #88	; 0x58
 8005f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f60 <__smakebuf_r>:
 8005f60:	898b      	ldrh	r3, [r1, #12]
 8005f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f64:	079d      	lsls	r5, r3, #30
 8005f66:	4606      	mov	r6, r0
 8005f68:	460c      	mov	r4, r1
 8005f6a:	d507      	bpl.n	8005f7c <__smakebuf_r+0x1c>
 8005f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	6123      	str	r3, [r4, #16]
 8005f74:	2301      	movs	r3, #1
 8005f76:	6163      	str	r3, [r4, #20]
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	ab01      	add	r3, sp, #4
 8005f7e:	466a      	mov	r2, sp
 8005f80:	f7ff ffc8 	bl	8005f14 <__swhatbuf_r>
 8005f84:	9900      	ldr	r1, [sp, #0]
 8005f86:	4605      	mov	r5, r0
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f7ff f96b 	bl	8005264 <_malloc_r>
 8005f8e:	b948      	cbnz	r0, 8005fa4 <__smakebuf_r+0x44>
 8005f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f94:	059a      	lsls	r2, r3, #22
 8005f96:	d4ef      	bmi.n	8005f78 <__smakebuf_r+0x18>
 8005f98:	f023 0303 	bic.w	r3, r3, #3
 8005f9c:	f043 0302 	orr.w	r3, r3, #2
 8005fa0:	81a3      	strh	r3, [r4, #12]
 8005fa2:	e7e3      	b.n	8005f6c <__smakebuf_r+0xc>
 8005fa4:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <__smakebuf_r+0x7c>)
 8005fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	6020      	str	r0, [r4, #0]
 8005fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	6163      	str	r3, [r4, #20]
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	6120      	str	r0, [r4, #16]
 8005fba:	b15b      	cbz	r3, 8005fd4 <__smakebuf_r+0x74>
 8005fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f000 f81f 	bl	8006004 <_isatty_r>
 8005fc6:	b128      	cbz	r0, 8005fd4 <__smakebuf_r+0x74>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	81a3      	strh	r3, [r4, #12]
 8005fd4:	89a0      	ldrh	r0, [r4, #12]
 8005fd6:	4305      	orrs	r5, r0
 8005fd8:	81a5      	strh	r5, [r4, #12]
 8005fda:	e7cd      	b.n	8005f78 <__smakebuf_r+0x18>
 8005fdc:	08005021 	.word	0x08005021

08005fe0 <_fstat_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d07      	ldr	r5, [pc, #28]	; (8006000 <_fstat_r+0x20>)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	602b      	str	r3, [r5, #0]
 8005fee:	f7fa fe4c 	bl	8000c8a <_fstat>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d102      	bne.n	8005ffc <_fstat_r+0x1c>
 8005ff6:	682b      	ldr	r3, [r5, #0]
 8005ff8:	b103      	cbz	r3, 8005ffc <_fstat_r+0x1c>
 8005ffa:	6023      	str	r3, [r4, #0]
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	bf00      	nop
 8006000:	20001274 	.word	0x20001274

08006004 <_isatty_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4d06      	ldr	r5, [pc, #24]	; (8006020 <_isatty_r+0x1c>)
 8006008:	2300      	movs	r3, #0
 800600a:	4604      	mov	r4, r0
 800600c:	4608      	mov	r0, r1
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	f7fa fe4b 	bl	8000caa <_isatty>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_isatty_r+0x1a>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_isatty_r+0x1a>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	20001274 	.word	0x20001274

08006024 <_init>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr

08006030 <_fini>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	bf00      	nop
 8006034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006036:	bc08      	pop	{r3}
 8006038:	469e      	mov	lr, r3
 800603a:	4770      	bx	lr
