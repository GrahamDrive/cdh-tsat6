
cdh-tsat6-stm32project-boardV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050ac  080050ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080050ac  080050ac  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050ac  080050ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050ac  080050ac  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080050b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  20000074  08005128  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000126c  08005128  0002126c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c17  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003625  00000000  00000000  00038cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  0003d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262e5  00000000  00000000  0003ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178af  00000000  00000000  00064fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e89a3  00000000  00000000  0007c88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016522f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  00165280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fbc 	.word	0x08004fbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004fbc 	.word	0x08004fbc

080001e0 <boot_CAN>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
void boot_CAN(CAN_HandleTypeDef *hcan1){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]

	HAL_CAN_Start(hcan1); // Turn on CANBus
 80001e8:	6878      	ldr	r0, [r7, #4]
 80001ea:	f000 fe26 	bl	8000e3a <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001ee:	2102      	movs	r1, #2
 80001f0:	6878      	ldr	r0, [r7, #4]
 80001f2:	f001 f848 	bl	8001286 <HAL_CAN_ActivateNotification>

	// TX Message Parameters
	TxMessage.StdId = ID;
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <boot_CAN+0x38>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	601a      	str	r2, [r3, #0]
	TxMessage.IDE = CAN_ID_STD;
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <boot_CAN+0x38>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
	TxMessage.RTR = CAN_RTR_DATA;
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <boot_CAN+0x38>)
 8000204:	2200      	movs	r2, #0
 8000206:	60da      	str	r2, [r3, #12]
	TxMessage.DLC = MAX_CAN_DATA_LENGTH;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <boot_CAN+0x38>)
 800020a:	2208      	movs	r2, #8
 800020c:	611a      	str	r2, [r3, #16]
}
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000090 	.word	0x20000090

0800021c <CAN_transmit_message>:
 * @brief Used to send messages over CAN
 * @param hcan1 The CANBUS object to send the message over\
 * @param message A 8 byte message
 */
void CAN_transmit_message(CAN_HandleTypeDef *hcan1, uint8_t message[])
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  HAL_CAN_AddTxMessage(hcan1,&TxMessage,message,&TxMailbox);
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <CAN_transmit_message+0x20>)
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	4905      	ldr	r1, [pc, #20]	; (8000240 <CAN_transmit_message+0x24>)
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	f000 fe48 	bl	8000ec2 <HAL_CAN_AddTxMessage>
}
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	200000c4 	.word	0x200000c4
 8000240:	20000090 	.word	0x20000090

08000244 <CAN_MESSAGE_RECEIVED>:

void CAN_MESSAGE_RECEIVED(CAN_HandleTypeDef *hcan1){
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	  HAL_CAN_GetRxMessage(hcan1,CAN_RX_FIFO0,&RxMessage,RxData);
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <CAN_MESSAGE_RECEIVED+0x1c>)
 800024e:	4a05      	ldr	r2, [pc, #20]	; (8000264 <CAN_MESSAGE_RECEIVED+0x20>)
 8000250:	2100      	movs	r1, #0
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f000 ff05 	bl	8001062 <HAL_CAN_GetRxMessage>
	  return;
 8000258:	bf00      	nop
}
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	200000c8 	.word	0x200000c8
 8000264:	200000a8 	.word	0x200000a8

08000268 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <vApplicationGetIdleTaskMemory+0x2c>)
 8000278:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <vApplicationGetIdleTaskMemory+0x30>)
 800027e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2280      	movs	r2, #128	; 0x80
 8000284:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000286:	bf00      	nop
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	200000d0 	.word	0x200000d0
 8000298:	20000184 	.word	0x20000184

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b5b0      	push	{r4, r5, r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a2:	f000 fc96 	bl	8000bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a6:	f000 f845 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002aa:	f000 f9bd 	bl	8000628 <MX_GPIO_Init>
  MX_CAN1_Init();
 80002ae:	f000 f89f 	bl	80003f0 <MX_CAN1_Init>
  MX_SPI1_Init();
 80002b2:	f000 f8ff 	bl	80004b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80002b6:	f000 f93b 	bl	8000530 <MX_SPI2_Init>
  MX_SPI3_Init();
 80002ba:	f000 f977 	bl	80005ac <MX_SPI3_Init>
  MX_RTC_Init();
 80002be:	f000 f8d1 	bl	8000464 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  	  	TxData[0] = 0x4;
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <main+0x88>)
 80002c4:	2204      	movs	r2, #4
 80002c6:	701a      	strb	r2, [r3, #0]
  	    TxData[1] = 0x2;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <main+0x88>)
 80002ca:	2202      	movs	r2, #2
 80002cc:	705a      	strb	r2, [r3, #1]
  	    TxData[2] = 0x0;
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <main+0x88>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	709a      	strb	r2, [r3, #2]
  	    TxData[3] = 0x0;
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <main+0x88>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	70da      	strb	r2, [r3, #3]
  	    TxData[4] = 0x0;
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <main+0x88>)
 80002dc:	2200      	movs	r2, #0
 80002de:	711a      	strb	r2, [r3, #4]
  	    TxData[5] = 0x0;
 80002e0:	4b10      	ldr	r3, [pc, #64]	; (8000324 <main+0x88>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	715a      	strb	r2, [r3, #5]
  	    TxData[6] = 0x2;
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <main+0x88>)
 80002e8:	2202      	movs	r2, #2
 80002ea:	719a      	strb	r2, [r3, #6]
  	    TxData[7] = 0x4;
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <main+0x88>)
 80002ee:	2204      	movs	r2, #4
 80002f0:	71da      	strb	r2, [r3, #7]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <main+0x8c>)
 80002f4:	1d3c      	adds	r4, r7, #4
 80002f6:	461d      	mov	r5, r3
 80002f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f003 fb10 	bl	800392e <osThreadCreate>
 800030e:	4603      	mov	r3, r0
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <main+0x90>)
 8000312:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000314:	f003 fb04 	bl	8003920 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	CAN_transmit_message(&hcan1,TxData);
 8000318:	4902      	ldr	r1, [pc, #8]	; (8000324 <main+0x88>)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <main+0x94>)
 800031c:	f7ff ff7e 	bl	800021c <CAN_transmit_message>
 8000320:	e7fa      	b.n	8000318 <main+0x7c>
 8000322:	bf00      	nop
 8000324:	20000500 	.word	0x20000500
 8000328:	08004fe0 	.word	0x08004fe0
 800032c:	200004fc 	.word	0x200004fc
 8000330:	20000384 	.word	0x20000384

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b096      	sub	sp, #88	; 0x58
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0314 	add.w	r3, r7, #20
 800033e:	2244      	movs	r2, #68	; 0x44
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fd70 	bl	8004e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	463b      	mov	r3, r7
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000356:	f44f 7000 	mov.w	r0, #512	; 0x200
 800035a:	f001 fc7b 	bl	8001c54 <HAL_PWREx_ControlVoltageScaling>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000364:	f000 fa0c 	bl	8000780 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000368:	f001 fc56 	bl	8001c18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800036c:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <SystemClock_Config+0xb8>)
 800036e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000372:	4a1e      	ldr	r2, [pc, #120]	; (80003ec <SystemClock_Config+0xb8>)
 8000374:	f023 0318 	bic.w	r3, r3, #24
 8000378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800037c:	2305      	movs	r3, #5
 800037e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000384:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038a:	2302      	movs	r3, #2
 800038c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038e:	2303      	movs	r3, #3
 8000390:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000392:	2301      	movs	r3, #1
 8000394:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000396:	2314      	movs	r3, #20
 8000398:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800039a:	2307      	movs	r3, #7
 800039c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800039e:	2302      	movs	r3, #2
 80003a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003a2:	2302      	movs	r3, #2
 80003a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fca8 	bl	8001d00 <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x86>
  {
    Error_Handler();
 80003b6:	f000 f9e3 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003be:	2303      	movs	r3, #3
 80003c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	2104      	movs	r1, #4
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 f8a8 	bl	8002528 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003de:	f000 f9cf 	bl	8000780 <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3758      	adds	r7, #88	; 0x58
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000

080003f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_CAN1_Init+0x6c>)
 80003f6:	4a1a      	ldr	r2, [pc, #104]	; (8000460 <MX_CAN1_Init+0x70>)
 80003f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_CAN1_Init+0x6c>)
 80003fc:	2210      	movs	r2, #16
 80003fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <MX_CAN1_Init+0x6c>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_CAN1_Init+0x6c>)
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <MX_CAN1_Init+0x6c>)
 800040e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000412:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_CAN1_Init+0x6c>)
 8000416:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800041a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_CAN1_Init+0x6c>)
 800041e:	2200      	movs	r2, #0
 8000420:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_CAN1_Init+0x6c>)
 8000424:	2200      	movs	r2, #0
 8000426:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_CAN1_Init+0x6c>)
 800042a:	2200      	movs	r2, #0
 800042c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_CAN1_Init+0x6c>)
 8000430:	2200      	movs	r2, #0
 8000432:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_CAN1_Init+0x6c>)
 8000436:	2200      	movs	r2, #0
 8000438:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_CAN1_Init+0x6c>)
 800043c:	2200      	movs	r2, #0
 800043e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000440:	4806      	ldr	r0, [pc, #24]	; (800045c <MX_CAN1_Init+0x6c>)
 8000442:	f000 fbff 	bl	8000c44 <HAL_CAN_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800044c:	f000 f998 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  boot_CAN(&hcan1);
 8000450:	4802      	ldr	r0, [pc, #8]	; (800045c <MX_CAN1_Init+0x6c>)
 8000452:	f7ff fec5 	bl	80001e0 <boot_CAN>
  /* USER CODE END CAN1_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000384 	.word	0x20000384
 8000460:	40006400 	.word	0x40006400

08000464 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000468:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_RTC_Init+0x48>)
 800046a:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <MX_RTC_Init+0x4c>)
 800046c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_RTC_Init+0x48>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <MX_RTC_Init+0x48>)
 8000476:	227f      	movs	r2, #127	; 0x7f
 8000478:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_RTC_Init+0x48>)
 800047c:	22ff      	movs	r2, #255	; 0xff
 800047e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <MX_RTC_Init+0x48>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_RTC_Init+0x48>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <MX_RTC_Init+0x48>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_RTC_Init+0x48>)
 8000494:	2200      	movs	r2, #0
 8000496:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000498:	4804      	ldr	r0, [pc, #16]	; (80004ac <MX_RTC_Init+0x48>)
 800049a:	f002 fde3 	bl	8003064 <HAL_RTC_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80004a4:	f000 f96c 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200003ac 	.word	0x200003ac
 80004b0:	40002800 	.word	0x40002800

080004b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_SPI1_Init+0x74>)
 80004ba:	4a1c      	ldr	r2, [pc, #112]	; (800052c <MX_SPI1_Init+0x78>)
 80004bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004be:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_SPI1_Init+0x74>)
 80004c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004c6:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <MX_SPI1_Init+0x74>)
 80004ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004d4:	4b14      	ldr	r3, [pc, #80]	; (8000528 <MX_SPI1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004da:	4b13      	ldr	r3, [pc, #76]	; (8000528 <MX_SPI1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_SPI1_Init+0x74>)
 80004e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_SPI1_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_SPI1_Init+0x74>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_SPI1_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <MX_SPI1_Init+0x74>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_SPI1_Init+0x74>)
 8000502:	2207      	movs	r2, #7
 8000504:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <MX_SPI1_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_SPI1_Init+0x74>)
 800050e:	2208      	movs	r2, #8
 8000510:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_SPI1_Init+0x74>)
 8000514:	f002 feb8 	bl	8003288 <HAL_SPI_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 f92f 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200003d0 	.word	0x200003d0
 800052c:	40013000 	.word	0x40013000

08000530 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000536:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <MX_SPI2_Init+0x78>)
 8000538:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_SPI2_Init+0x74>)
 800053c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000540:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <MX_SPI2_Init+0x74>)
 800054a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800054e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_SPI2_Init+0x74>)
 800055e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000562:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_SPI2_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_SPI2_Init+0x74>)
 800057e:	2207      	movs	r2, #7
 8000580:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_SPI2_Init+0x74>)
 800058a:	2208      	movs	r2, #8
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_SPI2_Init+0x74>)
 8000590:	f002 fe7a 	bl	8003288 <HAL_SPI_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800059a:	f000 f8f1 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000434 	.word	0x20000434
 80005a8:	40003800 	.word	0x40003800

080005ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <MX_SPI3_Init+0x74>)
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <MX_SPI3_Init+0x78>)
 80005b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <MX_SPI3_Init+0x74>)
 80005b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_SPI3_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <MX_SPI3_Init+0x74>)
 80005c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_SPI3_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_SPI3_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_SPI3_Init+0x74>)
 80005da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_SPI3_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_SPI3_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_SPI3_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_SPI3_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_SPI3_Init+0x74>)
 80005fa:	2207      	movs	r2, #7
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_SPI3_Init+0x74>)
 8000600:	2200      	movs	r2, #0
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_SPI3_Init+0x74>)
 8000606:	2208      	movs	r2, #8
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_SPI3_Init+0x74>)
 800060c:	f002 fe3c 	bl	8003288 <HAL_SPI_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000616:	f000 f8b3 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000498 	.word	0x20000498
 8000624:	40003c00 	.word	0x40003c00

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <MX_GPIO_Init+0x100>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	4a39      	ldr	r2, [pc, #228]	; (8000728 <MX_GPIO_Init+0x100>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064a:	4b37      	ldr	r3, [pc, #220]	; (8000728 <MX_GPIO_Init+0x100>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	4b34      	ldr	r3, [pc, #208]	; (8000728 <MX_GPIO_Init+0x100>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a33      	ldr	r2, [pc, #204]	; (8000728 <MX_GPIO_Init+0x100>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b31      	ldr	r3, [pc, #196]	; (8000728 <MX_GPIO_Init+0x100>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <MX_GPIO_Init+0x100>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a2d      	ldr	r2, [pc, #180]	; (8000728 <MX_GPIO_Init+0x100>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_GPIO_Init+0x100>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_GPIO_Init+0x100>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a27      	ldr	r2, [pc, #156]	; (8000728 <MX_GPIO_Init+0x100>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <MX_GPIO_Init+0x100>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FLASH__HOLD_Pin|FLASH__WP_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006a4:	4821      	ldr	r0, [pc, #132]	; (800072c <MX_GPIO_Init+0x104>)
 80006a6:	f001 fa9f 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FLASH__CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80006b0:	481f      	ldr	r0, [pc, #124]	; (8000730 <MX_GPIO_Init+0x108>)
 80006b2:	f001 fa99 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|MRAM__CS_Pin|MRAM__WP_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f001 fa92 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FLASH__HOLD_Pin FLASH__WP_Pin */
  GPIO_InitStruct.Pin = FLASH__HOLD_Pin|FLASH__WP_Pin;
 80006c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4813      	ldr	r0, [pc, #76]	; (800072c <MX_GPIO_Init+0x104>)
 80006de:	f001 f909 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FLASH__CS_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = FLASH__CS_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80006e2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_GPIO_Init+0x108>)
 80006fc:	f001 f8fa 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WDI_Pin MRAM__CS_Pin MRAM__WP_Pin */
  GPIO_InitStruct.Pin = WDI_Pin|MRAM__CS_Pin|MRAM__WP_Pin;
 8000700:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f001 f8ea 	bl	80018f4 <HAL_GPIO_Init>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	48000400 	.word	0x48000400
 8000730:	48000800 	.word	0x48000800

08000734 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  // Handling Function
  CAN_MESSAGE_RECEIVED(hcan1);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fd81 	bl	8000244 <CAN_MESSAGE_RECEIVED>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f003 f937 	bl	80039c6 <osDelay>
 8000758:	e7fb      	b.n	8000752 <StartDefaultTask+0x8>
	...

0800075c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d101      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076e:	f000 fa49 	bl	8000c04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40001000 	.word	0x40001000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_MspInit+0x4c>)
 8000794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <HAL_MspInit+0x4c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6613      	str	r3, [r2, #96]	; 0x60
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_MspInit+0x4c>)
 80007a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_MspInit+0x4c>)
 80007ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6593      	str	r3, [r2, #88]	; 0x58
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f001 f869 	bl	80018a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <HAL_CAN_MspInit+0x8c>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d130      	bne.n	8000860 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_CAN_MspInit+0x90>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <HAL_CAN_MspInit+0x90>)
 8000804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <HAL_CAN_MspInit+0x90>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_CAN_MspInit+0x90>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <HAL_CAN_MspInit+0x90>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_CAN_MspInit+0x90>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800082e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000840:	230a      	movs	r3, #10
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <HAL_CAN_MspInit+0x94>)
 800084c:	f001 f852 	bl	80018f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2105      	movs	r1, #5
 8000854:	2014      	movs	r0, #20
 8000856:	f001 f823 	bl	80018a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800085a:	2014      	movs	r0, #20
 800085c:	f001 f83c 	bl	80018d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40006400 	.word	0x40006400
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400

08000874 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b09c      	sub	sp, #112	; 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	2268      	movs	r2, #104	; 0x68
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f004 facf 	bl	8004e28 <memset>
  if(hrtc->Instance==RTC)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <HAL_RTC_MspInit+0x58>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d117      	bne.n	80008c4 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000898:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800089a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 f87f 	bl	80029a8 <HAL_RCCEx_PeriphCLKConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80008b0:	f7ff ff66 	bl	8000780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_RTC_MspInit+0x5c>)
 80008b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <HAL_RTC_MspInit+0x5c>)
 80008bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	3770      	adds	r7, #112	; 0x70
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40002800 	.word	0x40002800
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a54      	ldr	r2, [pc, #336]	; (8000a44 <HAL_SPI_MspInit+0x170>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d129      	bne.n	800094a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008f6:	4b54      	ldr	r3, [pc, #336]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fa:	4a53      	ldr	r2, [pc, #332]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 80008fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000900:	6613      	str	r3, [r2, #96]	; 0x60
 8000902:	4b51      	ldr	r3, [pc, #324]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800090a:	623b      	str	r3, [r7, #32]
 800090c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b4e      	ldr	r3, [pc, #312]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a4d      	ldr	r2, [pc, #308]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
 8000924:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000926:	23c2      	movs	r3, #194	; 0xc2
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000936:	2305      	movs	r3, #5
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f000 ffd6 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000948:	e078      	b.n	8000a3c <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI2)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <HAL_SPI_MspInit+0x178>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d145      	bne.n	80009e0 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000954:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000958:	4a3b      	ldr	r2, [pc, #236]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6593      	str	r3, [r2, #88]	; 0x58
 8000960:	4b39      	ldr	r3, [pc, #228]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	4a35      	ldr	r2, [pc, #212]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000972:	f043 0304 	orr.w	r3, r3, #4
 8000976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000978:	4b33      	ldr	r3, [pc, #204]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000988:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 800098a:	f043 0302 	orr.w	r3, r3, #2
 800098e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	f003 0302 	and.w	r3, r3, #2
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800099c:	230c      	movs	r3, #12
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ac:	2305      	movs	r3, #5
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4826      	ldr	r0, [pc, #152]	; (8000a50 <HAL_SPI_MspInit+0x17c>)
 80009b8:	f000 ff9c 	bl	80018f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ce:	2305      	movs	r3, #5
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	481e      	ldr	r0, [pc, #120]	; (8000a54 <HAL_SPI_MspInit+0x180>)
 80009da:	f000 ff8b 	bl	80018f4 <HAL_GPIO_Init>
}
 80009de:	e02d      	b.n	8000a3c <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI3)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <HAL_SPI_MspInit+0x184>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d128      	bne.n	8000a3c <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	4a16      	ldr	r2, [pc, #88]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 80009f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f4:	6593      	str	r3, [r2, #88]	; 0x58
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_SPI_MspInit+0x174>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000a1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <HAL_SPI_MspInit+0x17c>)
 8000a38:	f000 ff5c 	bl	80018f4 <HAL_GPIO_Init>
}
 8000a3c:	bf00      	nop
 8000a3e:	3738      	adds	r7, #56	; 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40013000 	.word	0x40013000
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40003800 	.word	0x40003800
 8000a50:	48000800 	.word	0x48000800
 8000a54:	48000400 	.word	0x48000400
 8000a58:	40003c00 	.word	0x40003c00

08000a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	2036      	movs	r0, #54	; 0x36
 8000a72:	f000 ff15 	bl	80018a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a76:	2036      	movs	r0, #54	; 0x36
 8000a78:	f000 ff2e 	bl	80018d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <HAL_InitTick+0x9c>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <HAL_InitTick+0x9c>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6593      	str	r3, [r2, #88]	; 0x58
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_InitTick+0x9c>)
 8000a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a94:	f107 0210 	add.w	r2, r7, #16
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fef0 	bl	8002884 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa4:	f001 fed8 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 8000aa8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aac:	4a13      	ldr	r2, [pc, #76]	; (8000afc <HAL_InitTick+0xa0>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	0c9b      	lsrs	r3, r3, #18
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_InitTick+0xa4>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <HAL_InitTick+0xa8>)
 8000abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_InitTick+0xa4>)
 8000ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_InitTick+0xa4>)
 8000ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_InitTick+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_InitTick+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <HAL_InitTick+0xa4>)
 8000ada:	f002 fc78 	bl	80033ce <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d104      	bne.n	8000aee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ae4:	4806      	ldr	r0, [pc, #24]	; (8000b00 <HAL_InitTick+0xa4>)
 8000ae6:	f002 fcd3 	bl	8003490 <HAL_TIM_Base_Start_IT>
 8000aea:	4603      	mov	r3, r0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3730      	adds	r7, #48	; 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000
 8000afc:	431bde83 	.word	0x431bde83
 8000b00:	20000508 	.word	0x20000508
 8000b04:	40001000 	.word	0x40001000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
  
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <CAN1_RX0_IRQHandler+0x10>)
 8000b3a:	f000 fbca 	bl	80012d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000384 	.word	0x20000384

08000b48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <TIM6_DAC_IRQHandler+0x10>)
 8000b4e:	f002 fcfb 	bl	8003548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000508 	.word	0x20000508

08000b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b84:	f7ff ffea 	bl	8000b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bae:	f004 f915 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb2:	f7ff fb73 	bl	800029c <main>

08000bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bc4:	080050b4 	.word	0x080050b4
  ldr r2, =_sbss
 8000bc8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bcc:	2000126c 	.word	0x2000126c

08000bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_IRQHandler>

08000bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 fe54 	bl	800188a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be2:	200f      	movs	r0, #15
 8000be4:	f7ff ff3a 	bl	8000a5c <HAL_InitTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	e001      	b.n	8000bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf4:	f7ff fdca 	bl	800078c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x20>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x24>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_IncTick+0x24>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000554 	.word	0x20000554

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <HAL_GetTick+0x14>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000554 	.word	0x20000554

08000c44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e0ed      	b.n	8000e32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fdba 	bl	80007dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f042 0201 	orr.w	r2, r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c78:	f7ff ffd8 	bl	8000c2c <HAL_GetTick>
 8000c7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c7e:	e012      	b.n	8000ca6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c80:	f7ff ffd4 	bl	8000c2c <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b0a      	cmp	r3, #10
 8000c8c:	d90b      	bls.n	8000ca6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e0c5      	b.n	8000e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0e5      	beq.n	8000c80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 0202 	bic.w	r2, r2, #2
 8000cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cc4:	f7ff ffb2 	bl	8000c2c <HAL_GetTick>
 8000cc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cca:	e012      	b.n	8000cf2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ccc:	f7ff ffae 	bl	8000c2c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b0a      	cmp	r3, #10
 8000cd8:	d90b      	bls.n	8000cf2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2205      	movs	r2, #5
 8000cea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e09f      	b.n	8000e32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1e5      	bne.n	8000ccc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7e1b      	ldrb	r3, [r3, #24]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d108      	bne.n	8000d1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e007      	b.n	8000d2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7e5b      	ldrb	r3, [r3, #25]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d108      	bne.n	8000d44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	e007      	b.n	8000d54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7e9b      	ldrb	r3, [r3, #26]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d108      	bne.n	8000d6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0220 	orr.w	r2, r2, #32
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e007      	b.n	8000d7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 0220 	bic.w	r2, r2, #32
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7edb      	ldrb	r3, [r3, #27]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d108      	bne.n	8000d98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0210 	bic.w	r2, r2, #16
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0210 	orr.w	r2, r2, #16
 8000da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7f1b      	ldrb	r3, [r3, #28]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d108      	bne.n	8000dc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0208 	orr.w	r2, r2, #8
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e007      	b.n	8000dd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0208 	bic.w	r2, r2, #8
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7f5b      	ldrb	r3, [r3, #29]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d108      	bne.n	8000dec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f042 0204 	orr.w	r2, r2, #4
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0204 	bic.w	r2, r2, #4
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	ea42 0103 	orr.w	r1, r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	1e5a      	subs	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d12e      	bne.n	8000eac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2202      	movs	r2, #2
 8000e52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0201 	bic.w	r2, r2, #1
 8000e64:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e66:	f7ff fee1 	bl	8000c2c <HAL_GetTick>
 8000e6a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e6c:	e012      	b.n	8000e94 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e6e:	f7ff fedd 	bl	8000c2c <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b0a      	cmp	r3, #10
 8000e7a:	d90b      	bls.n	8000e94 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2205      	movs	r2, #5
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e012      	b.n	8000eba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1e5      	bne.n	8000e6e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e006      	b.n	8000eba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
  }
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b089      	sub	sp, #36	; 0x24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ee0:	7ffb      	ldrb	r3, [r7, #31]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d003      	beq.n	8000eee <HAL_CAN_AddTxMessage+0x2c>
 8000ee6:	7ffb      	ldrb	r3, [r7, #31]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	f040 80ad 	bne.w	8001048 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10a      	bne.n	8000f0e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d105      	bne.n	8000f0e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 8095 	beq.w	8001038 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	0e1b      	lsrs	r3, r3, #24
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10d      	bne.n	8000f46 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	6809      	ldr	r1, [r1, #0]
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3318      	adds	r3, #24
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	440b      	add	r3, r1
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e00f      	b.n	8000f66 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f50:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f56:	68f9      	ldr	r1, [r7, #12]
 8000f58:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f5a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3318      	adds	r3, #24
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	440b      	add	r3, r1
 8000f64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6819      	ldr	r1, [r3, #0]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	691a      	ldr	r2, [r3, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3318      	adds	r3, #24
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	440b      	add	r3, r1
 8000f76:	3304      	adds	r3, #4
 8000f78:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	7d1b      	ldrb	r3, [r3, #20]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d111      	bne.n	8000fa6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3318      	adds	r3, #24
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3304      	adds	r3, #4
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	6811      	ldr	r1, [r2, #0]
 8000f96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3318      	adds	r3, #24
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3307      	adds	r3, #7
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	061a      	lsls	r2, r3, #24
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3306      	adds	r3, #6
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	041b      	lsls	r3, r3, #16
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3305      	adds	r3, #5
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	3204      	adds	r2, #4
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	4610      	mov	r0, r2
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	6811      	ldr	r1, [r2, #0]
 8000fce:	ea43 0200 	orr.w	r2, r3, r0
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fdc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3303      	adds	r3, #3
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	061a      	lsls	r2, r3, #24
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3302      	adds	r3, #2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	041b      	lsls	r3, r3, #16
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	4610      	mov	r0, r2
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	6811      	ldr	r1, [r2, #0]
 8001004:	ea43 0200 	orr.w	r2, r3, r0
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	440b      	add	r3, r1
 800100e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001012:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3318      	adds	r3, #24
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	4413      	add	r3, r2
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	6811      	ldr	r1, [r2, #0]
 8001026:	f043 0201 	orr.w	r2, r3, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3318      	adds	r3, #24
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	440b      	add	r3, r1
 8001032:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	e00e      	b.n	8001056 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e006      	b.n	8001056 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
  }
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001062:	b480      	push	{r7}
 8001064:	b087      	sub	sp, #28
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001076:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d003      	beq.n	8001086 <HAL_CAN_GetRxMessage+0x24>
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	2b02      	cmp	r3, #2
 8001082:	f040 80f3 	bne.w	800126c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10e      	bne.n	80010aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d116      	bne.n	80010c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e0e7      	b.n	800127a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e0d8      	b.n	800127a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	331b      	adds	r3, #27
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	4413      	add	r3, r2
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0204 	and.w	r2, r3, #4
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d10c      	bne.n	8001100 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	331b      	adds	r3, #27
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	4413      	add	r3, r2
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	0d5b      	lsrs	r3, r3, #21
 80010f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	331b      	adds	r3, #27
 8001108:	011b      	lsls	r3, r3, #4
 800110a:	4413      	add	r3, r2
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	331b      	adds	r3, #27
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	4413      	add	r3, r2
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0202 	and.w	r2, r3, #2
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	331b      	adds	r3, #27
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	3304      	adds	r3, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 020f 	and.w	r2, r3, #15
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	331b      	adds	r3, #27
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b2da      	uxtb	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	331b      	adds	r3, #27
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0c1b      	lsrs	r3, r3, #16
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	4413      	add	r3, r2
 8001196:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	0a1a      	lsrs	r2, r3, #8
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	0c1a      	lsrs	r2, r3, #16
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3302      	adds	r3, #2
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0e1a      	lsrs	r2, r3, #24
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	3303      	adds	r3, #3
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4413      	add	r3, r2
 80011e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3304      	adds	r3, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	0a1a      	lsrs	r2, r3, #8
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	3305      	adds	r3, #5
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	4413      	add	r3, r2
 8001216:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	0c1a      	lsrs	r2, r3, #16
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3306      	adds	r3, #6
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4413      	add	r3, r2
 8001230:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	0e1a      	lsrs	r2, r3, #24
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3307      	adds	r3, #7
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d108      	bne.n	8001258 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	e007      	b.n	8001268 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0220 	orr.w	r2, r2, #32
 8001266:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	e006      	b.n	800127a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
  }
}
 800127a:	4618      	mov	r0, r3
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001296:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d002      	beq.n	80012a4 <HAL_CAN_ActivateNotification+0x1e>
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d109      	bne.n	80012b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6959      	ldr	r1, [r3, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e006      	b.n	80012c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
  }
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b08a      	sub	sp, #40	; 0x28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d07c      	beq.n	8001412 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d023      	beq.n	800136a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2201      	movs	r2, #1
 8001328:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f983 	bl	8001640 <HAL_CAN_TxMailbox0CompleteCallback>
 800133a:	e016      	b.n	800136a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	d004      	beq.n	8001350 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
 800134e:	e00c      	b.n	800136a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
 8001362:	e002      	b.n	800136a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f989 	bl	800167c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d024      	beq.n	80013be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f963 	bl	8001654 <HAL_CAN_TxMailbox1CompleteCallback>
 800138e:	e016      	b.n	80013be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	e00c      	b.n	80013be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	e002      	b.n	80013be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f969 	bl	8001690 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d024      	beq.n	8001412 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f943 	bl	8001668 <HAL_CAN_TxMailbox2CompleteCallback>
 80013e2:	e016      	b.n	8001412 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	e00c      	b.n	8001412 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	e002      	b.n	8001412 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f949 	bl	80016a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00c      	beq.n	8001436 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2210      	movs	r2, #16
 8001434:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00b      	beq.n	8001458 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2208      	movs	r2, #8
 8001450:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f930 	bl	80016b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff f95f 	bl	8000734 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00c      	beq.n	800149a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001490:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2210      	movs	r2, #16
 8001498:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2208      	movs	r2, #8
 80014b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f912 	bl	80016e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d009      	beq.n	80014da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f8f9 	bl	80016cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2210      	movs	r2, #16
 80014f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f8fc 	bl	80016f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2208      	movs	r2, #8
 8001516:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f8f5 	bl	8001708 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d07b      	beq.n	8001620 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	d072      	beq.n	8001618 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d008      	beq.n	8001586 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158c:	2b00      	cmp	r3, #0
 800158e:	d043      	beq.n	8001618 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001596:	2b00      	cmp	r3, #0
 8001598:	d03e      	beq.n	8001618 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015a0:	2b60      	cmp	r3, #96	; 0x60
 80015a2:	d02b      	beq.n	80015fc <HAL_CAN_IRQHandler+0x32a>
 80015a4:	2b60      	cmp	r3, #96	; 0x60
 80015a6:	d82e      	bhi.n	8001606 <HAL_CAN_IRQHandler+0x334>
 80015a8:	2b50      	cmp	r3, #80	; 0x50
 80015aa:	d022      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x320>
 80015ac:	2b50      	cmp	r3, #80	; 0x50
 80015ae:	d82a      	bhi.n	8001606 <HAL_CAN_IRQHandler+0x334>
 80015b0:	2b40      	cmp	r3, #64	; 0x40
 80015b2:	d019      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x316>
 80015b4:	2b40      	cmp	r3, #64	; 0x40
 80015b6:	d826      	bhi.n	8001606 <HAL_CAN_IRQHandler+0x334>
 80015b8:	2b30      	cmp	r3, #48	; 0x30
 80015ba:	d010      	beq.n	80015de <HAL_CAN_IRQHandler+0x30c>
 80015bc:	2b30      	cmp	r3, #48	; 0x30
 80015be:	d822      	bhi.n	8001606 <HAL_CAN_IRQHandler+0x334>
 80015c0:	2b10      	cmp	r3, #16
 80015c2:	d002      	beq.n	80015ca <HAL_CAN_IRQHandler+0x2f8>
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	d005      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015c8:	e01d      	b.n	8001606 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015d2:	e019      	b.n	8001608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015dc:	e014      	b.n	8001608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015e6:	e00f      	b.n	8001608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015f0:	e00a      	b.n	8001608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015fa:	e005      	b.n	8001608 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001604:	e000      	b.n	8001608 <HAL_CAN_IRQHandler+0x336>
            break;
 8001606:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001616:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2204      	movs	r2, #4
 800161e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	2b00      	cmp	r3, #0
 8001624:	d008      	beq.n	8001638 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f872 	bl	800171c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ff4c 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b2:	f7ff ff61 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	6978      	ldr	r0, [r7, #20]
 80018be:	f7ff ffb1 	bl	8001824 <NVIC_EncodePriority>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff80 	bl	80017d0 <__NVIC_SetPriority>
}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff54 	bl	8001794 <__NVIC_EnableIRQ>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	e154      	b.n	8001bae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2101      	movs	r1, #1
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8146 	beq.w	8001ba8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d005      	beq.n	8001934 <HAL_GPIO_Init+0x40>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d130      	bne.n	8001996 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196a:	2201      	movs	r2, #1
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	091b      	lsrs	r3, r3, #4
 8001980:	f003 0201 	and.w	r2, r3, #1
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d017      	beq.n	80019d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d123      	bne.n	8001a26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	08da      	lsrs	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3208      	adds	r2, #8
 8001a20:	6939      	ldr	r1, [r7, #16]
 8001a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0203 	and.w	r2, r3, #3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80a0 	beq.w	8001ba8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a68:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <HAL_GPIO_Init+0x2d8>)
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6c:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_GPIO_Init+0x2d8>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6613      	str	r3, [r2, #96]	; 0x60
 8001a74:	4b55      	ldr	r3, [pc, #340]	; (8001bcc <HAL_GPIO_Init+0x2d8>)
 8001a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a80:	4a53      	ldr	r2, [pc, #332]	; (8001bd0 <HAL_GPIO_Init+0x2dc>)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aaa:	d019      	beq.n	8001ae0 <HAL_GPIO_Init+0x1ec>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a49      	ldr	r2, [pc, #292]	; (8001bd4 <HAL_GPIO_Init+0x2e0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d013      	beq.n	8001adc <HAL_GPIO_Init+0x1e8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d00d      	beq.n	8001ad8 <HAL_GPIO_Init+0x1e4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <HAL_GPIO_Init+0x2e8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d007      	beq.n	8001ad4 <HAL_GPIO_Init+0x1e0>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a46      	ldr	r2, [pc, #280]	; (8001be0 <HAL_GPIO_Init+0x2ec>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d101      	bne.n	8001ad0 <HAL_GPIO_Init+0x1dc>
 8001acc:	2304      	movs	r3, #4
 8001ace:	e008      	b.n	8001ae2 <HAL_GPIO_Init+0x1ee>
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x1ee>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e004      	b.n	8001ae2 <HAL_GPIO_Init+0x1ee>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e002      	b.n	8001ae2 <HAL_GPIO_Init+0x1ee>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_GPIO_Init+0x1ee>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	f002 0203 	and.w	r2, r2, #3
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	4093      	lsls	r3, r2
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001af2:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <HAL_GPIO_Init+0x2dc>)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	3302      	adds	r3, #2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b24:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b4e:	4a25      	ldr	r2, [pc, #148]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b78:	4a1a      	ldr	r2, [pc, #104]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f47f aea3 	bne.w	8001904 <HAL_GPIO_Init+0x10>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	48000400 	.word	0x48000400
 8001bd8:	48000800 	.word	0x48000800
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	48001000 	.word	0x48001000
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40007000 	.word	0x40007000

08001c38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40007000 	.word	0x40007000

08001c54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c62:	d130      	bne.n	8001cc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c64:	4b23      	ldr	r3, [pc, #140]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c70:	d038      	beq.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2232      	movs	r2, #50	; 0x32
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0c9b      	lsrs	r3, r3, #18
 8001c94:	3301      	adds	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c98:	e002      	b.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cac:	d102      	bne.n	8001cb4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f2      	bne.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc0:	d110      	bne.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e00f      	b.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd2:	d007      	beq.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cdc:	4a05      	ldr	r2, [pc, #20]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	431bde83 	.word	0x431bde83

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f000 bc02 	b.w	8002518 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d14:	4b96      	ldr	r3, [pc, #600]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d1e:	4b94      	ldr	r3, [pc, #592]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80e4 	beq.w	8001efe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d007      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4c>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	f040 808b 	bne.w	8001e5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	f040 8087 	bne.w	8001e5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d4c:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_OscConfig+0x64>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e3d9      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1a      	ldr	r2, [r3, #32]
 8001d68:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_RCC_OscConfig+0x7e>
 8001d74:	4b7e      	ldr	r3, [pc, #504]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7c:	e005      	b.n	8001d8a <HAL_RCC_OscConfig+0x8a>
 8001d7e:	4b7c      	ldr	r3, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d223      	bcs.n	8001dd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fda8 	bl	80028e8 <RCC_SetFlashLatencyFromMSIRange>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e3ba      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da2:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a72      	ldr	r2, [pc, #456]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b70      	ldr	r3, [pc, #448]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	496d      	ldr	r1, [pc, #436]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc0:	4b6b      	ldr	r3, [pc, #428]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	4968      	ldr	r1, [pc, #416]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
 8001dd4:	e025      	b.n	8001e22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd6:	4b66      	ldr	r3, [pc, #408]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a65      	ldr	r2, [pc, #404]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4960      	ldr	r1, [pc, #384]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df4:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	495b      	ldr	r1, [pc, #364]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fd68 	bl	80028e8 <RCC_SetFlashLatencyFromMSIRange>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e37a      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e22:	f000 fc81 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	4950      	ldr	r1, [pc, #320]	; (8001f74 <HAL_RCC_OscConfig+0x274>)
 8001e34:	5ccb      	ldrb	r3, [r1, r3]
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3e:	4a4e      	ldr	r2, [pc, #312]	; (8001f78 <HAL_RCC_OscConfig+0x278>)
 8001e40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e42:	4b4e      	ldr	r3, [pc, #312]	; (8001f7c <HAL_RCC_OscConfig+0x27c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fe08 	bl	8000a5c <HAL_InitTick>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d052      	beq.n	8001efc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	e35e      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d032      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a42      	ldr	r2, [pc, #264]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fedd 	bl	8000c2c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e76:	f7fe fed9 	bl	8000c2c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e347      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a35      	ldr	r2, [pc, #212]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	f043 0308 	orr.w	r3, r3, #8
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4930      	ldr	r1, [pc, #192]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	492b      	ldr	r1, [pc, #172]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]
 8001ec6:	e01a      	b.n	8001efe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a28      	ldr	r2, [pc, #160]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001ece:	f023 0301 	bic.w	r3, r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe feaa 	bl	8000c2c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001edc:	f7fe fea6 	bl	8000c2c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e314      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x1dc>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d073      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_OscConfig+0x21c>
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d10e      	bne.n	8001f34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d10b      	bne.n	8001f34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d063      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x2f0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d15f      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e2f1      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCC_OscConfig+0x24c>
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e025      	b.n	8001f98 <HAL_RCC_OscConfig+0x298>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f54:	d114      	bne.n	8001f80 <HAL_RCC_OscConfig+0x280>
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a02      	ldr	r2, [pc, #8]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e013      	b.n	8001f98 <HAL_RCC_OscConfig+0x298>
 8001f70:	40021000 	.word	0x40021000
 8001f74:	08005004 	.word	0x08005004
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	4ba0      	ldr	r3, [pc, #640]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a9f      	ldr	r2, [pc, #636]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b9d      	ldr	r3, [pc, #628]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a9c      	ldr	r2, [pc, #624]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fe44 	bl	8000c2c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7fe fe40 	bl	8000c2c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e2ae      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fba:	4b92      	ldr	r3, [pc, #584]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x2a8>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fe30 	bl	8000c2c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7fe fe2c 	bl	8000c2c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e29a      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fe2:	4b88      	ldr	r3, [pc, #544]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2d0>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d060      	beq.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b04      	cmp	r3, #4
 8002002:	d005      	beq.n	8002010 <HAL_RCC_OscConfig+0x310>
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d119      	bne.n	800203e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d116      	bne.n	800203e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002010:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x328>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e277      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b76      	ldr	r3, [pc, #472]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	061b      	lsls	r3, r3, #24
 8002036:	4973      	ldr	r1, [pc, #460]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800203c:	e040      	b.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d023      	beq.n	800208e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002046:	4b6f      	ldr	r3, [pc, #444]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6e      	ldr	r2, [pc, #440]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe fdeb 	bl	8000c2c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205a:	f7fe fde7 	bl	8000c2c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e255      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800206c:	4b65      	ldr	r3, [pc, #404]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b62      	ldr	r3, [pc, #392]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	495f      	ldr	r1, [pc, #380]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
 800208c:	e018      	b.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208e:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a5c      	ldr	r2, [pc, #368]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7fe fdc7 	bl	8000c2c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7fe fdc3 	bl	8000c2c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e231      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d03c      	beq.n	8002146 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01c      	beq.n	800210e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020da:	4a4a      	ldr	r2, [pc, #296]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7fe fda2 	bl	8000c2c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe fd9e 	bl	8000c2c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e20c      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0ef      	beq.n	80020ec <HAL_RCC_OscConfig+0x3ec>
 800210c:	e01b      	b.n	8002146 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002114:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211e:	f7fe fd85 	bl	8000c2c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002126:	f7fe fd81 	bl	8000c2c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e1ef      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ef      	bne.n	8002126 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80a6 	beq.w	80022a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002154:	2300      	movs	r3, #0
 8002156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10d      	bne.n	8002180 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	4a26      	ldr	r2, [pc, #152]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216e:	6593      	str	r3, [r2, #88]	; 0x58
 8002170:	4b24      	ldr	r3, [pc, #144]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217c:	2301      	movs	r3, #1
 800217e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_RCC_OscConfig+0x508>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d118      	bne.n	80021be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_RCC_OscConfig+0x508>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_RCC_OscConfig+0x508>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002196:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002198:	f7fe fd48 	bl	8000c2c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a0:	f7fe fd44 	bl	8000c2c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1b2      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_RCC_OscConfig+0x508>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d108      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4d8>
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d6:	e029      	b.n	800222c <HAL_RCC_OscConfig+0x52c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d115      	bne.n	800220c <HAL_RCC_OscConfig+0x50c>
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a03      	ldr	r2, [pc, #12]	; (8002204 <HAL_RCC_OscConfig+0x504>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x52c>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
 800220c:	4b9a      	ldr	r3, [pc, #616]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	4a99      	ldr	r2, [pc, #612]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800221c:	4b96      	ldr	r3, [pc, #600]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a95      	ldr	r2, [pc, #596]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d016      	beq.n	8002262 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe fcfa 	bl	8000c2c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fcf6 	bl	8000c2c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e162      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	4b89      	ldr	r3, [pc, #548]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ed      	beq.n	800223c <HAL_RCC_OscConfig+0x53c>
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe fce3 	bl	8000c2c <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fcdf 	bl	8000c2c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e14b      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002280:	4b7d      	ldr	r3, [pc, #500]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1ed      	bne.n	800226a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800228e:	7ffb      	ldrb	r3, [r7, #31]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002294:	4b78      	ldr	r3, [pc, #480]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	4a77      	ldr	r2, [pc, #476]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 800229a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d03c      	beq.n	8002326 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01c      	beq.n	80022ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022b4:	4b70      	ldr	r3, [pc, #448]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80022b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022ba:	4a6f      	ldr	r2, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe fcb2 	bl	8000c2c <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022cc:	f7fe fcae 	bl	8000c2c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e11c      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022de:	4b66      	ldr	r3, [pc, #408]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80022e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ef      	beq.n	80022cc <HAL_RCC_OscConfig+0x5cc>
 80022ec:	e01b      	b.n	8002326 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ee:	4b62      	ldr	r3, [pc, #392]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80022f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022f4:	4a60      	ldr	r2, [pc, #384]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7fe fc95 	bl	8000c2c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002306:	f7fe fc91 	bl	8000c2c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0ff      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002318:	4b57      	ldr	r3, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 800231a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ef      	bne.n	8002306 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80f3 	beq.w	8002516 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	2b02      	cmp	r3, #2
 8002336:	f040 80c9 	bne.w	80024cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800233a:	4b4f      	ldr	r3, [pc, #316]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0203 	and.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	429a      	cmp	r2, r3
 800234c:	d12c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	3b01      	subs	r3, #1
 800235a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d123      	bne.n	80023a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d11b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d113      	bne.n	80023a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	3b01      	subs	r3, #1
 800238e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d109      	bne.n	80023a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	3b01      	subs	r3, #1
 80023a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d06b      	beq.n	8002480 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	d062      	beq.n	8002474 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023ae:	4b32      	ldr	r3, [pc, #200]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0ac      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023be:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2d      	ldr	r2, [pc, #180]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80023c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ca:	f7fe fc2f 	bl	8000c2c <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe fc2b 	bl	8000c2c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e099      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <HAL_RCC_OscConfig+0x77c>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002400:	3a01      	subs	r2, #1
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	4311      	orrs	r1, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800240a:	0212      	lsls	r2, r2, #8
 800240c:	4311      	orrs	r1, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002412:	0852      	lsrs	r2, r2, #1
 8002414:	3a01      	subs	r2, #1
 8002416:	0552      	lsls	r2, r2, #21
 8002418:	4311      	orrs	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800241e:	0852      	lsrs	r2, r2, #1
 8002420:	3a01      	subs	r2, #1
 8002422:	0652      	lsls	r2, r2, #25
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800242a:	06d2      	lsls	r2, r2, #27
 800242c:	430a      	orrs	r2, r1
 800242e:	4912      	ldr	r1, [pc, #72]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002430:	4313      	orrs	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002440:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800244c:	f7fe fbee 	bl	8000c2c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fbea 	bl	8000c2c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e058      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <HAL_RCC_OscConfig+0x778>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002472:	e050      	b.n	8002516 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e04f      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
 8002478:	40021000 	.word	0x40021000
 800247c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d144      	bne.n	8002516 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a23      	ldr	r2, [pc, #140]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002496:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 800249e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024a4:	f7fe fbc2 	bl	8000c2c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7fe fbbe 	bl	8000c2c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e02c      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024be:	4b18      	ldr	r3, [pc, #96]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x7ac>
 80024ca:	e024      	b.n	8002516 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d01f      	beq.n	8002512 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 80024d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fba5 	bl	8000c2c <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fba1 	bl	8000c2c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e00f      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	4905      	ldr	r1, [pc, #20]	; (8002520 <HAL_RCC_OscConfig+0x820>)
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_OscConfig+0x824>)
 800250c:	4013      	ands	r3, r2
 800250e:	60cb      	str	r3, [r1, #12]
 8002510:	e001      	b.n	8002516 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	feeefffc 	.word	0xfeeefffc

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0e7      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d910      	bls.n	800256c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 0207 	bic.w	r2, r3, #7
 8002552:	4970      	ldr	r1, [pc, #448]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b6e      	ldr	r3, [pc, #440]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0cf      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	4b66      	ldr	r3, [pc, #408]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002584:	429a      	cmp	r2, r3
 8002586:	d908      	bls.n	800259a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b63      	ldr	r3, [pc, #396]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4960      	ldr	r1, [pc, #384]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d04c      	beq.n	8002640 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	4b5a      	ldr	r3, [pc, #360]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d121      	bne.n	80025fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0a6      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c6:	4b54      	ldr	r3, [pc, #336]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d115      	bne.n	80025fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e09a      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025de:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e08e      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ee:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e086      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4943      	ldr	r1, [pc, #268]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002610:	f7fe fb0c 	bl	8000c2c <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7fe fb08 	bl	8000c2c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e06e      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002658:	429a      	cmp	r2, r3
 800265a:	d208      	bcs.n	800266e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800265c:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	492b      	ldr	r1, [pc, #172]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d210      	bcs.n	800269e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 0207 	bic.w	r2, r3, #7
 8002684:	4923      	ldr	r1, [pc, #140]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_RCC_ClockConfig+0x1ec>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e036      	b.n	800270c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4918      	ldr	r1, [pc, #96]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4910      	ldr	r1, [pc, #64]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026dc:	f000 f824 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_RCC_ClockConfig+0x1f0>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	490b      	ldr	r1, [pc, #44]	; (800271c <HAL_RCC_ClockConfig+0x1f4>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1f8>)
 80026fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1fc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe f9ab 	bl	8000a5c <HAL_InitTick>
 8002706:	4603      	mov	r3, r0
 8002708:	72fb      	strb	r3, [r7, #11]

  return status;
 800270a:	7afb      	ldrb	r3, [r7, #11]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40022000 	.word	0x40022000
 8002718:	40021000 	.word	0x40021000
 800271c:	08005004 	.word	0x08005004
 8002720:	20000000 	.word	0x20000000
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002736:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x34>
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d121      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d11e      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800275c:	4b34      	ldr	r3, [pc, #208]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d107      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 800276a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	e005      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002778:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002784:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_RCC_GetSysClockFreq+0x110>)
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	e004      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_RCC_GetSysClockFreq+0x114>)
 80027ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d134      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0xa6>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d003      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0xac>
 80027cc:	e005      	b.n	80027da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_RCC_GetSysClockFreq+0x110>)
 80027d0:	617b      	str	r3, [r7, #20]
      break;
 80027d2:	e005      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_GetSysClockFreq+0x114>)
 80027d6:	617b      	str	r3, [r7, #20]
      break;
 80027d8:	e002      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	617b      	str	r3, [r7, #20]
      break;
 80027de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	3301      	adds	r3, #1
 80027ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	fb03 f202 	mul.w	r2, r3, r2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	0e5b      	lsrs	r3, r3, #25
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	3301      	adds	r3, #1
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002820:	69bb      	ldr	r3, [r7, #24]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3724      	adds	r7, #36	; 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	0800501c 	.word	0x0800501c
 8002838:	00f42400 	.word	0x00f42400
 800283c:	007a1200 	.word	0x007a1200

08002840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCC_GetHCLKFreq+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000

08002858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800285c:	f7ff fff0 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	08005014 	.word	0x08005014

08002884 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	220f      	movs	r2, #15
 8002892:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_GetClockConfig+0x5c>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <HAL_RCC_GetClockConfig+0x60>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0207 	and.w	r2, r3, #7
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40022000 	.word	0x40022000

080028e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002900:	f7ff f99a 	bl	8001c38 <HAL_PWREx_GetVoltageRange>
 8002904:	6178      	str	r0, [r7, #20]
 8002906:	e014      	b.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290c:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	6593      	str	r3, [r2, #88]	; 0x58
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002920:	f7ff f98a 	bl	8001c38 <HAL_PWREx_GetVoltageRange>
 8002924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002930:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002938:	d10b      	bne.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d919      	bls.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2ba0      	cmp	r3, #160	; 0xa0
 8002944:	d902      	bls.n	800294c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002946:	2302      	movs	r3, #2
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e013      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	e010      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d902      	bls.n	800295e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002958:	2303      	movs	r3, #3
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	e00a      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d102      	bne.n	800296a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002964:	2302      	movs	r3, #2
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	e004      	b.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b70      	cmp	r3, #112	; 0x70
 800296e:	d101      	bne.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 0207 	bic.w	r2, r3, #7
 800297c:	4909      	ldr	r1, [pc, #36]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002984:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40022000 	.word	0x40022000

080029a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d031      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029cc:	d01a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80029ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029d2:	d814      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029dc:	d10f      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80029de:	4b5d      	ldr	r3, [pc, #372]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029ea:	e00c      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fa44 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029fc:	e003      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	74fb      	strb	r3, [r7, #19]
      break;
 8002a02:	e000      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a0c:	4b51      	ldr	r3, [pc, #324]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	494e      	ldr	r1, [pc, #312]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a22:	e001      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 809e 	beq.w	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a3a:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4a3f      	ldr	r2, [pc, #252]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a6c:	4b3a      	ldr	r3, [pc, #232]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a39      	ldr	r2, [pc, #228]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a78:	f7fe f8d8 	bl	8000c2c <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a7e:	e009      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a80:	f7fe f8d4 	bl	8000c2c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d902      	bls.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	74fb      	strb	r3, [r7, #19]
        break;
 8002a92:	e005      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a94:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d15a      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01e      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d019      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002acc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aee:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe f894 	bl	8000c2c <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	e00b      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe f890 	bl	8000c2c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d902      	bls.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b1e:	e006      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ec      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10b      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b34:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b42:	4904      	ldr	r1, [pc, #16]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b4a:	e009      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	74bb      	strb	r3, [r7, #18]
 8002b50:	e006      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b60:	7c7b      	ldrb	r3, [r7, #17]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b9e      	ldr	r3, [pc, #632]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	4a9d      	ldr	r2, [pc, #628]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b7e:	4b98      	ldr	r3, [pc, #608]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f023 0203 	bic.w	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4994      	ldr	r1, [pc, #592]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba0:	4b8f      	ldr	r3, [pc, #572]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f023 020c 	bic.w	r2, r3, #12
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	498c      	ldr	r1, [pc, #560]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bc2:	4b87      	ldr	r3, [pc, #540]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	4983      	ldr	r1, [pc, #524]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002be4:	4b7e      	ldr	r3, [pc, #504]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	497b      	ldr	r1, [pc, #492]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c06:	4b76      	ldr	r3, [pc, #472]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c14:	4972      	ldr	r1, [pc, #456]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c28:	4b6d      	ldr	r3, [pc, #436]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	496a      	ldr	r1, [pc, #424]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c4a:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c58:	4961      	ldr	r1, [pc, #388]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c6c:	4b5c      	ldr	r3, [pc, #368]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	4959      	ldr	r1, [pc, #356]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c8e:	4b54      	ldr	r3, [pc, #336]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	4950      	ldr	r1, [pc, #320]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	4948      	ldr	r1, [pc, #288]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cd2:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cd8:	f023 0203 	bic.w	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	493f      	ldr	r1, [pc, #252]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d028      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cf4:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	4937      	ldr	r1, [pc, #220]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d12:	d106      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d14:	4b32      	ldr	r3, [pc, #200]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1e:	60d3      	str	r3, [r2, #12]
 8002d20:	e011      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f8a4 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d028      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	491f      	ldr	r1, [pc, #124]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d70:	d106      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7c:	60d3      	str	r3, [r2, #12]
 8002d7e:	e011      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f875 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002da0:	7cfb      	ldrb	r3, [r7, #19]
 8002da2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d02b      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	4908      	ldr	r1, [pc, #32]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dce:	d109      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a02      	ldr	r2, [pc, #8]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dda:	60d3      	str	r3, [r2, #12]
 8002ddc:	e014      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2101      	movs	r1, #1
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f843 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01c      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	4916      	ldr	r1, [pc, #88]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	2102      	movs	r1, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f820 	bl	8002e80 <RCCEx_PLLSAI1_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e68:	4904      	ldr	r1, [pc, #16]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e70:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000

08002e80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e8e:	4b74      	ldr	r3, [pc, #464]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d018      	beq.n	8002ecc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e9a:	4b71      	ldr	r3, [pc, #452]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0203 	and.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d10d      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
       ||
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eb2:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d047      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	e044      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d018      	beq.n	8002f06 <RCCEx_PLLSAI1_Config+0x86>
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d825      	bhi.n	8002f24 <RCCEx_PLLSAI1_Config+0xa4>
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d002      	beq.n	8002ee2 <RCCEx_PLLSAI1_Config+0x62>
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d009      	beq.n	8002ef4 <RCCEx_PLLSAI1_Config+0x74>
 8002ee0:	e020      	b.n	8002f24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ee2:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11d      	bne.n	8002f2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef2:	e01a      	b.n	8002f2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ef4:	4b5a      	ldr	r3, [pc, #360]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f04:	e013      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f06:	4b56      	ldr	r3, [pc, #344]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d109      	bne.n	8002f32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f22:	e006      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      break;
 8002f28:	e004      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e002      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10d      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f3a:	4b49      	ldr	r3, [pc, #292]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	4943      	ldr	r1, [pc, #268]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d17c      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a3f      	ldr	r2, [pc, #252]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f68:	f7fd fe60 	bl	8000c2c <HAL_GetTick>
 8002f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f6e:	e009      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f70:	f7fd fe5c 	bl	8000c2c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d902      	bls.n	8002f84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	73fb      	strb	r3, [r7, #15]
        break;
 8002f82:	e005      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ef      	bne.n	8002f70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d15f      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d110      	bne.n	8002fbe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f9c:	4b30      	ldr	r3, [pc, #192]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fa4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6892      	ldr	r2, [r2, #8]
 8002fac:	0211      	lsls	r1, r2, #8
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68d2      	ldr	r2, [r2, #12]
 8002fb2:	06d2      	lsls	r2, r2, #27
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	492a      	ldr	r1, [pc, #168]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	610b      	str	r3, [r1, #16]
 8002fbc:	e027      	b.n	800300e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d112      	bne.n	8002fea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6912      	ldr	r2, [r2, #16]
 8002fda:	0852      	lsrs	r2, r2, #1
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0552      	lsls	r2, r2, #21
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	491f      	ldr	r1, [pc, #124]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	610b      	str	r3, [r1, #16]
 8002fe8:	e011      	b.n	800300e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ff2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6892      	ldr	r2, [r2, #8]
 8002ffa:	0211      	lsls	r1, r2, #8
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6952      	ldr	r2, [r2, #20]
 8003000:	0852      	lsrs	r2, r2, #1
 8003002:	3a01      	subs	r2, #1
 8003004:	0652      	lsls	r2, r2, #25
 8003006:	430a      	orrs	r2, r1
 8003008:	4915      	ldr	r1, [pc, #84]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 800300a:	4313      	orrs	r3, r2
 800300c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a13      	ldr	r2, [pc, #76]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003014:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003018:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fd fe07 	bl	8000c2c <HAL_GetTick>
 800301e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003020:	e009      	b.n	8003036 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003022:	f7fd fe03 	bl	8000c2c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d902      	bls.n	8003036 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	73fb      	strb	r3, [r7, #15]
          break;
 8003034:	e005      	b.n	8003042 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ef      	beq.n	8003022 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d106      	bne.n	8003056 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4903      	ldr	r1, [pc, #12]	; (8003060 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003052:	4313      	orrs	r3, r2
 8003054:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d06c      	beq.n	8003150 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fd fbf2 	bl	8000874 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	22ca      	movs	r2, #202	; 0xca
 800309e:	625a      	str	r2, [r3, #36]	; 0x24
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2253      	movs	r2, #83	; 0x53
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f87c 	bl	80031a6 <RTC_EnterInitMode>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d14b      	bne.n	8003150 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ca:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6899      	ldr	r1, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68d2      	ldr	r2, [r2, #12]
 80030f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6919      	ldr	r1, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	041a      	lsls	r2, r3, #16
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f87f 	bl	800320c <RTC_ExitInitMode>
 800310e:	4603      	mov	r3, r0
 8003110:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11b      	bne.n	8003150 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0203 	bic.w	r2, r2, #3
 8003126:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	22ff      	movs	r2, #255	; 0xff
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003150:	7bfb      	ldrb	r3, [r7, #15]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003170:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003172:	f7fd fd5b 	bl	8000c2c <HAL_GetTick>
 8003176:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003178:	e009      	b.n	800318e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800317a:	f7fd fd57 	bl	8000c2c <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003188:	d901      	bls.n	800318e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e007      	b.n	800319e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ee      	beq.n	800317a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d120      	bne.n	8003202 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295
 80031c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80031ca:	f7fd fd2f 	bl	8000c2c <HAL_GetTick>
 80031ce:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80031d0:	e00d      	b.n	80031ee <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80031d2:	f7fd fd2b 	bl	8000c2c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031e0:	d905      	bls.n	80031ee <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2203      	movs	r2, #3
 80031ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <RTC_EnterInitMode+0x5c>
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d1e7      	bne.n	80031d2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <RTC_ExitInitMode+0x78>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a19      	ldr	r2, [pc, #100]	; (8003284 <RTC_ExitInitMode+0x78>)
 800321e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003222:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003224:	4b17      	ldr	r3, [pc, #92]	; (8003284 <RTC_ExitInitMode+0x78>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10c      	bne.n	800324a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff92 	bl	800315a <HAL_RTC_WaitForSynchro>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01e      	beq.n	800327a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2203      	movs	r2, #3
 8003240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e017      	b.n	800327a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <RTC_ExitInitMode+0x78>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <RTC_ExitInitMode+0x78>)
 8003250:	f023 0320 	bic.w	r3, r3, #32
 8003254:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ff7f 	bl	800315a <HAL_RTC_WaitForSynchro>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2203      	movs	r2, #3
 8003266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <RTC_ExitInitMode+0x78>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4a04      	ldr	r2, [pc, #16]	; (8003284 <RTC_ExitInitMode+0x78>)
 8003274:	f043 0320 	orr.w	r3, r3, #32
 8003278:	6093      	str	r3, [r2, #8]
  }

  return status;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40002800 	.word	0x40002800

08003288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e095      	b.n	80033c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d108      	bne.n	80032b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032aa:	d009      	beq.n	80032c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
 80032b2:	e005      	b.n	80032c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fafa 	bl	80008d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003300:	d902      	bls.n	8003308 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e002      	b.n	800330e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800330c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003316:	d007      	beq.n	8003328 <HAL_SPI_Init+0xa0>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	ea42 0103 	orr.w	r1, r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	f003 0204 	and.w	r2, r3, #4
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033a4:	ea42 0103 	orr.w	r1, r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e049      	b.n	8003474 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f841 	bl	800347c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f000 f9e3 	bl	80037d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d001      	beq.n	80034a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e040      	b.n	800352a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <HAL_TIM_Base_Start_IT+0xa8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00e      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x58>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d009      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x58>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_TIM_Base_Start_IT+0xac>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x58>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_TIM_Base_Start_IT+0xb0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d115      	bne.n	8003514 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_TIM_Base_Start_IT+0xb4>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d015      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x96>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d011      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	e008      	b.n	8003526 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e000      	b.n	8003528 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003526:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40014000 	.word	0x40014000
 8003544:	00010007 	.word	0x00010007

08003548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d122      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	d11b      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0202 	mvn.w	r2, #2
 8003574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f905 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8f7 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f908 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0204 	mvn.w	r2, #4
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8db 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8cd 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8de 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b08      	cmp	r3, #8
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0208 	mvn.w	r2, #8
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8b1 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8a3 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8b4 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b10      	cmp	r3, #16
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0210 	mvn.w	r2, #16
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2208      	movs	r2, #8
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f887 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f879 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f88a 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d107      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0201 	mvn.w	r2, #1
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd f848 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d10e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d107      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8e8 	bl	80038c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003706:	d10e      	bne.n	8003726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d107      	bne.n	8003726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800371e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8db 	bl	80038dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d10e      	bne.n	8003752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d107      	bne.n	8003752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800374a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f838 	bl	80037c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b20      	cmp	r3, #32
 800375e:	d10e      	bne.n	800377e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b20      	cmp	r3, #32
 800376c:	d107      	bne.n	800377e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f06f 0220 	mvn.w	r2, #32
 8003776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f89b 	bl	80038b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a2e      	ldr	r2, [pc, #184]	; (80038a4 <TIM_Base_SetConfig+0xcc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_Base_SetConfig+0x28>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0x28>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a2b      	ldr	r2, [pc, #172]	; (80038a8 <TIM_Base_SetConfig+0xd0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d108      	bne.n	8003812 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <TIM_Base_SetConfig+0xcc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00f      	beq.n	800383a <TIM_Base_SetConfig+0x62>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d00b      	beq.n	800383a <TIM_Base_SetConfig+0x62>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a20      	ldr	r2, [pc, #128]	; (80038a8 <TIM_Base_SetConfig+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d007      	beq.n	800383a <TIM_Base_SetConfig+0x62>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a1f      	ldr	r2, [pc, #124]	; (80038ac <TIM_Base_SetConfig+0xd4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d003      	beq.n	800383a <TIM_Base_SetConfig+0x62>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a1e      	ldr	r2, [pc, #120]	; (80038b0 <TIM_Base_SetConfig+0xd8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d108      	bne.n	800384c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <TIM_Base_SetConfig+0xcc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_Base_SetConfig+0xb0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a0c      	ldr	r2, [pc, #48]	; (80038ac <TIM_Base_SetConfig+0xd4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_Base_SetConfig+0xb0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a0b      	ldr	r2, [pc, #44]	; (80038b0 <TIM_Base_SetConfig+0xd8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d103      	bne.n	8003890 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	615a      	str	r2, [r3, #20]
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40014000 	.word	0x40014000
 80038b0:	40014400 	.word	0x40014400

080038b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003902:	2b84      	cmp	r3, #132	; 0x84
 8003904:	d005      	beq.n	8003912 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003906:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	3303      	adds	r3, #3
 8003910:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003924:	f000 faf6 	bl	8003f14 <vTaskStartScheduler>
  
  return osOK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	bd80      	pop	{r7, pc}

0800392e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800392e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003930:	b089      	sub	sp, #36	; 0x24
 8003932:	af04      	add	r7, sp, #16
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d020      	beq.n	8003982 <osThreadCreate+0x54>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01c      	beq.n	8003982 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685c      	ldr	r4, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681d      	ldr	r5, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691e      	ldr	r6, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ffc8 	bl	80038f0 <makeFreeRtosPriority>
 8003960:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800396a:	9202      	str	r2, [sp, #8]
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	9100      	str	r1, [sp, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4632      	mov	r2, r6
 8003974:	4629      	mov	r1, r5
 8003976:	4620      	mov	r0, r4
 8003978:	f000 f8ed 	bl	8003b56 <xTaskCreateStatic>
 800397c:	4603      	mov	r3, r0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e01c      	b.n	80039bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685c      	ldr	r4, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800398e:	b29e      	uxth	r6, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ffaa 	bl	80038f0 <makeFreeRtosPriority>
 800399c:	4602      	mov	r2, r0
 800399e:	f107 030c 	add.w	r3, r7, #12
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	9200      	str	r2, [sp, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	4632      	mov	r2, r6
 80039aa:	4629      	mov	r1, r5
 80039ac:	4620      	mov	r0, r4
 80039ae:	f000 f92f 	bl	8003c10 <xTaskCreate>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d001      	beq.n	80039bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80039bc:	68fb      	ldr	r3, [r7, #12]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <osDelay+0x16>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	e000      	b.n	80039de <osDelay+0x18>
 80039dc:	2301      	movs	r3, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fa64 	bl	8003eac <vTaskDelay>
  
  return osOK;
 80039e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f103 0208 	add.w	r2, r3, #8
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f04f 32ff 	mov.w	r2, #4294967295
 8003a06:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f103 0208 	add.w	r2, r3, #8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f103 0208 	add.w	r2, r3, #8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	601a      	str	r2, [r3, #0]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d103      	bne.n	8003ab0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	e00c      	b.n	8003aca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	e002      	b.n	8003abe <vListInsert+0x2e>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d2f6      	bcs.n	8003ab8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	601a      	str	r2, [r3, #0]
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6892      	ldr	r2, [r2, #8]
 8003b18:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6852      	ldr	r2, [r2, #4]
 8003b22:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d103      	bne.n	8003b36 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	1e5a      	subs	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b08e      	sub	sp, #56	; 0x38
 8003b5a:	af04      	add	r7, sp, #16
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10a      	bne.n	8003b80 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b7c:	bf00      	nop
 8003b7e:	e7fe      	b.n	8003b7e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <xTaskCreateStatic+0x46>
	__asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	61fb      	str	r3, [r7, #28]
}
 8003b98:	bf00      	nop
 8003b9a:	e7fe      	b.n	8003b9a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b9c:	23b4      	movs	r3, #180	; 0xb4
 8003b9e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2bb4      	cmp	r3, #180	; 0xb4
 8003ba4:	d00a      	beq.n	8003bbc <xTaskCreateStatic+0x66>
	__asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	61bb      	str	r3, [r7, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	e7fe      	b.n	8003bba <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01e      	beq.n	8003c02 <xTaskCreateStatic+0xac>
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01b      	beq.n	8003c02 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9303      	str	r3, [sp, #12]
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	9302      	str	r3, [sp, #8]
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f851 	bl	8003c9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bfc:	f000 f8ec 	bl	8003dd8 <prvAddNewTaskToReadyList>
 8003c00:	e001      	b.n	8003c06 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c06:	697b      	ldr	r3, [r7, #20]
	}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3728      	adds	r7, #40	; 0x28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08c      	sub	sp, #48	; 0x30
 8003c14:	af04      	add	r7, sp, #16
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 feef 	bl	8004a08 <pvPortMalloc>
 8003c2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00e      	beq.n	8003c50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c32:	20b4      	movs	r0, #180	; 0xb4
 8003c34:	f000 fee8 	bl	8004a08 <pvPortMalloc>
 8003c38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
 8003c46:	e005      	b.n	8003c54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c48:	6978      	ldr	r0, [r7, #20]
 8003c4a:	f000 ffa9 	bl	8004ba0 <vPortFree>
 8003c4e:	e001      	b.n	8003c54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d017      	beq.n	8003c8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c62:	88fa      	ldrh	r2, [r7, #6]
 8003c64:	2300      	movs	r3, #0
 8003c66:	9303      	str	r3, [sp, #12]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	9302      	str	r3, [sp, #8]
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f80f 	bl	8003c9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c7e:	69f8      	ldr	r0, [r7, #28]
 8003c80:	f000 f8aa 	bl	8003dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c84:	2301      	movs	r3, #1
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	e002      	b.n	8003c90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c90:	69bb      	ldr	r3, [r7, #24]
	}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3720      	adds	r7, #32
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f023 0307 	bic.w	r3, r3, #7
 8003cc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	617b      	str	r3, [r7, #20]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d01f      	beq.n	8003d2a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e012      	b.n	8003d16 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	7819      	ldrb	r1, [r3, #0]
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3334      	adds	r3, #52	; 0x34
 8003d00:	460a      	mov	r2, r1
 8003d02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	3301      	adds	r3, #1
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b0f      	cmp	r3, #15
 8003d1a:	d9e9      	bls.n	8003cf0 <prvInitialiseNewTask+0x54>
 8003d1c:	e000      	b.n	8003d20 <prvInitialiseNewTask+0x84>
			{
				break;
 8003d1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d28:	e003      	b.n	8003d32 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d901      	bls.n	8003d3c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d38:	2306      	movs	r3, #6
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	3304      	adds	r3, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fe6b 	bl	8003a2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fe66 	bl	8003a2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	f1c3 0207 	rsb	r2, r3, #7
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	334c      	adds	r3, #76	; 0x4c
 8003d8c:	2260      	movs	r2, #96	; 0x60
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 f849 	bl	8004e28 <memset>
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <prvInitialiseNewTask+0x130>)
 8003d9a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <prvInitialiseNewTask+0x134>)
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	4a0b      	ldr	r2, [pc, #44]	; (8003dd4 <prvInitialiseNewTask+0x138>)
 8003da6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	68f9      	ldr	r1, [r7, #12]
 8003dac:	69b8      	ldr	r0, [r7, #24]
 8003dae:	f000 fc1f 	bl	80045f0 <pxPortInitialiseStack>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dc4:	bf00      	nop
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	0800506c 	.word	0x0800506c
 8003dd0:	0800508c 	.word	0x0800508c
 8003dd4:	0800504c 	.word	0x0800504c

08003dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003de0:	f000 fd30 	bl	8004844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003de4:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <prvAddNewTaskToReadyList+0xb8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	4a29      	ldr	r2, [pc, #164]	; (8003e90 <prvAddNewTaskToReadyList+0xb8>)
 8003dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dee:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003df6:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <prvAddNewTaskToReadyList+0xb8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d110      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e04:	f000 facc 	bl	80043a0 <prvInitialiseTaskLists>
 8003e08:	e00d      	b.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e0a:	4b23      	ldr	r3, [pc, #140]	; (8003e98 <prvAddNewTaskToReadyList+0xc0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e12:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d802      	bhi.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e20:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003e2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	2201      	movs	r2, #1
 8003e36:	409a      	lsls	r2, r3
 8003e38:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <prvAddNewTaskToReadyList+0xcc>)
 8003e50:	441a      	add	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f7ff fdf5 	bl	8003a48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e5e:	f000 fd21 	bl	80048a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <prvAddNewTaskToReadyList+0xc0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00e      	beq.n	8003e88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <prvAddNewTaskToReadyList+0xbc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d207      	bcs.n	8003e88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000658 	.word	0x20000658
 8003e94:	20000558 	.word	0x20000558
 8003e98:	20000664 	.word	0x20000664
 8003e9c:	20000674 	.word	0x20000674
 8003ea0:	20000660 	.word	0x20000660
 8003ea4:	2000055c 	.word	0x2000055c
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <vTaskDelay+0x60>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <vTaskDelay+0x30>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	60bb      	str	r3, [r7, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003edc:	f000 f884 	bl	8003fe8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fb1e 	bl	8004524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ee8:	f000 f88c 	bl	8004004 <xTaskResumeAll>
 8003eec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <vTaskDelay+0x64>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000680 	.word	0x20000680
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f22:	463a      	mov	r2, r7
 8003f24:	1d39      	adds	r1, r7, #4
 8003f26:	f107 0308 	add.w	r3, r7, #8
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fc f99c 	bl	8000268 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f30:	6839      	ldr	r1, [r7, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	9202      	str	r2, [sp, #8]
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	460a      	mov	r2, r1
 8003f42:	4921      	ldr	r1, [pc, #132]	; (8003fc8 <vTaskStartScheduler+0xb4>)
 8003f44:	4821      	ldr	r0, [pc, #132]	; (8003fcc <vTaskStartScheduler+0xb8>)
 8003f46:	f7ff fe06 	bl	8003b56 <xTaskCreateStatic>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <vTaskStartScheduler+0xbc>)
 8003f4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <vTaskStartScheduler+0xbc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e001      	b.n	8003f62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d11b      	bne.n	8003fa0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	613b      	str	r3, [r7, #16]
}
 8003f7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <vTaskStartScheduler+0xc0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	334c      	adds	r3, #76	; 0x4c
 8003f82:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <vTaskStartScheduler+0xc4>)
 8003f84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <vTaskStartScheduler+0xc8>)
 8003f88:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f8e:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <vTaskStartScheduler+0xcc>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <vTaskStartScheduler+0xd0>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f9a:	f000 fbb1 	bl	8004700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f9e:	e00e      	b.n	8003fbe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa6:	d10a      	bne.n	8003fbe <vTaskStartScheduler+0xaa>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	60fb      	str	r3, [r7, #12]
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <vTaskStartScheduler+0xa8>
}
 8003fbe:	bf00      	nop
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	08004ffc 	.word	0x08004ffc
 8003fcc:	08004371 	.word	0x08004371
 8003fd0:	2000067c 	.word	0x2000067c
 8003fd4:	20000558 	.word	0x20000558
 8003fd8:	20000010 	.word	0x20000010
 8003fdc:	20000678 	.word	0x20000678
 8003fe0:	20000664 	.word	0x20000664
 8003fe4:	2000065c 	.word	0x2000065c

08003fe8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <vTaskSuspendAll+0x18>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	4a03      	ldr	r2, [pc, #12]	; (8004000 <vTaskSuspendAll+0x18>)
 8003ff4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ff6:	bf00      	nop
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	20000680 	.word	0x20000680

08004004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004012:	4b41      	ldr	r3, [pc, #260]	; (8004118 <xTaskResumeAll+0x114>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <xTaskResumeAll+0x2c>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	603b      	str	r3, [r7, #0]
}
 800402c:	bf00      	nop
 800402e:	e7fe      	b.n	800402e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004030:	f000 fc08 	bl	8004844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004034:	4b38      	ldr	r3, [pc, #224]	; (8004118 <xTaskResumeAll+0x114>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3b01      	subs	r3, #1
 800403a:	4a37      	ldr	r2, [pc, #220]	; (8004118 <xTaskResumeAll+0x114>)
 800403c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800403e:	4b36      	ldr	r3, [pc, #216]	; (8004118 <xTaskResumeAll+0x114>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d161      	bne.n	800410a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004046:	4b35      	ldr	r3, [pc, #212]	; (800411c <xTaskResumeAll+0x118>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d05d      	beq.n	800410a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800404e:	e02e      	b.n	80040ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004050:	4b33      	ldr	r3, [pc, #204]	; (8004120 <xTaskResumeAll+0x11c>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3318      	adds	r3, #24
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff fd50 	bl	8003b02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3304      	adds	r3, #4
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fd4b 	bl	8003b02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	2201      	movs	r2, #1
 8004072:	409a      	lsls	r2, r3
 8004074:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <xTaskResumeAll+0x120>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	4a2a      	ldr	r2, [pc, #168]	; (8004124 <xTaskResumeAll+0x120>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4a27      	ldr	r2, [pc, #156]	; (8004128 <xTaskResumeAll+0x124>)
 800408c:	441a      	add	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7ff fcd7 	bl	8003a48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	4b23      	ldr	r3, [pc, #140]	; (800412c <xTaskResumeAll+0x128>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d302      	bcc.n	80040ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <xTaskResumeAll+0x12c>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ae:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <xTaskResumeAll+0x11c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1cc      	bne.n	8004050 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040bc:	f000 fa12 	bl	80044e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040c0:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <xTaskResumeAll+0x130>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040cc:	f000 f836 	bl	800413c <xTaskIncrementTick>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040d6:	4b16      	ldr	r3, [pc, #88]	; (8004130 <xTaskResumeAll+0x12c>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f1      	bne.n	80040cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <xTaskResumeAll+0x130>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <xTaskResumeAll+0x12c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040f6:	2301      	movs	r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040fa:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <xTaskResumeAll+0x134>)
 80040fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800410a:	f000 fbcb 	bl	80048a4 <vPortExitCritical>

	return xAlreadyYielded;
 800410e:	68bb      	ldr	r3, [r7, #8]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000680 	.word	0x20000680
 800411c:	20000658 	.word	0x20000658
 8004120:	20000618 	.word	0x20000618
 8004124:	20000660 	.word	0x20000660
 8004128:	2000055c 	.word	0x2000055c
 800412c:	20000558 	.word	0x20000558
 8004130:	2000066c 	.word	0x2000066c
 8004134:	20000668 	.word	0x20000668
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004146:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <xTaskIncrementTick+0x144>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	f040 808e 	bne.w	800426c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004150:	4b4c      	ldr	r3, [pc, #304]	; (8004284 <xTaskIncrementTick+0x148>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004158:	4a4a      	ldr	r2, [pc, #296]	; (8004284 <xTaskIncrementTick+0x148>)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d120      	bne.n	80041a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004164:	4b48      	ldr	r3, [pc, #288]	; (8004288 <xTaskIncrementTick+0x14c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <xTaskIncrementTick+0x48>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	603b      	str	r3, [r7, #0]
}
 8004180:	bf00      	nop
 8004182:	e7fe      	b.n	8004182 <xTaskIncrementTick+0x46>
 8004184:	4b40      	ldr	r3, [pc, #256]	; (8004288 <xTaskIncrementTick+0x14c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	4b40      	ldr	r3, [pc, #256]	; (800428c <xTaskIncrementTick+0x150>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3e      	ldr	r2, [pc, #248]	; (8004288 <xTaskIncrementTick+0x14c>)
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4a3e      	ldr	r2, [pc, #248]	; (800428c <xTaskIncrementTick+0x150>)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b3d      	ldr	r3, [pc, #244]	; (8004290 <xTaskIncrementTick+0x154>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3301      	adds	r3, #1
 800419e:	4a3c      	ldr	r2, [pc, #240]	; (8004290 <xTaskIncrementTick+0x154>)
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	f000 f99f 	bl	80044e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041a6:	4b3b      	ldr	r3, [pc, #236]	; (8004294 <xTaskIncrementTick+0x158>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d348      	bcc.n	8004242 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041b0:	4b35      	ldr	r3, [pc, #212]	; (8004288 <xTaskIncrementTick+0x14c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ba:	4b36      	ldr	r3, [pc, #216]	; (8004294 <xTaskIncrementTick+0x158>)
 80041bc:	f04f 32ff 	mov.w	r2, #4294967295
 80041c0:	601a      	str	r2, [r3, #0]
					break;
 80041c2:	e03e      	b.n	8004242 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c4:	4b30      	ldr	r3, [pc, #192]	; (8004288 <xTaskIncrementTick+0x14c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d203      	bcs.n	80041e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041dc:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <xTaskIncrementTick+0x158>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041e2:	e02e      	b.n	8004242 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fc8a 	bl	8003b02 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	3318      	adds	r3, #24
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fc81 	bl	8003b02 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	2201      	movs	r2, #1
 8004206:	409a      	lsls	r2, r3
 8004208:	4b23      	ldr	r3, [pc, #140]	; (8004298 <xTaskIncrementTick+0x15c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4313      	orrs	r3, r2
 800420e:	4a22      	ldr	r2, [pc, #136]	; (8004298 <xTaskIncrementTick+0x15c>)
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <xTaskIncrementTick+0x160>)
 8004220:	441a      	add	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7ff fc0d 	bl	8003a48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004232:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <xTaskIncrementTick+0x164>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	429a      	cmp	r2, r3
 800423a:	d3b9      	bcc.n	80041b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800423c:	2301      	movs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004240:	e7b6      	b.n	80041b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004242:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <xTaskIncrementTick+0x164>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	4914      	ldr	r1, [pc, #80]	; (800429c <xTaskIncrementTick+0x160>)
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d901      	bls.n	800425e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800425a:	2301      	movs	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <xTaskIncrementTick+0x168>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004266:	2301      	movs	r3, #1
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e004      	b.n	8004276 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800426c:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <xTaskIncrementTick+0x16c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	4a0d      	ldr	r2, [pc, #52]	; (80042a8 <xTaskIncrementTick+0x16c>)
 8004274:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004276:	697b      	ldr	r3, [r7, #20]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000680 	.word	0x20000680
 8004284:	2000065c 	.word	0x2000065c
 8004288:	20000610 	.word	0x20000610
 800428c:	20000614 	.word	0x20000614
 8004290:	20000670 	.word	0x20000670
 8004294:	20000678 	.word	0x20000678
 8004298:	20000660 	.word	0x20000660
 800429c:	2000055c 	.word	0x2000055c
 80042a0:	20000558 	.word	0x20000558
 80042a4:	2000066c 	.word	0x2000066c
 80042a8:	20000668 	.word	0x20000668

080042ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042b2:	4b29      	ldr	r3, [pc, #164]	; (8004358 <vTaskSwitchContext+0xac>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042ba:	4b28      	ldr	r3, [pc, #160]	; (800435c <vTaskSwitchContext+0xb0>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042c0:	e044      	b.n	800434c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <vTaskSwitchContext+0xb0>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c8:	4b25      	ldr	r3, [pc, #148]	; (8004360 <vTaskSwitchContext+0xb4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80042d6:	7afb      	ldrb	r3, [r7, #11]
 80042d8:	f1c3 031f 	rsb	r3, r3, #31
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	4921      	ldr	r1, [pc, #132]	; (8004364 <vTaskSwitchContext+0xb8>)
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <vTaskSwitchContext+0x5c>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	607b      	str	r3, [r7, #4]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <vTaskSwitchContext+0x5a>
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4a14      	ldr	r2, [pc, #80]	; (8004364 <vTaskSwitchContext+0xb8>)
 8004314:	4413      	add	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3308      	adds	r3, #8
 800432a:	429a      	cmp	r2, r3
 800432c:	d104      	bne.n	8004338 <vTaskSwitchContext+0x8c>
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <vTaskSwitchContext+0xbc>)
 8004340:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <vTaskSwitchContext+0xbc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	334c      	adds	r3, #76	; 0x4c
 8004348:	4a08      	ldr	r2, [pc, #32]	; (800436c <vTaskSwitchContext+0xc0>)
 800434a:	6013      	str	r3, [r2, #0]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	20000680 	.word	0x20000680
 800435c:	2000066c 	.word	0x2000066c
 8004360:	20000660 	.word	0x20000660
 8004364:	2000055c 	.word	0x2000055c
 8004368:	20000558 	.word	0x20000558
 800436c:	20000010 	.word	0x20000010

08004370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004378:	f000 f852 	bl	8004420 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <prvIdleTask+0x28>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d9f9      	bls.n	8004378 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <prvIdleTask+0x2c>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004394:	e7f0      	b.n	8004378 <prvIdleTask+0x8>
 8004396:	bf00      	nop
 8004398:	2000055c 	.word	0x2000055c
 800439c:	e000ed04 	.word	0xe000ed04

080043a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043a6:	2300      	movs	r3, #0
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	e00c      	b.n	80043c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4a12      	ldr	r2, [pc, #72]	; (8004400 <prvInitialiseTaskLists+0x60>)
 80043b8:	4413      	add	r3, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fb17 	bl	80039ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3301      	adds	r3, #1
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b06      	cmp	r3, #6
 80043ca:	d9ef      	bls.n	80043ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043cc:	480d      	ldr	r0, [pc, #52]	; (8004404 <prvInitialiseTaskLists+0x64>)
 80043ce:	f7ff fb0e 	bl	80039ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043d2:	480d      	ldr	r0, [pc, #52]	; (8004408 <prvInitialiseTaskLists+0x68>)
 80043d4:	f7ff fb0b 	bl	80039ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043d8:	480c      	ldr	r0, [pc, #48]	; (800440c <prvInitialiseTaskLists+0x6c>)
 80043da:	f7ff fb08 	bl	80039ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043de:	480c      	ldr	r0, [pc, #48]	; (8004410 <prvInitialiseTaskLists+0x70>)
 80043e0:	f7ff fb05 	bl	80039ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043e4:	480b      	ldr	r0, [pc, #44]	; (8004414 <prvInitialiseTaskLists+0x74>)
 80043e6:	f7ff fb02 	bl	80039ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <prvInitialiseTaskLists+0x78>)
 80043ec:	4a05      	ldr	r2, [pc, #20]	; (8004404 <prvInitialiseTaskLists+0x64>)
 80043ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <prvInitialiseTaskLists+0x7c>)
 80043f2:	4a05      	ldr	r2, [pc, #20]	; (8004408 <prvInitialiseTaskLists+0x68>)
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	2000055c 	.word	0x2000055c
 8004404:	200005e8 	.word	0x200005e8
 8004408:	200005fc 	.word	0x200005fc
 800440c:	20000618 	.word	0x20000618
 8004410:	2000062c 	.word	0x2000062c
 8004414:	20000644 	.word	0x20000644
 8004418:	20000610 	.word	0x20000610
 800441c:	20000614 	.word	0x20000614

08004420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004426:	e019      	b.n	800445c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004428:	f000 fa0c 	bl	8004844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442c:	4b10      	ldr	r3, [pc, #64]	; (8004470 <prvCheckTasksWaitingTermination+0x50>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fb62 	bl	8003b02 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <prvCheckTasksWaitingTermination+0x54>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	4a0b      	ldr	r2, [pc, #44]	; (8004474 <prvCheckTasksWaitingTermination+0x54>)
 8004446:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <prvCheckTasksWaitingTermination+0x58>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3b01      	subs	r3, #1
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <prvCheckTasksWaitingTermination+0x58>)
 8004450:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004452:	f000 fa27 	bl	80048a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f810 	bl	800447c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <prvCheckTasksWaitingTermination+0x58>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e1      	bne.n	8004428 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	2000062c 	.word	0x2000062c
 8004474:	20000658 	.word	0x20000658
 8004478:	20000640 	.word	0x20000640

0800447c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	334c      	adds	r3, #76	; 0x4c
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fce3 	bl	8004e54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d108      	bne.n	80044aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb7f 	bl	8004ba0 <vPortFree>
				vPortFree( pxTCB );
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fb7c 	bl	8004ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044a8:	e018      	b.n	80044dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d103      	bne.n	80044bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fb73 	bl	8004ba0 <vPortFree>
	}
 80044ba:	e00f      	b.n	80044dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d00a      	beq.n	80044dc <prvDeleteTCB+0x60>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60fb      	str	r3, [r7, #12]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <prvDeleteTCB+0x5e>
	}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <prvResetNextTaskUnblockTime+0x38>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <prvResetNextTaskUnblockTime+0x3c>)
 80044f6:	f04f 32ff 	mov.w	r2, #4294967295
 80044fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044fc:	e008      	b.n	8004510 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <prvResetNextTaskUnblockTime+0x38>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <prvResetNextTaskUnblockTime+0x3c>)
 800450e:	6013      	str	r3, [r2, #0]
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	20000610 	.word	0x20000610
 8004520:	20000678 	.word	0x20000678

08004524 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800452e:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3304      	adds	r3, #4
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fae1 	bl	8003b02 <uxListRemove>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004546:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	2201      	movs	r2, #1
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43da      	mvns	r2, r3
 8004554:	4b21      	ldr	r3, [pc, #132]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4013      	ands	r3, r2
 800455a:	4a20      	ldr	r2, [pc, #128]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800455c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d10a      	bne.n	800457c <prvAddCurrentTaskToDelayedList+0x58>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3304      	adds	r3, #4
 8004572:	4619      	mov	r1, r3
 8004574:	481a      	ldr	r0, [pc, #104]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004576:	f7ff fa67 	bl	8003a48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800457a:	e026      	b.n	80045ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004584:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	429a      	cmp	r2, r3
 8004592:	d209      	bcs.n	80045a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004594:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3304      	adds	r3, #4
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f7ff fa75 	bl	8003a90 <vListInsert>
}
 80045a6:	e010      	b.n	80045ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045a8:	4b0f      	ldr	r3, [pc, #60]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f7ff fa6b 	bl	8003a90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d202      	bcs.n	80045ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045c4:	4a09      	ldr	r2, [pc, #36]	; (80045ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	6013      	str	r3, [r2, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	2000065c 	.word	0x2000065c
 80045d8:	20000558 	.word	0x20000558
 80045dc:	20000660 	.word	0x20000660
 80045e0:	20000644 	.word	0x20000644
 80045e4:	20000614 	.word	0x20000614
 80045e8:	20000610 	.word	0x20000610
 80045ec:	20000678 	.word	0x20000678

080045f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3b04      	subs	r3, #4
 8004600:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3b04      	subs	r3, #4
 800460e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3b04      	subs	r3, #4
 800461e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004620:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <pxPortInitialiseStack+0x64>)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3b14      	subs	r3, #20
 800462a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3b04      	subs	r3, #4
 8004636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f06f 0202 	mvn.w	r2, #2
 800463e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3b20      	subs	r3, #32
 8004644:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004646:	68fb      	ldr	r3, [r7, #12]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	08004659 	.word	0x08004659

08004658 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <prvTaskExitError+0x54>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d00a      	beq.n	8004682 <prvTaskExitError+0x2a>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60fb      	str	r3, [r7, #12]
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <prvTaskExitError+0x28>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	60bb      	str	r3, [r7, #8]
}
 8004694:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004696:	bf00      	nop
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0fc      	beq.n	8004698 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	2000000c 	.word	0x2000000c

080046b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <pxCurrentTCBConst2>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	6808      	ldr	r0, [r1, #0]
 80046b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	f380 8809 	msr	PSP, r0
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8811 	msr	BASEPRI, r0
 80046ca:	4770      	bx	lr
 80046cc:	f3af 8000 	nop.w

080046d0 <pxCurrentTCBConst2>:
 80046d0:	20000558 	.word	0x20000558
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop

080046d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046d8:	4808      	ldr	r0, [pc, #32]	; (80046fc <prvPortStartFirstTask+0x24>)
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f380 8808 	msr	MSP, r0
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f380 8814 	msr	CONTROL, r0
 80046ea:	b662      	cpsie	i
 80046ec:	b661      	cpsie	f
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	df00      	svc	0
 80046f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046fa:	bf00      	nop
 80046fc:	e000ed08 	.word	0xe000ed08

08004700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004706:	4b46      	ldr	r3, [pc, #280]	; (8004820 <xPortStartScheduler+0x120>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a46      	ldr	r2, [pc, #280]	; (8004824 <xPortStartScheduler+0x124>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d10a      	bne.n	8004726 <xPortStartScheduler+0x26>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	613b      	str	r3, [r7, #16]
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004726:	4b3e      	ldr	r3, [pc, #248]	; (8004820 <xPortStartScheduler+0x120>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <xPortStartScheduler+0x128>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d10a      	bne.n	8004746 <xPortStartScheduler+0x46>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	60fb      	str	r3, [r7, #12]
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004746:	4b39      	ldr	r3, [pc, #228]	; (800482c <xPortStartScheduler+0x12c>)
 8004748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	22ff      	movs	r2, #255	; 0xff
 8004756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004768:	b2da      	uxtb	r2, r3
 800476a:	4b31      	ldr	r3, [pc, #196]	; (8004830 <xPortStartScheduler+0x130>)
 800476c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800476e:	4b31      	ldr	r3, [pc, #196]	; (8004834 <xPortStartScheduler+0x134>)
 8004770:	2207      	movs	r2, #7
 8004772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004774:	e009      	b.n	800478a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <xPortStartScheduler+0x134>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3b01      	subs	r3, #1
 800477c:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <xPortStartScheduler+0x134>)
 800477e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	b2db      	uxtb	r3, r3
 8004788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	2b80      	cmp	r3, #128	; 0x80
 8004794:	d0ef      	beq.n	8004776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004796:	4b27      	ldr	r3, [pc, #156]	; (8004834 <xPortStartScheduler+0x134>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f1c3 0307 	rsb	r3, r3, #7
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d00a      	beq.n	80047b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	60bb      	str	r3, [r7, #8]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <xPortStartScheduler+0x134>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <xPortStartScheduler+0x134>)
 80047c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047c2:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <xPortStartScheduler+0x134>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047ca:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <xPortStartScheduler+0x134>)
 80047cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047d6:	4b18      	ldr	r3, [pc, #96]	; (8004838 <xPortStartScheduler+0x138>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a17      	ldr	r2, [pc, #92]	; (8004838 <xPortStartScheduler+0x138>)
 80047dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <xPortStartScheduler+0x138>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a14      	ldr	r2, [pc, #80]	; (8004838 <xPortStartScheduler+0x138>)
 80047e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047ee:	f000 f8dd 	bl	80049ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <xPortStartScheduler+0x13c>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047f8:	f000 f8fc 	bl	80049f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047fc:	4b10      	ldr	r3, [pc, #64]	; (8004840 <xPortStartScheduler+0x140>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0f      	ldr	r2, [pc, #60]	; (8004840 <xPortStartScheduler+0x140>)
 8004802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004808:	f7ff ff66 	bl	80046d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800480c:	f7ff fd4e 	bl	80042ac <vTaskSwitchContext>
	prvTaskExitError();
 8004810:	f7ff ff22 	bl	8004658 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	e000ed00 	.word	0xe000ed00
 8004824:	410fc271 	.word	0x410fc271
 8004828:	410fc270 	.word	0x410fc270
 800482c:	e000e400 	.word	0xe000e400
 8004830:	20000684 	.word	0x20000684
 8004834:	20000688 	.word	0x20000688
 8004838:	e000ed20 	.word	0xe000ed20
 800483c:	2000000c 	.word	0x2000000c
 8004840:	e000ef34 	.word	0xe000ef34

08004844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	607b      	str	r3, [r7, #4]
}
 800485c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800485e:	4b0f      	ldr	r3, [pc, #60]	; (800489c <vPortEnterCritical+0x58>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	4a0d      	ldr	r2, [pc, #52]	; (800489c <vPortEnterCritical+0x58>)
 8004866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <vPortEnterCritical+0x58>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d10f      	bne.n	8004890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <vPortEnterCritical+0x5c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <vPortEnterCritical+0x4c>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	603b      	str	r3, [r7, #0]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <vPortEnterCritical+0x4a>
	}
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	2000000c 	.word	0x2000000c
 80048a0:	e000ed04 	.word	0xe000ed04

080048a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <vPortExitCritical+0x50>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <vPortExitCritical+0x24>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	607b      	str	r3, [r7, #4]
}
 80048c4:	bf00      	nop
 80048c6:	e7fe      	b.n	80048c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <vPortExitCritical+0x50>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <vPortExitCritical+0x50>)
 80048d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048d2:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <vPortExitCritical+0x50>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d105      	bne.n	80048e6 <vPortExitCritical+0x42>
 80048da:	2300      	movs	r3, #0
 80048dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2000000c 	.word	0x2000000c
	...

08004900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004900:	f3ef 8009 	mrs	r0, PSP
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <pxCurrentTCBConst>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	f01e 0f10 	tst.w	lr, #16
 8004910:	bf08      	it	eq
 8004912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	6010      	str	r0, [r2, #0]
 800491c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004924:	f380 8811 	msr	BASEPRI, r0
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f7ff fcbc 	bl	80042ac <vTaskSwitchContext>
 8004934:	f04f 0000 	mov.w	r0, #0
 8004938:	f380 8811 	msr	BASEPRI, r0
 800493c:	bc09      	pop	{r0, r3}
 800493e:	6819      	ldr	r1, [r3, #0]
 8004940:	6808      	ldr	r0, [r1, #0]
 8004942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004946:	f01e 0f10 	tst.w	lr, #16
 800494a:	bf08      	it	eq
 800494c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004950:	f380 8809 	msr	PSP, r0
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w

08004960 <pxCurrentTCBConst>:
 8004960:	20000558 	.word	0x20000558
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
}
 8004980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004982:	f7ff fbdb 	bl	800413c <xTaskIncrementTick>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <SysTick_Handler+0x40>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f383 8811 	msr	BASEPRI, r3
}
 800499e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <vPortSetupTimerInterrupt+0x34>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <vPortSetupTimerInterrupt+0x38>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <vPortSetupTimerInterrupt+0x3c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <vPortSetupTimerInterrupt+0x40>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	4a09      	ldr	r2, [pc, #36]	; (80049f0 <vPortSetupTimerInterrupt+0x44>)
 80049ca:	3b01      	subs	r3, #1
 80049cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <vPortSetupTimerInterrupt+0x34>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	601a      	str	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	e000e010 	.word	0xe000e010
 80049e4:	e000e018 	.word	0xe000e018
 80049e8:	20000000 	.word	0x20000000
 80049ec:	10624dd3 	.word	0x10624dd3
 80049f0:	e000e014 	.word	0xe000e014

080049f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a04 <vPortEnableVFP+0x10>
 80049f8:	6801      	ldr	r1, [r0, #0]
 80049fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049fe:	6001      	str	r1, [r0, #0]
 8004a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a02:	bf00      	nop
 8004a04:	e000ed88 	.word	0xe000ed88

08004a08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a14:	f7ff fae8 	bl	8003fe8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a18:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <pvPortMalloc+0x180>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a20:	f000 f920 	bl	8004c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a24:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <pvPortMalloc+0x184>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 8093 	bne.w	8004b58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01d      	beq.n	8004a74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a38:	2208      	movs	r2, #8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d014      	beq.n	8004a74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f023 0307 	bic.w	r3, r3, #7
 8004a50:	3308      	adds	r3, #8
 8004a52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <pvPortMalloc+0x6c>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	617b      	str	r3, [r7, #20]
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d06e      	beq.n	8004b58 <pvPortMalloc+0x150>
 8004a7a:	4b45      	ldr	r3, [pc, #276]	; (8004b90 <pvPortMalloc+0x188>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d869      	bhi.n	8004b58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <pvPortMalloc+0x18c>)
 8004a86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a88:	4b42      	ldr	r3, [pc, #264]	; (8004b94 <pvPortMalloc+0x18c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a8e:	e004      	b.n	8004a9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d903      	bls.n	8004aac <pvPortMalloc+0xa4>
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f1      	bne.n	8004a90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <pvPortMalloc+0x180>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d050      	beq.n	8004b58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2208      	movs	r2, #8
 8004abc:	4413      	add	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	1ad2      	subs	r2, r2, r3
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d91f      	bls.n	8004b18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4413      	add	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <pvPortMalloc+0xf8>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	613b      	str	r3, [r7, #16]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	1ad2      	subs	r2, r2, r3
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b12:	69b8      	ldr	r0, [r7, #24]
 8004b14:	f000 f908 	bl	8004d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <pvPortMalloc+0x188>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <pvPortMalloc+0x188>)
 8004b24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <pvPortMalloc+0x188>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <pvPortMalloc+0x190>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d203      	bcs.n	8004b3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b32:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <pvPortMalloc+0x188>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <pvPortMalloc+0x190>)
 8004b38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <pvPortMalloc+0x184>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b4e:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <pvPortMalloc+0x194>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <pvPortMalloc+0x194>)
 8004b56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b58:	f7ff fa54 	bl	8004004 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <pvPortMalloc+0x174>
	__asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	60fb      	str	r3, [r7, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	e7fe      	b.n	8004b7a <pvPortMalloc+0x172>
	return pvReturn;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3728      	adds	r7, #40	; 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	2000124c 	.word	0x2000124c
 8004b8c:	20001260 	.word	0x20001260
 8004b90:	20001250 	.word	0x20001250
 8004b94:	20001244 	.word	0x20001244
 8004b98:	20001254 	.word	0x20001254
 8004b9c:	20001258 	.word	0x20001258

08004ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d04d      	beq.n	8004c4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	425b      	negs	r3, r3
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4413      	add	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <vPortFree+0xb8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <vPortFree+0x44>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	60fb      	str	r3, [r7, #12]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <vPortFree+0x62>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60bb      	str	r3, [r7, #8]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <vPortFree+0xb8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01e      	beq.n	8004c4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11a      	bne.n	8004c4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <vPortFree+0xb8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	43db      	mvns	r3, r3
 8004c22:	401a      	ands	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c28:	f7ff f9de 	bl	8003fe8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <vPortFree+0xbc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4413      	add	r3, r2
 8004c36:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <vPortFree+0xbc>)
 8004c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c3a:	6938      	ldr	r0, [r7, #16]
 8004c3c:	f000 f874 	bl	8004d28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <vPortFree+0xc0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	4a06      	ldr	r2, [pc, #24]	; (8004c60 <vPortFree+0xc0>)
 8004c48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c4a:	f7ff f9db 	bl	8004004 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20001260 	.word	0x20001260
 8004c5c:	20001250 	.word	0x20001250
 8004c60:	2000125c 	.word	0x2000125c

08004c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c70:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <prvHeapInit+0xac>)
 8004c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3307      	adds	r3, #7
 8004c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0307 	bic.w	r3, r3, #7
 8004c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <prvHeapInit+0xac>)
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <prvHeapInit+0xb0>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ca2:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <prvHeapInit+0xb0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0307 	bic.w	r3, r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a15      	ldr	r2, [pc, #84]	; (8004d18 <prvHeapInit+0xb4>)
 8004cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <prvHeapInit+0xb4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <prvHeapInit+0xb4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	1ad2      	subs	r2, r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <prvHeapInit+0xb4>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <prvHeapInit+0xb8>)
 8004cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <prvHeapInit+0xbc>)
 8004cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <prvHeapInit+0xc0>)
 8004cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d02:	601a      	str	r2, [r3, #0]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	2000068c 	.word	0x2000068c
 8004d14:	20001244 	.word	0x20001244
 8004d18:	2000124c 	.word	0x2000124c
 8004d1c:	20001254 	.word	0x20001254
 8004d20:	20001250 	.word	0x20001250
 8004d24:	20001260 	.word	0x20001260

08004d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d30:	4b28      	ldr	r3, [pc, #160]	; (8004dd4 <prvInsertBlockIntoFreeList+0xac>)
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	e002      	b.n	8004d3c <prvInsertBlockIntoFreeList+0x14>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d8f7      	bhi.n	8004d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4413      	add	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d108      	bne.n	8004d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	441a      	add	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	441a      	add	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d118      	bne.n	8004db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d00d      	beq.n	8004da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	441a      	add	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e008      	b.n	8004db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004da6:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e003      	b.n	8004db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d002      	beq.n	8004dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20001244 	.word	0x20001244
 8004dd8:	2000124c 	.word	0x2000124c

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4d0d      	ldr	r5, [pc, #52]	; (8004e14 <__libc_init_array+0x38>)
 8004de0:	4c0d      	ldr	r4, [pc, #52]	; (8004e18 <__libc_init_array+0x3c>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	2600      	movs	r6, #0
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	4d0b      	ldr	r5, [pc, #44]	; (8004e1c <__libc_init_array+0x40>)
 8004dee:	4c0c      	ldr	r4, [pc, #48]	; (8004e20 <__libc_init_array+0x44>)
 8004df0:	f000 f8e4 	bl	8004fbc <_init>
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	2600      	movs	r6, #0
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	080050ac 	.word	0x080050ac
 8004e18:	080050ac 	.word	0x080050ac
 8004e1c:	080050ac 	.word	0x080050ac
 8004e20:	080050b0 	.word	0x080050b0

08004e24 <__retarget_lock_acquire_recursive>:
 8004e24:	4770      	bx	lr

08004e26 <__retarget_lock_release_recursive>:
 8004e26:	4770      	bx	lr

08004e28 <memset>:
 8004e28:	4402      	add	r2, r0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <memset+0xa>
 8004e30:	4770      	bx	lr
 8004e32:	f803 1b01 	strb.w	r1, [r3], #1
 8004e36:	e7f9      	b.n	8004e2c <memset+0x4>

08004e38 <cleanup_glue>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	6809      	ldr	r1, [r1, #0]
 8004e3e:	4605      	mov	r5, r0
 8004e40:	b109      	cbz	r1, 8004e46 <cleanup_glue+0xe>
 8004e42:	f7ff fff9 	bl	8004e38 <cleanup_glue>
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e4e:	f000 b869 	b.w	8004f24 <_free_r>
	...

08004e54 <_reclaim_reent>:
 8004e54:	4b2c      	ldr	r3, [pc, #176]	; (8004f08 <_reclaim_reent+0xb4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	b570      	push	{r4, r5, r6, lr}
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	d051      	beq.n	8004f04 <_reclaim_reent+0xb0>
 8004e60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e62:	b143      	cbz	r3, 8004e76 <_reclaim_reent+0x22>
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d14a      	bne.n	8004f00 <_reclaim_reent+0xac>
 8004e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e6c:	6819      	ldr	r1, [r3, #0]
 8004e6e:	b111      	cbz	r1, 8004e76 <_reclaim_reent+0x22>
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 f857 	bl	8004f24 <_free_r>
 8004e76:	6961      	ldr	r1, [r4, #20]
 8004e78:	b111      	cbz	r1, 8004e80 <_reclaim_reent+0x2c>
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f000 f852 	bl	8004f24 <_free_r>
 8004e80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e82:	b111      	cbz	r1, 8004e8a <_reclaim_reent+0x36>
 8004e84:	4620      	mov	r0, r4
 8004e86:	f000 f84d 	bl	8004f24 <_free_r>
 8004e8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e8c:	b111      	cbz	r1, 8004e94 <_reclaim_reent+0x40>
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f000 f848 	bl	8004f24 <_free_r>
 8004e94:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004e96:	b111      	cbz	r1, 8004e9e <_reclaim_reent+0x4a>
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 f843 	bl	8004f24 <_free_r>
 8004e9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004ea0:	b111      	cbz	r1, 8004ea8 <_reclaim_reent+0x54>
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f000 f83e 	bl	8004f24 <_free_r>
 8004ea8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004eaa:	b111      	cbz	r1, 8004eb2 <_reclaim_reent+0x5e>
 8004eac:	4620      	mov	r0, r4
 8004eae:	f000 f839 	bl	8004f24 <_free_r>
 8004eb2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004eb4:	b111      	cbz	r1, 8004ebc <_reclaim_reent+0x68>
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f834 	bl	8004f24 <_free_r>
 8004ebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ebe:	b111      	cbz	r1, 8004ec6 <_reclaim_reent+0x72>
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 f82f 	bl	8004f24 <_free_r>
 8004ec6:	69a3      	ldr	r3, [r4, #24]
 8004ec8:	b1e3      	cbz	r3, 8004f04 <_reclaim_reent+0xb0>
 8004eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ecc:	4620      	mov	r0, r4
 8004ece:	4798      	blx	r3
 8004ed0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004ed2:	b1b9      	cbz	r1, 8004f04 <_reclaim_reent+0xb0>
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004eda:	f7ff bfad 	b.w	8004e38 <cleanup_glue>
 8004ede:	5949      	ldr	r1, [r1, r5]
 8004ee0:	b941      	cbnz	r1, 8004ef4 <_reclaim_reent+0xa0>
 8004ee2:	3504      	adds	r5, #4
 8004ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ee6:	2d80      	cmp	r5, #128	; 0x80
 8004ee8:	68d9      	ldr	r1, [r3, #12]
 8004eea:	d1f8      	bne.n	8004ede <_reclaim_reent+0x8a>
 8004eec:	4620      	mov	r0, r4
 8004eee:	f000 f819 	bl	8004f24 <_free_r>
 8004ef2:	e7ba      	b.n	8004e6a <_reclaim_reent+0x16>
 8004ef4:	680e      	ldr	r6, [r1, #0]
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f000 f814 	bl	8004f24 <_free_r>
 8004efc:	4631      	mov	r1, r6
 8004efe:	e7ef      	b.n	8004ee0 <_reclaim_reent+0x8c>
 8004f00:	2500      	movs	r5, #0
 8004f02:	e7ef      	b.n	8004ee4 <_reclaim_reent+0x90>
 8004f04:	bd70      	pop	{r4, r5, r6, pc}
 8004f06:	bf00      	nop
 8004f08:	20000010 	.word	0x20000010

08004f0c <__malloc_lock>:
 8004f0c:	4801      	ldr	r0, [pc, #4]	; (8004f14 <__malloc_lock+0x8>)
 8004f0e:	f7ff bf89 	b.w	8004e24 <__retarget_lock_acquire_recursive>
 8004f12:	bf00      	nop
 8004f14:	20001264 	.word	0x20001264

08004f18 <__malloc_unlock>:
 8004f18:	4801      	ldr	r0, [pc, #4]	; (8004f20 <__malloc_unlock+0x8>)
 8004f1a:	f7ff bf84 	b.w	8004e26 <__retarget_lock_release_recursive>
 8004f1e:	bf00      	nop
 8004f20:	20001264 	.word	0x20001264

08004f24 <_free_r>:
 8004f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f26:	2900      	cmp	r1, #0
 8004f28:	d044      	beq.n	8004fb4 <_free_r+0x90>
 8004f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f2e:	9001      	str	r0, [sp, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f1a1 0404 	sub.w	r4, r1, #4
 8004f36:	bfb8      	it	lt
 8004f38:	18e4      	addlt	r4, r4, r3
 8004f3a:	f7ff ffe7 	bl	8004f0c <__malloc_lock>
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <_free_r+0x94>)
 8004f40:	9801      	ldr	r0, [sp, #4]
 8004f42:	6813      	ldr	r3, [r2, #0]
 8004f44:	b933      	cbnz	r3, 8004f54 <_free_r+0x30>
 8004f46:	6063      	str	r3, [r4, #4]
 8004f48:	6014      	str	r4, [r2, #0]
 8004f4a:	b003      	add	sp, #12
 8004f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f50:	f7ff bfe2 	b.w	8004f18 <__malloc_unlock>
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	d908      	bls.n	8004f6a <_free_r+0x46>
 8004f58:	6825      	ldr	r5, [r4, #0]
 8004f5a:	1961      	adds	r1, r4, r5
 8004f5c:	428b      	cmp	r3, r1
 8004f5e:	bf01      	itttt	eq
 8004f60:	6819      	ldreq	r1, [r3, #0]
 8004f62:	685b      	ldreq	r3, [r3, #4]
 8004f64:	1949      	addeq	r1, r1, r5
 8004f66:	6021      	streq	r1, [r4, #0]
 8004f68:	e7ed      	b.n	8004f46 <_free_r+0x22>
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	b10b      	cbz	r3, 8004f74 <_free_r+0x50>
 8004f70:	42a3      	cmp	r3, r4
 8004f72:	d9fa      	bls.n	8004f6a <_free_r+0x46>
 8004f74:	6811      	ldr	r1, [r2, #0]
 8004f76:	1855      	adds	r5, r2, r1
 8004f78:	42a5      	cmp	r5, r4
 8004f7a:	d10b      	bne.n	8004f94 <_free_r+0x70>
 8004f7c:	6824      	ldr	r4, [r4, #0]
 8004f7e:	4421      	add	r1, r4
 8004f80:	1854      	adds	r4, r2, r1
 8004f82:	42a3      	cmp	r3, r4
 8004f84:	6011      	str	r1, [r2, #0]
 8004f86:	d1e0      	bne.n	8004f4a <_free_r+0x26>
 8004f88:	681c      	ldr	r4, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	6053      	str	r3, [r2, #4]
 8004f8e:	4421      	add	r1, r4
 8004f90:	6011      	str	r1, [r2, #0]
 8004f92:	e7da      	b.n	8004f4a <_free_r+0x26>
 8004f94:	d902      	bls.n	8004f9c <_free_r+0x78>
 8004f96:	230c      	movs	r3, #12
 8004f98:	6003      	str	r3, [r0, #0]
 8004f9a:	e7d6      	b.n	8004f4a <_free_r+0x26>
 8004f9c:	6825      	ldr	r5, [r4, #0]
 8004f9e:	1961      	adds	r1, r4, r5
 8004fa0:	428b      	cmp	r3, r1
 8004fa2:	bf04      	itt	eq
 8004fa4:	6819      	ldreq	r1, [r3, #0]
 8004fa6:	685b      	ldreq	r3, [r3, #4]
 8004fa8:	6063      	str	r3, [r4, #4]
 8004faa:	bf04      	itt	eq
 8004fac:	1949      	addeq	r1, r1, r5
 8004fae:	6021      	streq	r1, [r4, #0]
 8004fb0:	6054      	str	r4, [r2, #4]
 8004fb2:	e7ca      	b.n	8004f4a <_free_r+0x26>
 8004fb4:	b003      	add	sp, #12
 8004fb6:	bd30      	pop	{r4, r5, pc}
 8004fb8:	20001268 	.word	0x20001268

08004fbc <_init>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr

08004fc8 <_fini>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr
