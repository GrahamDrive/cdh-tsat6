
cdh-tsat6-stm32project-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f70  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800414c  0800414c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004154  08004154  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800415c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08004168  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004168  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a00  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fa  00000000  00000000  00032a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00034e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00035df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002394d  00000000  00000000  00036ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e4b  00000000  00000000  0005a62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc2a9  00000000  00000000  0006c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148721  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004278  00000000  00000000  00148774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080040ec 	.word	0x080040ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080040ec 	.word	0x080040ec

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Boot_CAN>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
void Boot_CAN(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef  		sFilterConfig;
	sFilterConfig.FilterIdHigh = 0x0000;
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterBank = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 80004fe:	2301      	movs	r3, #1
 8000500:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000502:	230e      	movs	r3, #14
 8000504:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000506:	463b      	mov	r3, r7
 8000508:	4619      	mov	r1, r3
 800050a:	4807      	ldr	r0, [pc, #28]	; (8000528 <Boot_CAN+0x50>)
 800050c:	f000 fcad 	bl	8000e6a <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1); // Turn on CANBus
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <Boot_CAN+0x50>)
 8000512:	f000 fd74 	bl	8000ffe <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000516:	2102      	movs	r1, #2
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <Boot_CAN+0x50>)
 800051a:	f000 ff96 	bl	800144a <HAL_CAN_ActivateNotification>
}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028

0800052c <CAN_Transmit_Message>:
/**
 * @brief Used to send messages over CAN
 * @param hcan1 The CANBUS object to send the message over\
 * @param message A 8 byte message
 */
void CAN_Transmit_Message(CANMessage_t myMessage){
 800052c:	b580      	push	{r7, lr}
 800052e:	b08e      	sub	sp, #56	; 0x38
 8000530:	af00      	add	r7, sp, #0
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t txMailbox; // Transmit Mailbox
	CAN_TxHeaderTypeDef txMessage;
	
	// TX Message Parameters
	uint16_t ID = (myMessage.priority << 4) | (SOURCE_ID << 2) | (myMessage.DestinationID);
 8000538:	793b      	ldrb	r3, [r7, #4]
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	b21a      	sxth	r2, r3
 800053e:	2303      	movs	r3, #3
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	b21b      	sxth	r3, r3
 8000544:	4313      	orrs	r3, r2
 8000546:	b21a      	sxth	r2, r3
 8000548:	797b      	ldrb	r3, [r7, #5]
 800054a:	b21b      	sxth	r3, r3
 800054c:	4313      	orrs	r3, r2
 800054e:	b21b      	sxth	r3, r3
 8000550:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t message[8] = {myMessage.command, myMessage.data[0], myMessage.data[1], myMessage.data[2], myMessage.data[3], myMessage.data[4], myMessage.data[5],myMessage.data[6]};
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	743b      	strb	r3, [r7, #16]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	747b      	strb	r3, [r7, #17]
 800055a:	7a3b      	ldrb	r3, [r7, #8]
 800055c:	74bb      	strb	r3, [r7, #18]
 800055e:	7a7b      	ldrb	r3, [r7, #9]
 8000560:	74fb      	strb	r3, [r7, #19]
 8000562:	7abb      	ldrb	r3, [r7, #10]
 8000564:	753b      	strb	r3, [r7, #20]
 8000566:	7afb      	ldrb	r3, [r7, #11]
 8000568:	757b      	strb	r3, [r7, #21]
 800056a:	7b3b      	ldrb	r3, [r7, #12]
 800056c:	75bb      	strb	r3, [r7, #22]
 800056e:	7b7b      	ldrb	r3, [r7, #13]
 8000570:	75fb      	strb	r3, [r7, #23]

	txMessage.StdId = ID;
 8000572:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000574:	61bb      	str	r3, [r7, #24]
	txMessage.IDE = CAN_ID_STD;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
	txMessage.RTR = CAN_RTR_DATA;
 800057a:	2300      	movs	r3, #0
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
	txMessage.DLC = MAX_CAN_DATA_LENGTH;
 800057e:	2308      	movs	r3, #8
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_CAN_AddTxMessage(&hcan1, &txMessage, message, &txMailbox);
 8000582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000586:	f107 0210 	add.w	r2, r7, #16
 800058a:	f107 0118 	add.w	r1, r7, #24
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <CAN_Transmit_Message+0x70>)
 8000590:	f000 fd79 	bl	8001086 <HAL_CAN_AddTxMessage>
}
 8000594:	bf00      	nop
 8000596:	3738      	adds	r7, #56	; 0x38
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000028 	.word	0x20000028

080005a0 <CAN_Message_Received>:

void CAN_Message_Received(){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0
	uint8_t rxData[8]; // Received data
	uint8_t receivedDestinationId; // ID of Received Message

	// Message Sent To Queue
	/* Get RX message */
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessage, rxData);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	f107 0218 	add.w	r2, r7, #24
 80005ae:	2100      	movs	r1, #0
 80005b0:	481d      	ldr	r0, [pc, #116]	; (8000628 <CAN_Message_Received+0x88>)
 80005b2:	f000 fe38 	bl	8001226 <HAL_CAN_GetRxMessage>
	receivedDestinationId = RECEIVED_DESTINATION_ID_MASK & rxMessage.StdId;
 80005b6:	69bb      	ldr	r3, [r7, #24]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2203      	movs	r2, #3
 80005bc:	4013      	ands	r3, r2
 80005be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(receivedDestinationId == SOURCE_ID){
 80005c2:	2203      	movs	r2, #3
 80005c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d129      	bne.n	8000620 <CAN_Message_Received+0x80>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005cc:	2120      	movs	r1, #32
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f001 fc03 	bl	8001ddc <HAL_GPIO_TogglePin>
		CANMessage_t ping;
		ping.DestinationID = 0x7F;
 80005d6:	237f      	movs	r3, #127	; 0x7f
 80005d8:	717b      	strb	r3, [r7, #5]
		ping.command = rxData[0];
 80005da:	7c3b      	ldrb	r3, [r7, #16]
 80005dc:	71bb      	strb	r3, [r7, #6]
		ping.priority = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	713b      	strb	r3, [r7, #4]
		for(uint8_t i = 0; i >= 7; i++){
 80005e2:	2300      	movs	r3, #0
 80005e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80005e8:	e011      	b.n	800060e <CAN_Message_Received+0x6e>
			ping.data[i] = rxData[i+1];
 80005ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005f4:	3238      	adds	r2, #56	; 0x38
 80005f6:	443a      	add	r2, r7
 80005f8:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 80005fc:	3338      	adds	r3, #56	; 0x38
 80005fe:	443b      	add	r3, r7
 8000600:	f803 2c31 	strb.w	r2, [r3, #-49]
		for(uint8_t i = 0; i >= 7; i++){
 8000604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000608:	3301      	adds	r3, #1
 800060a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800060e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000612:	2b06      	cmp	r3, #6
 8000614:	d8e9      	bhi.n	80005ea <CAN_Message_Received+0x4a>
		}
		CAN_Transmit_Message(ping);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800061c:	f7ff ff86 	bl	800052c <CAN_Transmit_Message>
	}
}
 8000620:	bf00      	nop
 8000622:	3738      	adds	r7, #56	; 0x38
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000028 	.word	0x20000028

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fae7 	bl	8000c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f807 	bl	8000646 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f8be 	bl	80007b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f88c 	bl	8000758 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000640:	f000 f852 	bl	80006e8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x18>

08000646 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b096      	sub	sp, #88	; 0x58
 800064a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2244      	movs	r2, #68	; 0x44
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fd41 	bl	80040dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000668:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066c:	f001 fbde 	bl	8001e2c <HAL_PWREx_ControlVoltageScaling>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000676:	f000 f921 	bl	80008bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2340      	movs	r3, #64	; 0x40
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000690:	2301      	movs	r3, #1
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000694:	230a      	movs	r3, #10
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fc15 	bl	8001ed8 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006b4:	f000 f902 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2303      	movs	r3, #3
 80006be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	2104      	movs	r1, #4
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f815 	bl	8002700 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006dc:	f000 f8ee 	bl	80008bc <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3758      	adds	r7, #88	; 0x58
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_CAN1_Init+0x68>)
 80006ee:	4a19      	ldr	r2, [pc, #100]	; (8000754 <MX_CAN1_Init+0x6c>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_CAN1_Init+0x68>)
 80006f4:	2210      	movs	r2, #16
 80006f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_CAN1_Init+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_CAN1_Init+0x68>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_CAN1_Init+0x68>)
 8000706:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800070a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_CAN1_Init+0x68>)
 800070e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000712:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_CAN1_Init+0x68>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_CAN1_Init+0x68>)
 800071c:	2200      	movs	r2, #0
 800071e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_CAN1_Init+0x68>)
 8000722:	2200      	movs	r2, #0
 8000724:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_CAN1_Init+0x68>)
 8000728:	2200      	movs	r2, #0
 800072a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_CAN1_Init+0x68>)
 800072e:	2200      	movs	r2, #0
 8000730:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_CAN1_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_CAN1_Init+0x68>)
 800073a:	f000 fa9b 	bl	8000c74 <HAL_CAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 f8ba 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  Boot_CAN();
 8000748:	f7ff fec6 	bl	80004d8 <Boot_CAN>
  /* USER CODE END CAN1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000028 	.word	0x20000028
 8000754:	40006400 	.word	0x40006400

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <MX_USART2_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x58>)
 800079c:	f002 fff6 	bl	800378c <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f889 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000050 	.word	0x20000050
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a2a      	ldr	r2, [pc, #168]	; (800087c <MX_GPIO_Init+0xc4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a24      	ldr	r2, [pc, #144]	; (800087c <MX_GPIO_Init+0xc4>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_GPIO_Init+0xc4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a1e      	ldr	r2, [pc, #120]	; (800087c <MX_GPIO_Init+0xc4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_GPIO_Init+0xc4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_GPIO_Init+0xc4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <MX_GPIO_Init+0xc4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_GPIO_Init+0xc4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f001 fab9 	bl	8001dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000840:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <MX_GPIO_Init+0xc8>)
 8000852:	f001 f931 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000856:	2320      	movs	r3, #32
 8000858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f001 f922 	bl	8001ab8 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	48000800 	.word	0x48000800

08000884 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	CAN_Message_Received();
 800088c:	f7ff fe88 	bl	80005a0 <CAN_Message_Received>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d101      	bne.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008aa:	f000 f9c3 	bl	8000c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40012c00 	.word	0x40012c00

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6613      	str	r3, [r2, #96]	; 0x60
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <HAL_CAN_MspInit+0x8c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d130      	bne.n	8000994 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <HAL_CAN_MspInit+0x90>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a1a      	ldr	r2, [pc, #104]	; (80009a0 <HAL_CAN_MspInit+0x90>)
 8000938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_CAN_MspInit+0x90>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_CAN_MspInit+0x90>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <HAL_CAN_MspInit+0x90>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_CAN_MspInit+0x90>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000962:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000974:	230a      	movs	r3, #10
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <HAL_CAN_MspInit+0x94>)
 8000980:	f001 f89a 	bl	8001ab8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2014      	movs	r0, #20
 800098a:	f001 f86b 	bl	8001a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800098e:	2014      	movs	r0, #20
 8000990:	f001 f884 	bl	8001a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40006400 	.word	0x40006400
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000400 	.word	0x48000400

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0a4      	sub	sp, #144	; 0x90
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2268      	movs	r2, #104	; 0x68
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 fb87 	bl	80040dc <memset>
  if(huart->Instance==USART2)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <HAL_UART_MspInit+0xb0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d13a      	bne.n	8000a4e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d8:	2302      	movs	r3, #2
 80009da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009dc:	2300      	movs	r3, #0
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 f8e1 	bl	8002bac <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f0:	f7ff ff64 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f8:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 80009fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fe:	6593      	str	r3, [r2, #88]	; 0x58
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 8000a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0xb4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a24:	230c      	movs	r3, #12
 8000a26:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a44:	4619      	mov	r1, r3
 8000a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4a:	f001 f835 	bl	8001ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3790      	adds	r7, #144	; 0x90
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08c      	sub	sp, #48	; 0x30
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2019      	movs	r0, #25
 8000a76:	f000 fff5 	bl	8001a64 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f001 f80e 	bl	8001a9c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <HAL_InitTick+0x9c>)
 8000a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a84:	4a1d      	ldr	r2, [pc, #116]	; (8000afc <HAL_InitTick+0x9c>)
 8000a86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_InitTick+0x9c>)
 8000a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a98:	f107 0210 	add.w	r2, r7, #16
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fff0 	bl	8002a88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000aa8:	f001 ffd8 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8000aac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <HAL_InitTick+0xa0>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	0c9b      	lsrs	r3, r3, #18
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_InitTick+0xa4>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <HAL_InitTick+0xa8>)
 8000ac0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_InitTick+0xa4>)
 8000ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_InitTick+0xa4>)
 8000acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ace:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_InitTick+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_InitTick+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <HAL_InitTick+0xa4>)
 8000ade:	f002 fbc3 	bl	8003268 <HAL_TIM_Base_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d104      	bne.n	8000af2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <HAL_InitTick+0xa4>)
 8000aea:	f002 fc1f 	bl	800332c <HAL_TIM_Base_Start_IT>
 8000aee:	4603      	mov	r3, r0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3730      	adds	r7, #48	; 0x30
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000
 8000b00:	431bde83 	.word	0x431bde83
 8000b04:	200000d4 	.word	0x200000d4
 8000b08:	40012c00 	.word	0x40012c00

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <CAN1_RX0_IRQHandler+0x10>)
 8000b6a:	f000 fc94 	bl	8001496 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000028 	.word	0x20000028

08000b78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b7e:	f002 fc31 	bl	80033e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000d4 	.word	0x200000d4

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff ffea 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f003 fa59 	bl	8004094 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fd23 	bl	800062c <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf4:	0800415c 	.word	0x0800415c
  ldr r2, =_sbss
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bfc:	20000124 	.word	0x20000124

08000c00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_IRQHandler>

08000c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 ff1e 	bl	8001a4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c12:	200f      	movs	r0, #15
 8000c14:	f7ff ff24 	bl	8000a60 <HAL_InitTick>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	e001      	b.n	8000c28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c24:	f7ff fe50 	bl	80008c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000120 	.word	0x20000120

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000120 	.word	0x20000120

08000c74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e0ed      	b.n	8000e62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fe3c 	bl	8000910 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f042 0201 	orr.w	r2, r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca8:	f7ff ffd8 	bl	8000c5c <HAL_GetTick>
 8000cac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cae:	e012      	b.n	8000cd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cb0:	f7ff ffd4 	bl	8000c5c <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b0a      	cmp	r3, #10
 8000cbc:	d90b      	bls.n	8000cd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2205      	movs	r2, #5
 8000cce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e0c5      	b.n	8000e62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0e5      	beq.n	8000cb0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 0202 	bic.w	r2, r2, #2
 8000cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cf4:	f7ff ffb2 	bl	8000c5c <HAL_GetTick>
 8000cf8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cfa:	e012      	b.n	8000d22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cfc:	f7ff ffae 	bl	8000c5c <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b0a      	cmp	r3, #10
 8000d08:	d90b      	bls.n	8000d22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2205      	movs	r2, #5
 8000d1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e09f      	b.n	8000e62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1e5      	bne.n	8000cfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7e1b      	ldrb	r3, [r3, #24]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d108      	bne.n	8000d4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e007      	b.n	8000d5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7e5b      	ldrb	r3, [r3, #25]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d108      	bne.n	8000d74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e007      	b.n	8000d84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7e9b      	ldrb	r3, [r3, #26]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d108      	bne.n	8000d9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0220 	orr.w	r2, r2, #32
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	e007      	b.n	8000dae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0220 	bic.w	r2, r2, #32
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7edb      	ldrb	r3, [r3, #27]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d108      	bne.n	8000dc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 0210 	bic.w	r2, r2, #16
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e007      	b.n	8000dd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0210 	orr.w	r2, r2, #16
 8000dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7f1b      	ldrb	r3, [r3, #28]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d108      	bne.n	8000df2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0208 	orr.w	r2, r2, #8
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	e007      	b.n	8000e02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0208 	bic.w	r2, r2, #8
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7f5b      	ldrb	r3, [r3, #29]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d108      	bne.n	8000e1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f042 0204 	orr.w	r2, r2, #4
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e007      	b.n	8000e2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0204 	bic.w	r2, r2, #4
 8000e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	ea42 0103 	orr.w	r1, r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	1e5a      	subs	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b087      	sub	sp, #28
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e80:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d003      	beq.n	8000e90 <HAL_CAN_ConfigFilter+0x26>
 8000e88:	7cfb      	ldrb	r3, [r7, #19]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	f040 80aa 	bne.w	8000fe4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f003 031f 	and.w	r3, r3, #31
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d123      	bne.n	8000f12 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000eec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3248      	adds	r2, #72	; 0x48
 8000ef2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f08:	6979      	ldr	r1, [r7, #20]
 8000f0a:	3348      	adds	r3, #72	; 0x48
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d122      	bne.n	8000f60 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	431a      	orrs	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3248      	adds	r2, #72	; 0x48
 8000f40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f56:	6979      	ldr	r1, [r7, #20]
 8000f58:	3348      	adds	r3, #72	; 0x48
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f7a:	e007      	b.n	8000f8c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d109      	bne.n	8000fa8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fa6:	e007      	b.n	8000fb8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fd6:	f023 0201 	bic.w	r2, r3, #1
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e006      	b.n	8000ff2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
  }
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	371c      	adds	r7, #28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d12e      	bne.n	8001070 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2202      	movs	r2, #2
 8001016:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0201 	bic.w	r2, r2, #1
 8001028:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800102a:	f7ff fe17 	bl	8000c5c <HAL_GetTick>
 800102e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001030:	e012      	b.n	8001058 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001032:	f7ff fe13 	bl	8000c5c <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b0a      	cmp	r3, #10
 800103e:	d90b      	bls.n	8001058 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2205      	movs	r2, #5
 8001050:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e012      	b.n	800107e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1e5      	bne.n	8001032 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	e006      	b.n	800107e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
  }
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001086:	b480      	push	{r7}
 8001088:	b089      	sub	sp, #36	; 0x24
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010a4:	7ffb      	ldrb	r3, [r7, #31]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d003      	beq.n	80010b2 <HAL_CAN_AddTxMessage+0x2c>
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	f040 80ad 	bne.w	800120c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10a      	bne.n	80010d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d105      	bne.n	80010d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8095 	beq.w	80011fc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	0e1b      	lsrs	r3, r3, #24
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80010dc:	2201      	movs	r2, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	409a      	lsls	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10d      	bne.n	800110a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	6809      	ldr	r1, [r1, #0]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3318      	adds	r3, #24
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	440b      	add	r3, r1
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e00f      	b.n	800112a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001114:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800111a:	68f9      	ldr	r1, [r7, #12]
 800111c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800111e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3318      	adds	r3, #24
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	440b      	add	r3, r1
 8001128:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3318      	adds	r3, #24
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	3304      	adds	r3, #4
 800113c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	7d1b      	ldrb	r3, [r3, #20]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d111      	bne.n	800116a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3318      	adds	r3, #24
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	6811      	ldr	r1, [r2, #0]
 800115a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3318      	adds	r3, #24
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3307      	adds	r3, #7
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	061a      	lsls	r2, r3, #24
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3306      	adds	r3, #6
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	041b      	lsls	r3, r3, #16
 800117a:	431a      	orrs	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3305      	adds	r3, #5
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	4313      	orrs	r3, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	3204      	adds	r2, #4
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	4610      	mov	r0, r2
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	6811      	ldr	r1, [r2, #0]
 8001192:	ea43 0200 	orr.w	r2, r3, r0
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	440b      	add	r3, r1
 800119c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3303      	adds	r3, #3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	061a      	lsls	r2, r3, #24
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3302      	adds	r3, #2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	041b      	lsls	r3, r3, #16
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3301      	adds	r3, #1
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	4313      	orrs	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	4610      	mov	r0, r2
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	6811      	ldr	r1, [r2, #0]
 80011c8:	ea43 0200 	orr.w	r2, r3, r0
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	440b      	add	r3, r1
 80011d2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3318      	adds	r3, #24
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4413      	add	r3, r2
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	6811      	ldr	r1, [r2, #0]
 80011ea:	f043 0201 	orr.w	r2, r3, #1
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3318      	adds	r3, #24
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	440b      	add	r3, r1
 80011f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e00e      	b.n	800121a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e006      	b.n	800121a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
  }
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001226:	b480      	push	{r7}
 8001228:	b087      	sub	sp, #28
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d003      	beq.n	800124a <HAL_CAN_GetRxMessage+0x24>
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	2b02      	cmp	r3, #2
 8001246:	f040 80f3 	bne.w	8001430 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10e      	bne.n	800126e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0e7      	b.n	800143e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d107      	bne.n	800128c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0d8      	b.n	800143e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	331b      	adds	r3, #27
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	4413      	add	r3, r2
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0204 	and.w	r2, r3, #4
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10c      	bne.n	80012c4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	331b      	adds	r3, #27
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0d5b      	lsrs	r3, r3, #21
 80012ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	331b      	adds	r3, #27
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4413      	add	r3, r2
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	08db      	lsrs	r3, r3, #3
 80012d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	331b      	adds	r3, #27
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0202 	and.w	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	331b      	adds	r3, #27
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 020f 	and.w	r2, r3, #15
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	331b      	adds	r3, #27
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	4413      	add	r3, r2
 8001316:	3304      	adds	r3, #4
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	331b      	adds	r3, #27
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	4413      	add	r3, r2
 800132e:	3304      	adds	r3, #4
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	0a1a      	lsrs	r2, r3, #8
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	0c1a      	lsrs	r2, r3, #16
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3302      	adds	r3, #2
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4413      	add	r3, r2
 800138e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	0e1a      	lsrs	r2, r3, #24
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3303      	adds	r3, #3
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	3304      	adds	r3, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	0a1a      	lsrs	r2, r3, #8
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	3305      	adds	r3, #5
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	4413      	add	r3, r2
 80013da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0c1a      	lsrs	r2, r3, #16
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3306      	adds	r3, #6
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	4413      	add	r3, r2
 80013f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	0e1a      	lsrs	r2, r3, #24
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	3307      	adds	r3, #7
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d108      	bne.n	800141c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0220 	orr.w	r2, r2, #32
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	e007      	b.n	800142c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0220 	orr.w	r2, r2, #32
 800142a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e006      	b.n	800143e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
  }
}
 800143e:	4618      	mov	r0, r3
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800145a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d002      	beq.n	8001468 <HAL_CAN_ActivateNotification+0x1e>
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d109      	bne.n	800147c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6959      	ldr	r1, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e006      	b.n	800148a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
  }
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b08a      	sub	sp, #40	; 0x28
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d07c      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d023      	beq.n	800152e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f983 	bl	8001804 <HAL_CAN_TxMailbox0CompleteCallback>
 80014fe:	e016      	b.n	800152e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d004      	beq.n	8001514 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
 8001512:	e00c      	b.n	800152e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
 8001526:	e002      	b.n	800152e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f989 	bl	8001840 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d024      	beq.n	8001582 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001540:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f963 	bl	8001818 <HAL_CAN_TxMailbox1CompleteCallback>
 8001552:	e016      	b.n	8001582 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
 8001566:	e00c      	b.n	8001582 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
 800157a:	e002      	b.n	8001582 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f969 	bl	8001854 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d024      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001594:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f943 	bl	800182c <HAL_CAN_TxMailbox2CompleteCallback>
 80015a6:	e016      	b.n	80015d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ba:	e00c      	b.n	80015d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
 80015ce:	e002      	b.n	80015d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f949 	bl	8001868 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2210      	movs	r2, #16
 80015f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00b      	beq.n	800161c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2208      	movs	r2, #8
 8001614:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f930 	bl	800187c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff f925 	bl	8000884 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00c      	beq.n	800165e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001654:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2210      	movs	r2, #16
 800165c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d00b      	beq.n	8001680 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d006      	beq.n	8001680 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2208      	movs	r2, #8
 8001678:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f912 	bl	80018a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	2b00      	cmp	r3, #0
 8001688:	d009      	beq.n	800169e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f8f9 	bl	8001890 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00b      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2210      	movs	r2, #16
 80016b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8fc 	bl	80018b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2208      	movs	r2, #8
 80016da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f8f5 	bl	80018cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d07b      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d072      	beq.n	80017dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001750:	2b00      	cmp	r3, #0
 8001752:	d043      	beq.n	80017dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d03e      	beq.n	80017dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001764:	2b60      	cmp	r3, #96	; 0x60
 8001766:	d02b      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x32a>
 8001768:	2b60      	cmp	r3, #96	; 0x60
 800176a:	d82e      	bhi.n	80017ca <HAL_CAN_IRQHandler+0x334>
 800176c:	2b50      	cmp	r3, #80	; 0x50
 800176e:	d022      	beq.n	80017b6 <HAL_CAN_IRQHandler+0x320>
 8001770:	2b50      	cmp	r3, #80	; 0x50
 8001772:	d82a      	bhi.n	80017ca <HAL_CAN_IRQHandler+0x334>
 8001774:	2b40      	cmp	r3, #64	; 0x40
 8001776:	d019      	beq.n	80017ac <HAL_CAN_IRQHandler+0x316>
 8001778:	2b40      	cmp	r3, #64	; 0x40
 800177a:	d826      	bhi.n	80017ca <HAL_CAN_IRQHandler+0x334>
 800177c:	2b30      	cmp	r3, #48	; 0x30
 800177e:	d010      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x30c>
 8001780:	2b30      	cmp	r3, #48	; 0x30
 8001782:	d822      	bhi.n	80017ca <HAL_CAN_IRQHandler+0x334>
 8001784:	2b10      	cmp	r3, #16
 8001786:	d002      	beq.n	800178e <HAL_CAN_IRQHandler+0x2f8>
 8001788:	2b20      	cmp	r3, #32
 800178a:	d005      	beq.n	8001798 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800178c:	e01d      	b.n	80017ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001796:	e019      	b.n	80017cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017a0:	e014      	b.n	80017cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	f043 0320 	orr.w	r3, r3, #32
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017aa:	e00f      	b.n	80017cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017b4:	e00a      	b.n	80017cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017be:	e005      	b.n	80017cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017c8:	e000      	b.n	80017cc <HAL_CAN_IRQHandler+0x336>
            break;
 80017ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699a      	ldr	r2, [r3, #24]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2204      	movs	r2, #4
 80017e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f872 	bl	80018e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff4c 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a76:	f7ff ff61 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001a7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	6978      	ldr	r0, [r7, #20]
 8001a82:	f7ff ffb1 	bl	80019e8 <NVIC_EncodePriority>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff80 	bl	8001994 <__NVIC_SetPriority>
}
 8001a94:	bf00      	nop
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff54 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	e154      	b.n	8001d72 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8146 	beq.w	8001d6c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d005      	beq.n	8001af8 <HAL_GPIO_Init+0x40>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d130      	bne.n	8001b5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b2e:	2201      	movs	r2, #1
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	091b      	lsrs	r3, r3, #4
 8001b44:	f003 0201 	and.w	r2, r3, #1
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d017      	beq.n	8001b96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d123      	bne.n	8001bea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	08da      	lsrs	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3208      	adds	r2, #8
 8001baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0203 	and.w	r2, r3, #3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 80a0 	beq.w	8001d6c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2c:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <HAL_GPIO_Init+0x2d8>)
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c30:	4a57      	ldr	r2, [pc, #348]	; (8001d90 <HAL_GPIO_Init+0x2d8>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6613      	str	r3, [r2, #96]	; 0x60
 8001c38:	4b55      	ldr	r3, [pc, #340]	; (8001d90 <HAL_GPIO_Init+0x2d8>)
 8001c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c44:	4a53      	ldr	r2, [pc, #332]	; (8001d94 <HAL_GPIO_Init+0x2dc>)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c6e:	d019      	beq.n	8001ca4 <HAL_GPIO_Init+0x1ec>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a49      	ldr	r2, [pc, #292]	; (8001d98 <HAL_GPIO_Init+0x2e0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_GPIO_Init+0x1e8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <HAL_GPIO_Init+0x2e4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00d      	beq.n	8001c9c <HAL_GPIO_Init+0x1e4>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a47      	ldr	r2, [pc, #284]	; (8001da0 <HAL_GPIO_Init+0x2e8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d007      	beq.n	8001c98 <HAL_GPIO_Init+0x1e0>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a46      	ldr	r2, [pc, #280]	; (8001da4 <HAL_GPIO_Init+0x2ec>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_GPIO_Init+0x1dc>
 8001c90:	2304      	movs	r3, #4
 8001c92:	e008      	b.n	8001ca6 <HAL_GPIO_Init+0x1ee>
 8001c94:	2307      	movs	r3, #7
 8001c96:	e006      	b.n	8001ca6 <HAL_GPIO_Init+0x1ee>
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e004      	b.n	8001ca6 <HAL_GPIO_Init+0x1ee>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e002      	b.n	8001ca6 <HAL_GPIO_Init+0x1ee>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_GPIO_Init+0x1ee>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	f002 0203 	and.w	r2, r2, #3
 8001cac:	0092      	lsls	r2, r2, #2
 8001cae:	4093      	lsls	r3, r2
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cb6:	4937      	ldr	r1, [pc, #220]	; (8001d94 <HAL_GPIO_Init+0x2dc>)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cc4:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ce8:	4a2f      	ldr	r2, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d12:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d3c:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f aea3 	bne.w	8001ac8 <HAL_GPIO_Init+0x10>
  }
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010000 	.word	0x40010000
 8001d98:	48000400 	.word	0x48000400
 8001d9c:	48000800 	.word	0x48000800
 8001da0:	48000c00 	.word	0x48000c00
 8001da4:	48001000 	.word	0x48001000
 8001da8:	40010400 	.word	0x40010400

08001dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
 8001db8:	4613      	mov	r3, r2
 8001dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dbc:	787b      	ldrb	r3, [r7, #1]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc8:	e002      	b.n	8001dd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4013      	ands	r3, r2
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43d9      	mvns	r1, r3
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40007000 	.word	0x40007000

08001e2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e3a:	d130      	bne.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e48:	d038      	beq.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e52:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2232      	movs	r2, #50	; 0x32
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	0c9b      	lsrs	r3, r3, #18
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e70:	e002      	b.n	8001e78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e84:	d102      	bne.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f2      	bne.n	8001e72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e98:	d110      	bne.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e00f      	b.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eaa:	d007      	beq.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eac:	4b07      	ldr	r3, [pc, #28]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb4:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	431bde83 	.word	0x431bde83

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f000 bc02 	b.w	80026f0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eec:	4b96      	ldr	r3, [pc, #600]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef6:	4b94      	ldr	r3, [pc, #592]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80e4 	beq.w	80020d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4c>
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	f040 808b 	bne.w	8002032 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	f040 8087 	bne.w	8002032 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f24:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_OscConfig+0x64>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e3d9      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	4b81      	ldr	r3, [pc, #516]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <HAL_RCC_OscConfig+0x7e>
 8001f4c:	4b7e      	ldr	r3, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f54:	e005      	b.n	8001f62 <HAL_RCC_OscConfig+0x8a>
 8001f56:	4b7c      	ldr	r3, [pc, #496]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d223      	bcs.n	8001fae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fdbe 	bl	8002aec <RCC_SetFlashLatencyFromMSIRange>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e3ba      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7a:	4b73      	ldr	r3, [pc, #460]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a72      	ldr	r2, [pc, #456]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b70      	ldr	r3, [pc, #448]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	496d      	ldr	r1, [pc, #436]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	4968      	ldr	r1, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e025      	b.n	8001ffa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fae:	4b66      	ldr	r3, [pc, #408]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a65      	ldr	r2, [pc, #404]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4960      	ldr	r1, [pc, #384]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fcc:	4b5e      	ldr	r3, [pc, #376]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	495b      	ldr	r1, [pc, #364]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 fd7e 	bl	8002aec <RCC_SetFlashLatencyFromMSIRange>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e37a      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ffa:	f000 fc81 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4602      	mov	r2, r0
 8002000:	4b51      	ldr	r3, [pc, #324]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	4950      	ldr	r1, [pc, #320]	; (800214c <HAL_RCC_OscConfig+0x274>)
 800200c:	5ccb      	ldrb	r3, [r1, r3]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_RCC_OscConfig+0x278>)
 8002018:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800201a:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <HAL_RCC_OscConfig+0x27c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fd1e 	bl	8000a60 <HAL_InitTick>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d052      	beq.n	80020d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	e35e      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d032      	beq.n	80020a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800203a:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002046:	f7fe fe09 	bl	8000c5c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800204e:	f7fe fe05 	bl	8000c5c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e347      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800206c:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a35      	ldr	r2, [pc, #212]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002072:	f043 0308 	orr.w	r3, r3, #8
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4930      	ldr	r1, [pc, #192]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	492b      	ldr	r1, [pc, #172]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
 800209e:	e01a      	b.n	80020d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fdd6 	bl	8000c5c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b4:	f7fe fdd2 	bl	8000c5c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e314      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x1dc>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d073      	beq.n	80021ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_OscConfig+0x21c>
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d10e      	bne.n	800210c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d10b      	bne.n	800210c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d063      	beq.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d15f      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e2f1      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d106      	bne.n	8002124 <HAL_RCC_OscConfig+0x24c>
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e025      	b.n	8002170 <HAL_RCC_OscConfig+0x298>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212c:	d114      	bne.n	8002158 <HAL_RCC_OscConfig+0x280>
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a02      	ldr	r2, [pc, #8]	; (8002148 <HAL_RCC_OscConfig+0x270>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e013      	b.n	8002170 <HAL_RCC_OscConfig+0x298>
 8002148:	40021000 	.word	0x40021000
 800214c:	08004104 	.word	0x08004104
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004
 8002158:	4ba0      	ldr	r3, [pc, #640]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a9f      	ldr	r2, [pc, #636]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b9d      	ldr	r3, [pc, #628]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a9c      	ldr	r2, [pc, #624]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7fe fd70 	bl	8000c5c <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002180:	f7fe fd6c 	bl	8000c5c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e2ae      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	4b92      	ldr	r3, [pc, #584]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x2a8>
 800219e:	e014      	b.n	80021ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe fd5c 	bl	8000c5c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe fd58 	bl	8000c5c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e29a      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	4b88      	ldr	r3, [pc, #544]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x2d0>
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d060      	beq.n	8002298 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_OscConfig+0x310>
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d116      	bne.n	8002216 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e8:	4b7c      	ldr	r3, [pc, #496]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_OscConfig+0x328>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e277      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b76      	ldr	r3, [pc, #472]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	4973      	ldr	r1, [pc, #460]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002214:	e040      	b.n	8002298 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d023      	beq.n	8002266 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221e:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6e      	ldr	r2, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe fd17 	bl	8000c5c <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7fe fd13 	bl	8000c5c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e255      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	4b65      	ldr	r3, [pc, #404]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0f0      	beq.n	8002232 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002250:	4b62      	ldr	r3, [pc, #392]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	495f      	ldr	r1, [pc, #380]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
 8002264:	e018      	b.n	8002298 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002266:	4b5d      	ldr	r3, [pc, #372]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a5c      	ldr	r2, [pc, #368]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800226c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7fe fcf3 	bl	8000c5c <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe fcef 	bl	8000c5c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e231      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03c      	beq.n	800231e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ac:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b2:	4a4a      	ldr	r2, [pc, #296]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe fcce 	bl	8000c5c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe fcca 	bl	8000c5c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e20c      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d6:	4b41      	ldr	r3, [pc, #260]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ef      	beq.n	80022c4 <HAL_RCC_OscConfig+0x3ec>
 80022e4:	e01b      	b.n	800231e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ec:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe fcb1 	bl	8000c5c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe fcad 	bl	8000c5c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1ef      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ef      	bne.n	80022fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80a6 	beq.w	8002478 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10d      	bne.n	8002358 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233c:	4b27      	ldr	r3, [pc, #156]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	4a26      	ldr	r2, [pc, #152]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002346:	6593      	str	r3, [r2, #88]	; 0x58
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002354:	2301      	movs	r3, #1
 8002356:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCC_OscConfig+0x508>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d118      	bne.n	8002396 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_RCC_OscConfig+0x508>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_RCC_OscConfig+0x508>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002370:	f7fe fc74 	bl	8000c5c <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7fe fc70 	bl	8000c5c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e1b2      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_RCC_OscConfig+0x508>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4d8>
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ae:	e029      	b.n	8002404 <HAL_RCC_OscConfig+0x52c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d115      	bne.n	80023e4 <HAL_RCC_OscConfig+0x50c>
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	4a07      	ldr	r2, [pc, #28]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	4a03      	ldr	r2, [pc, #12]	; (80023dc <HAL_RCC_OscConfig+0x504>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d8:	e014      	b.n	8002404 <HAL_RCC_OscConfig+0x52c>
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40007000 	.word	0x40007000
 80023e4:	4b9a      	ldr	r3, [pc, #616]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	4a99      	ldr	r2, [pc, #612]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f4:	4b96      	ldr	r3, [pc, #600]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	4a95      	ldr	r2, [pc, #596]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d016      	beq.n	800243a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe fc26 	bl	8000c5c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fc22 	bl	8000c5c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e162      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242a:	4b89      	ldr	r3, [pc, #548]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ed      	beq.n	8002414 <HAL_RCC_OscConfig+0x53c>
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7fe fc0f 	bl	8000c5c <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fc0b 	bl	8000c5c <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e14b      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002458:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1ed      	bne.n	8002442 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002466:	7ffb      	ldrb	r3, [r7, #31]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246c:	4b78      	ldr	r3, [pc, #480]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	4a77      	ldr	r2, [pc, #476]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002476:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d03c      	beq.n	80024fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800248c:	4b70      	ldr	r3, [pc, #448]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800248e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002492:	4a6f      	ldr	r2, [pc, #444]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe fbde 	bl	8000c5c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a4:	f7fe fbda 	bl	8000c5c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e11c      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024b6:	4b66      	ldr	r3, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80024b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <HAL_RCC_OscConfig+0x5cc>
 80024c4:	e01b      	b.n	80024fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024c6:	4b62      	ldr	r3, [pc, #392]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80024c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024cc:	4a60      	ldr	r2, [pc, #384]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe fbc1 	bl	8000c5c <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024de:	f7fe fbbd 	bl	8000c5c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0ff      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f0:	4b57      	ldr	r3, [pc, #348]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80024f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ef      	bne.n	80024de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80f3 	beq.w	80026ee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	2b02      	cmp	r3, #2
 800250e:	f040 80c9 	bne.w	80026a4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002512:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 0203 	and.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	429a      	cmp	r2, r3
 8002524:	d12c      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	3b01      	subs	r3, #1
 8002532:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d123      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d11b      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d113      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	085b      	lsrs	r3, r3, #1
 8002564:	3b01      	subs	r3, #1
 8002566:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d109      	bne.n	8002580 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d06b      	beq.n	8002658 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d062      	beq.n	800264c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002586:	4b32      	ldr	r3, [pc, #200]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0ac      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002596:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800259c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a2:	f7fe fb5b 	bl	8000c5c <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025aa:	f7fe fb57 	bl	8000c5c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e099      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_OscConfig+0x77c>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025d8:	3a01      	subs	r2, #1
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	4311      	orrs	r1, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025e2:	0212      	lsls	r2, r2, #8
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ea:	0852      	lsrs	r2, r2, #1
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0552      	lsls	r2, r2, #21
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025f6:	0852      	lsrs	r2, r2, #1
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0652      	lsls	r2, r2, #25
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002602:	06d2      	lsls	r2, r2, #27
 8002604:	430a      	orrs	r2, r1
 8002606:	4912      	ldr	r1, [pc, #72]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002608:	4313      	orrs	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002624:	f7fe fb1a 	bl	8000c5c <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fb16 	bl	8000c5c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e058      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_RCC_OscConfig+0x778>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800264a:	e050      	b.n	80026ee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e04f      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
 8002650:	40021000 	.word	0x40021000
 8002654:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d144      	bne.n	80026ee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 800266a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800267c:	f7fe faee 	bl	8000c5c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe faea 	bl	8000c5c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e02c      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x7ac>
 80026a2:	e024      	b.n	80026ee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d01f      	beq.n	80026ea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fad1 	bl	8000c5c <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe facd 	bl	8000c5c <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e00f      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	4905      	ldr	r1, [pc, #20]	; (80026f8 <HAL_RCC_OscConfig+0x820>)
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_OscConfig+0x824>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	60cb      	str	r3, [r1, #12]
 80026e8:	e001      	b.n	80026ee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3720      	adds	r7, #32
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	feeefffc 	.word	0xfeeefffc

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0e7      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b75      	ldr	r3, [pc, #468]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b72      	ldr	r3, [pc, #456]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 0207 	bic.w	r2, r3, #7
 800272a:	4970      	ldr	r1, [pc, #448]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b6e      	ldr	r3, [pc, #440]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0cf      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275c:	429a      	cmp	r2, r3
 800275e:	d908      	bls.n	8002772 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4960      	ldr	r1, [pc, #384]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d04c      	beq.n	8002818 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d121      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0a6      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d115      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e09a      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b6:	4b4e      	ldr	r3, [pc, #312]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e08e      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c6:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e086      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4943      	ldr	r1, [pc, #268]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe fa38 	bl	8000c5c <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fa34 	bl	8000c5c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e06e      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	429a      	cmp	r2, r3
 8002832:	d208      	bcs.n	8002846 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	492b      	ldr	r1, [pc, #172]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d210      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 0207 	bic.w	r2, r3, #7
 800285c:	4923      	ldr	r1, [pc, #140]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCC_ClockConfig+0x1ec>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e036      	b.n	80028e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	4918      	ldr	r1, [pc, #96]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4910      	ldr	r1, [pc, #64]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028b4:	f000 f824 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	490b      	ldr	r1, [pc, #44]	; (80028f4 <HAL_RCC_ClockConfig+0x1f4>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
 80028d0:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1f8>)
 80028d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1fc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe f8c1 	bl	8000a60 <HAL_InitTick>
 80028de:	4603      	mov	r3, r0
 80028e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80028e2:	7afb      	ldrb	r3, [r7, #11]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08004104 	.word	0x08004104
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000004 	.word	0x20000004

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290e:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x34>
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d121      	bne.n	8002972 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d11e      	bne.n	8002972 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002934:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e005      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002950:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800295c:	4a2b      	ldr	r2, [pc, #172]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x10c>)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10d      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d102      	bne.n	800297e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x110>)
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	e004      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d101      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002984:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002986:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d134      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d003      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0xac>
 80029a4:	e005      	b.n	80029b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x110>)
 80029a8:	617b      	str	r3, [r7, #20]
      break;
 80029aa:	e005      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ae:	617b      	str	r3, [r7, #20]
      break;
 80029b0:	e002      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	617b      	str	r3, [r7, #20]
      break;
 80029b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	3301      	adds	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	fb03 f202 	mul.w	r2, r3, r2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	0e5b      	lsrs	r3, r3, #25
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	3301      	adds	r3, #1
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029f8:	69bb      	ldr	r3, [r7, #24]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	0800411c 	.word	0x0800411c
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	007a1200 	.word	0x007a1200

08002a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4904      	ldr	r1, [pc, #16]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	08004114 	.word	0x08004114

08002a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a60:	f7ff ffda 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	0adb      	lsrs	r3, r3, #11
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4904      	ldr	r1, [pc, #16]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08004114 	.word	0x08004114

08002a88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	220f      	movs	r2, #15
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0203 	and.w	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	08db      	lsrs	r3, r3, #3
 8002ac2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002aca:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_RCC_GetClockConfig+0x60>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0207 	and.w	r2, r3, #7
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40022000 	.word	0x40022000

08002aec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002af8:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b04:	f7ff f984 	bl	8001e10 <HAL_PWREx_GetVoltageRange>
 8002b08:	6178      	str	r0, [r7, #20]
 8002b0a:	e014      	b.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b16:	6593      	str	r3, [r2, #88]	; 0x58
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b24:	f7ff f974 	bl	8001e10 <HAL_PWREx_GetVoltageRange>
 8002b28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3c:	d10b      	bne.n	8002b56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d919      	bls.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2ba0      	cmp	r3, #160	; 0xa0
 8002b48:	d902      	bls.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	e013      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b50:	2301      	movs	r3, #1
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	e010      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b80      	cmp	r3, #128	; 0x80
 8002b5a:	d902      	bls.n	8002b62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	e00a      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d102      	bne.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b68:	2302      	movs	r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e004      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b70      	cmp	r3, #112	; 0x70
 8002b72:	d101      	bne.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b74:	2301      	movs	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 0207 	bic.w	r2, r3, #7
 8002b80:	4909      	ldr	r1, [pc, #36]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d001      	beq.n	8002b9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40022000 	.word	0x40022000

08002bac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bb8:	2300      	movs	r3, #0
 8002bba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d031      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bd0:	d01a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002bd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bd6:	d814      	bhi.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d009      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002be0:	d10f      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002be2:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4a5c      	ldr	r2, [pc, #368]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bee:	e00c      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fa44 	bl	8003084 <RCCEx_PLLSAI1_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c00:	e003      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	74fb      	strb	r3, [r7, #19]
      break;
 8002c06:	e000      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c10:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	494e      	ldr	r1, [pc, #312]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c26:	e001      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 809e 	beq.w	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c3e:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c60:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c70:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a39      	ldr	r2, [pc, #228]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c7c:	f7fd ffee 	bl	8000c5c <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c82:	e009      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fd ffea 	bl	8000c5c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	74fb      	strb	r3, [r7, #19]
        break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d15a      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01e      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd2:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cf2:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d016      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fd ffaa 	bl	8000c5c <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fd ffa6 	bl	8000c5c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d902      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	74fb      	strb	r3, [r7, #19]
            break;
 8002d22:	e006      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0ec      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d46:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d4e:	e009      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
 8002d54:	e006      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d64:	7c7b      	ldrb	r3, [r7, #17]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b9e      	ldr	r3, [pc, #632]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	4a9d      	ldr	r2, [pc, #628]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d82:	4b98      	ldr	r3, [pc, #608]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f023 0203 	bic.w	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4994      	ldr	r1, [pc, #592]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da4:	4b8f      	ldr	r3, [pc, #572]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 020c 	bic.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	498c      	ldr	r1, [pc, #560]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc6:	4b87      	ldr	r3, [pc, #540]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	4983      	ldr	r1, [pc, #524]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002de8:	4b7e      	ldr	r3, [pc, #504]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	497b      	ldr	r1, [pc, #492]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e0a:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	4972      	ldr	r1, [pc, #456]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e2c:	4b6d      	ldr	r3, [pc, #436]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	496a      	ldr	r1, [pc, #424]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e4e:	4b65      	ldr	r3, [pc, #404]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5c:	4961      	ldr	r1, [pc, #388]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e70:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	4959      	ldr	r1, [pc, #356]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e92:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	4950      	ldr	r1, [pc, #320]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	4948      	ldr	r1, [pc, #288]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ed6:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002edc:	f023 0203 	bic.w	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	493f      	ldr	r1, [pc, #252]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d028      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f06:	4937      	ldr	r1, [pc, #220]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f16:	d106      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f18:	4b32      	ldr	r3, [pc, #200]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a31      	ldr	r2, [pc, #196]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f22:	60d3      	str	r3, [r2, #12]
 8002f24:	e011      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f8a4 	bl	8003084 <RCCEx_PLLSAI1_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d028      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	491f      	ldr	r1, [pc, #124]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f74:	d106      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f80:	60d3      	str	r3, [r2, #12]
 8002f82:	e011      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2101      	movs	r1, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f875 	bl	8003084 <RCCEx_PLLSAI1_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f9e:	7cfb      	ldrb	r3, [r7, #19]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d02b      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd2:	d109      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a02      	ldr	r2, [pc, #8]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fde:	60d3      	str	r3, [r2, #12]
 8002fe0:	e014      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ff0:	d10c      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f843 	bl	8003084 <RCCEx_PLLSAI1_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01c      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	4916      	ldr	r1, [pc, #88]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003036:	d10c      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	2102      	movs	r1, #2
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f820 	bl	8003084 <RCCEx_PLLSAI1_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800304e:	7cfb      	ldrb	r3, [r7, #19]
 8003050:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306c:	4904      	ldr	r1, [pc, #16]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003074:	7cbb      	ldrb	r3, [r7, #18]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000

08003084 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003092:	4b74      	ldr	r3, [pc, #464]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d018      	beq.n	80030d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800309e:	4b71      	ldr	r3, [pc, #452]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0203 	and.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d10d      	bne.n	80030ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
       ||
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030b6:	4b6b      	ldr	r3, [pc, #428]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
       ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d047      	beq.n	800315a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e044      	b.n	800315a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d018      	beq.n	800310a <RCCEx_PLLSAI1_Config+0x86>
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d825      	bhi.n	8003128 <RCCEx_PLLSAI1_Config+0xa4>
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d002      	beq.n	80030e6 <RCCEx_PLLSAI1_Config+0x62>
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d009      	beq.n	80030f8 <RCCEx_PLLSAI1_Config+0x74>
 80030e4:	e020      	b.n	8003128 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11d      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f6:	e01a      	b.n	800312e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030f8:	4b5a      	ldr	r3, [pc, #360]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d116      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003108:	e013      	b.n	8003132 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800310a:	4b56      	ldr	r3, [pc, #344]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003116:	4b53      	ldr	r3, [pc, #332]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003126:	e006      	b.n	8003136 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e004      	b.n	8003138 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312e:	bf00      	nop
 8003130:	e002      	b.n	8003138 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003132:	bf00      	nop
 8003134:	e000      	b.n	8003138 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003136:	bf00      	nop
    }

    if(status == HAL_OK)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800313e:	4b49      	ldr	r3, [pc, #292]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	430b      	orrs	r3, r1
 8003154:	4943      	ldr	r1, [pc, #268]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003156:	4313      	orrs	r3, r2
 8003158:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d17c      	bne.n	800325a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003160:	4b40      	ldr	r3, [pc, #256]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a3f      	ldr	r2, [pc, #252]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003166:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800316a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fd fd76 	bl	8000c5c <HAL_GetTick>
 8003170:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003172:	e009      	b.n	8003188 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003174:	f7fd fd72 	bl	8000c5c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d902      	bls.n	8003188 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	73fb      	strb	r3, [r7, #15]
        break;
 8003186:	e005      	b.n	8003194 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ef      	bne.n	8003174 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d15f      	bne.n	800325a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d110      	bne.n	80031c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a0:	4b30      	ldr	r3, [pc, #192]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6892      	ldr	r2, [r2, #8]
 80031b0:	0211      	lsls	r1, r2, #8
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68d2      	ldr	r2, [r2, #12]
 80031b6:	06d2      	lsls	r2, r2, #27
 80031b8:	430a      	orrs	r2, r1
 80031ba:	492a      	ldr	r1, [pc, #168]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	610b      	str	r3, [r1, #16]
 80031c0:	e027      	b.n	8003212 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d112      	bne.n	80031ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c8:	4b26      	ldr	r3, [pc, #152]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6892      	ldr	r2, [r2, #8]
 80031d8:	0211      	lsls	r1, r2, #8
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6912      	ldr	r2, [r2, #16]
 80031de:	0852      	lsrs	r2, r2, #1
 80031e0:	3a01      	subs	r2, #1
 80031e2:	0552      	lsls	r2, r2, #21
 80031e4:	430a      	orrs	r2, r1
 80031e6:	491f      	ldr	r1, [pc, #124]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	610b      	str	r3, [r1, #16]
 80031ec:	e011      	b.n	8003212 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6892      	ldr	r2, [r2, #8]
 80031fe:	0211      	lsls	r1, r2, #8
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6952      	ldr	r2, [r2, #20]
 8003204:	0852      	lsrs	r2, r2, #1
 8003206:	3a01      	subs	r2, #1
 8003208:	0652      	lsls	r2, r2, #25
 800320a:	430a      	orrs	r2, r1
 800320c:	4915      	ldr	r1, [pc, #84]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320e:	4313      	orrs	r3, r2
 8003210:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003212:	4b14      	ldr	r3, [pc, #80]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003218:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800321c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fd fd1d 	bl	8000c5c <HAL_GetTick>
 8003222:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003224:	e009      	b.n	800323a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003226:	f7fd fd19 	bl	8000c5c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d902      	bls.n	800323a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	73fb      	strb	r3, [r7, #15]
          break;
 8003238:	e005      	b.n	8003246 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800323a:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ef      	beq.n	8003226 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d106      	bne.n	800325a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003256:	4313      	orrs	r3, r2
 8003258:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000

08003268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e049      	b.n	800330e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f841 	bl	8003316 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 f9e4 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e040      	b.n	80033c6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <HAL_TIM_Base_Start_IT+0xa8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x58>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d009      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x58>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <HAL_TIM_Base_Start_IT+0xac>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x58>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <HAL_TIM_Base_Start_IT+0xb0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d115      	bne.n	80033b0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800338c:	4013      	ands	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d015      	beq.n	80033c2 <HAL_TIM_Base_Start_IT+0x96>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d011      	beq.n	80033c2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	e008      	b.n	80033c2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e000      	b.n	80033c4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	00010007 	.word	0x00010007

080033e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0202 	mvn.w	r2, #2
 8003410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f905 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8f7 	bl	8003622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f908 	bl	800364a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0204 	mvn.w	r2, #4
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8db 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8cd 	bl	8003622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8de 	bl	800364a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0208 	mvn.w	r2, #8
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2204      	movs	r2, #4
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8b1 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8a3 	bl	8003622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f8b4 	bl	800364a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b10      	cmp	r3, #16
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0210 	mvn.w	r2, #16
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2208      	movs	r2, #8
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f887 	bl	8003636 <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f879 	bl	8003622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f88a 	bl	800364a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0201 	mvn.w	r2, #1
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd f998 	bl	8000898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b80      	cmp	r3, #128	; 0x80
 8003574:	d10e      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d107      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800358c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8e8 	bl	8003764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a2:	d10e      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d107      	bne.n	80035c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8db 	bl	8003778 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d10e      	bne.n	80035ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d107      	bne.n	80035ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f838 	bl	800365e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d10e      	bne.n	800361a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b20      	cmp	r3, #32
 8003608:	d107      	bne.n	800361a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f06f 0220 	mvn.w	r2, #32
 8003612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f89b 	bl	8003750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a2e      	ldr	r2, [pc, #184]	; (8003740 <TIM_Base_SetConfig+0xcc>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0x28>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x28>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <TIM_Base_SetConfig+0xd0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a23      	ldr	r2, [pc, #140]	; (8003740 <TIM_Base_SetConfig+0xcc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00f      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d00b      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a20      	ldr	r2, [pc, #128]	; (8003744 <TIM_Base_SetConfig+0xd0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <TIM_Base_SetConfig+0xd4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1e      	ldr	r2, [pc, #120]	; (800374c <TIM_Base_SetConfig+0xd8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d108      	bne.n	80036e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <TIM_Base_SetConfig+0xcc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <TIM_Base_SetConfig+0xb0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a0c      	ldr	r2, [pc, #48]	; (8003748 <TIM_Base_SetConfig+0xd4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_Base_SetConfig+0xb0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a0b      	ldr	r2, [pc, #44]	; (800374c <TIM_Base_SetConfig+0xd8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	615a      	str	r2, [r3, #20]
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40000400 	.word	0x40000400
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400

08003750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e040      	b.n	8003820 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd f8fa 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2224      	movs	r2, #36	; 0x24
 80037b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f82c 	bl	8003828 <UART_SetConfig>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e022      	b.n	8003820 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 faa6 	bl	8003d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fb2d 	bl	8003e78 <UART_CheckIdleState>
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800382c:	b08a      	sub	sp, #40	; 0x28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	431a      	orrs	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	431a      	orrs	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	4313      	orrs	r3, r2
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	4ba5      	ldr	r3, [pc, #660]	; (8003aec <UART_SetConfig+0x2c4>)
 8003858:	4013      	ands	r3, r2
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003860:	430b      	orrs	r3, r1
 8003862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a9a      	ldr	r2, [pc, #616]	; (8003af0 <UART_SetConfig+0x2c8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	4313      	orrs	r3, r2
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a91      	ldr	r2, [pc, #580]	; (8003af4 <UART_SetConfig+0x2cc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d126      	bne.n	8003900 <UART_SetConfig+0xd8>
 80038b2:	4b91      	ldr	r3, [pc, #580]	; (8003af8 <UART_SetConfig+0x2d0>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d81b      	bhi.n	80038f8 <UART_SetConfig+0xd0>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <UART_SetConfig+0xa0>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038f1 	.word	0x080038f1
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038de:	e0d6      	b.n	8003a8e <UART_SetConfig+0x266>
 80038e0:	2302      	movs	r3, #2
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e6:	e0d2      	b.n	8003a8e <UART_SetConfig+0x266>
 80038e8:	2304      	movs	r3, #4
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ee:	e0ce      	b.n	8003a8e <UART_SetConfig+0x266>
 80038f0:	2308      	movs	r3, #8
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f6:	e0ca      	b.n	8003a8e <UART_SetConfig+0x266>
 80038f8:	2310      	movs	r3, #16
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fe:	e0c6      	b.n	8003a8e <UART_SetConfig+0x266>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a7d      	ldr	r2, [pc, #500]	; (8003afc <UART_SetConfig+0x2d4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d138      	bne.n	800397c <UART_SetConfig+0x154>
 800390a:	4b7b      	ldr	r3, [pc, #492]	; (8003af8 <UART_SetConfig+0x2d0>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f003 030c 	and.w	r3, r3, #12
 8003914:	2b0c      	cmp	r3, #12
 8003916:	d82d      	bhi.n	8003974 <UART_SetConfig+0x14c>
 8003918:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <UART_SetConfig+0xf8>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003955 	.word	0x08003955
 8003924:	08003975 	.word	0x08003975
 8003928:	08003975 	.word	0x08003975
 800392c:	08003975 	.word	0x08003975
 8003930:	08003965 	.word	0x08003965
 8003934:	08003975 	.word	0x08003975
 8003938:	08003975 	.word	0x08003975
 800393c:	08003975 	.word	0x08003975
 8003940:	0800395d 	.word	0x0800395d
 8003944:	08003975 	.word	0x08003975
 8003948:	08003975 	.word	0x08003975
 800394c:	08003975 	.word	0x08003975
 8003950:	0800396d 	.word	0x0800396d
 8003954:	2300      	movs	r3, #0
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e098      	b.n	8003a8e <UART_SetConfig+0x266>
 800395c:	2302      	movs	r3, #2
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003962:	e094      	b.n	8003a8e <UART_SetConfig+0x266>
 8003964:	2304      	movs	r3, #4
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396a:	e090      	b.n	8003a8e <UART_SetConfig+0x266>
 800396c:	2308      	movs	r3, #8
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003972:	e08c      	b.n	8003a8e <UART_SetConfig+0x266>
 8003974:	2310      	movs	r3, #16
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397a:	e088      	b.n	8003a8e <UART_SetConfig+0x266>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a5f      	ldr	r2, [pc, #380]	; (8003b00 <UART_SetConfig+0x2d8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d125      	bne.n	80039d2 <UART_SetConfig+0x1aa>
 8003986:	4b5c      	ldr	r3, [pc, #368]	; (8003af8 <UART_SetConfig+0x2d0>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003990:	2b30      	cmp	r3, #48	; 0x30
 8003992:	d016      	beq.n	80039c2 <UART_SetConfig+0x19a>
 8003994:	2b30      	cmp	r3, #48	; 0x30
 8003996:	d818      	bhi.n	80039ca <UART_SetConfig+0x1a2>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d00a      	beq.n	80039b2 <UART_SetConfig+0x18a>
 800399c:	2b20      	cmp	r3, #32
 800399e:	d814      	bhi.n	80039ca <UART_SetConfig+0x1a2>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <UART_SetConfig+0x182>
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d008      	beq.n	80039ba <UART_SetConfig+0x192>
 80039a8:	e00f      	b.n	80039ca <UART_SetConfig+0x1a2>
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b0:	e06d      	b.n	8003a8e <UART_SetConfig+0x266>
 80039b2:	2302      	movs	r3, #2
 80039b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b8:	e069      	b.n	8003a8e <UART_SetConfig+0x266>
 80039ba:	2304      	movs	r3, #4
 80039bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c0:	e065      	b.n	8003a8e <UART_SetConfig+0x266>
 80039c2:	2308      	movs	r3, #8
 80039c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c8:	e061      	b.n	8003a8e <UART_SetConfig+0x266>
 80039ca:	2310      	movs	r3, #16
 80039cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d0:	e05d      	b.n	8003a8e <UART_SetConfig+0x266>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a4b      	ldr	r2, [pc, #300]	; (8003b04 <UART_SetConfig+0x2dc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d125      	bne.n	8003a28 <UART_SetConfig+0x200>
 80039dc:	4b46      	ldr	r3, [pc, #280]	; (8003af8 <UART_SetConfig+0x2d0>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039e6:	2bc0      	cmp	r3, #192	; 0xc0
 80039e8:	d016      	beq.n	8003a18 <UART_SetConfig+0x1f0>
 80039ea:	2bc0      	cmp	r3, #192	; 0xc0
 80039ec:	d818      	bhi.n	8003a20 <UART_SetConfig+0x1f8>
 80039ee:	2b80      	cmp	r3, #128	; 0x80
 80039f0:	d00a      	beq.n	8003a08 <UART_SetConfig+0x1e0>
 80039f2:	2b80      	cmp	r3, #128	; 0x80
 80039f4:	d814      	bhi.n	8003a20 <UART_SetConfig+0x1f8>
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <UART_SetConfig+0x1d8>
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d008      	beq.n	8003a10 <UART_SetConfig+0x1e8>
 80039fe:	e00f      	b.n	8003a20 <UART_SetConfig+0x1f8>
 8003a00:	2300      	movs	r3, #0
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a06:	e042      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	e03e      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a10:	2304      	movs	r3, #4
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e03a      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a18:	2308      	movs	r3, #8
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e036      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a20:	2310      	movs	r3, #16
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e032      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a30      	ldr	r2, [pc, #192]	; (8003af0 <UART_SetConfig+0x2c8>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d12a      	bne.n	8003a88 <UART_SetConfig+0x260>
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <UART_SetConfig+0x2d0>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a40:	d01a      	beq.n	8003a78 <UART_SetConfig+0x250>
 8003a42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a46:	d81b      	bhi.n	8003a80 <UART_SetConfig+0x258>
 8003a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4c:	d00c      	beq.n	8003a68 <UART_SetConfig+0x240>
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a52:	d815      	bhi.n	8003a80 <UART_SetConfig+0x258>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <UART_SetConfig+0x238>
 8003a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5c:	d008      	beq.n	8003a70 <UART_SetConfig+0x248>
 8003a5e:	e00f      	b.n	8003a80 <UART_SetConfig+0x258>
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a66:	e012      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6e:	e00e      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a70:	2304      	movs	r3, #4
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a76:	e00a      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a78:	2308      	movs	r3, #8
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7e:	e006      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a80:	2310      	movs	r3, #16
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e002      	b.n	8003a8e <UART_SetConfig+0x266>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <UART_SetConfig+0x2c8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	f040 808b 	bne.w	8003bb0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d834      	bhi.n	8003b0c <UART_SetConfig+0x2e4>
 8003aa2:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <UART_SetConfig+0x280>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003acd 	.word	0x08003acd
 8003aac:	08003b0d 	.word	0x08003b0d
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003b0d 	.word	0x08003b0d
 8003ab8:	08003adb 	.word	0x08003adb
 8003abc:	08003b0d 	.word	0x08003b0d
 8003ac0:	08003b0d 	.word	0x08003b0d
 8003ac4:	08003b0d 	.word	0x08003b0d
 8003ac8:	08003ae3 	.word	0x08003ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003acc:	f7fe ffb0 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003ad0:	61f8      	str	r0, [r7, #28]
        break;
 8003ad2:	e021      	b.n	8003b18 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <UART_SetConfig+0x2e0>)
 8003ad6:	61fb      	str	r3, [r7, #28]
        break;
 8003ad8:	e01e      	b.n	8003b18 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ada:	f7fe ff11 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003ade:	61f8      	str	r0, [r7, #28]
        break;
 8003ae0:	e01a      	b.n	8003b18 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae6:	61fb      	str	r3, [r7, #28]
        break;
 8003ae8:	e016      	b.n	8003b18 <UART_SetConfig+0x2f0>
 8003aea:	bf00      	nop
 8003aec:	efff69f3 	.word	0xefff69f3
 8003af0:	40008000 	.word	0x40008000
 8003af4:	40013800 	.word	0x40013800
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40004400 	.word	0x40004400
 8003b00:	40004800 	.word	0x40004800
 8003b04:	40004c00 	.word	0x40004c00
 8003b08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80fa 	beq.w	8003d14 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d305      	bcc.n	8003b3c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d903      	bls.n	8003b44 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b42:	e0e7      	b.n	8003d14 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2200      	movs	r2, #0
 8003b48:	461c      	mov	r4, r3
 8003b4a:	4615      	mov	r5, r2
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	022b      	lsls	r3, r5, #8
 8003b56:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b5a:	0222      	lsls	r2, r4, #8
 8003b5c:	68f9      	ldr	r1, [r7, #12]
 8003b5e:	6849      	ldr	r1, [r1, #4]
 8003b60:	0849      	lsrs	r1, r1, #1
 8003b62:	2000      	movs	r0, #0
 8003b64:	4688      	mov	r8, r1
 8003b66:	4681      	mov	r9, r0
 8003b68:	eb12 0a08 	adds.w	sl, r2, r8
 8003b6c:	eb43 0b09 	adc.w	fp, r3, r9
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b7e:	4650      	mov	r0, sl
 8003b80:	4659      	mov	r1, fp
 8003b82:	f7fc fb27 	bl	80001d4 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b94:	d308      	bcc.n	8003ba8 <UART_SetConfig+0x380>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9c:	d204      	bcs.n	8003ba8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	e0b5      	b.n	8003d14 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bae:	e0b1      	b.n	8003d14 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb8:	d15d      	bne.n	8003c76 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003bba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d827      	bhi.n	8003c12 <UART_SetConfig+0x3ea>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x3a0>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003bfd 	.word	0x08003bfd
 8003bd4:	08003c13 	.word	0x08003c13
 8003bd8:	08003c03 	.word	0x08003c03
 8003bdc:	08003c13 	.word	0x08003c13
 8003be0:	08003c13 	.word	0x08003c13
 8003be4:	08003c13 	.word	0x08003c13
 8003be8:	08003c0b 	.word	0x08003c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7fe ff20 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	61f8      	str	r0, [r7, #28]
        break;
 8003bf2:	e014      	b.n	8003c1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7fe ff32 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8003bf8:	61f8      	str	r0, [r7, #28]
        break;
 8003bfa:	e010      	b.n	8003c1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bfc:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <UART_SetConfig+0x508>)
 8003bfe:	61fb      	str	r3, [r7, #28]
        break;
 8003c00:	e00d      	b.n	8003c1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c02:	f7fe fe7d 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003c06:	61f8      	str	r0, [r7, #28]
        break;
 8003c08:	e009      	b.n	8003c1e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0e:	61fb      	str	r3, [r7, #28]
        break;
 8003c10:	e005      	b.n	8003c1e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d077      	beq.n	8003d14 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005a      	lsls	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	441a      	add	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b0f      	cmp	r3, #15
 8003c3e:	d916      	bls.n	8003c6e <UART_SetConfig+0x446>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c46:	d212      	bcs.n	8003c6e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f023 030f 	bic.w	r3, r3, #15
 8003c50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	8afb      	ldrh	r3, [r7, #22]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	8afa      	ldrh	r2, [r7, #22]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	e052      	b.n	8003d14 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c74:	e04e      	b.n	8003d14 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	d827      	bhi.n	8003cce <UART_SetConfig+0x4a6>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0x45c>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003ca9 	.word	0x08003ca9
 8003c88:	08003cb1 	.word	0x08003cb1
 8003c8c:	08003cb9 	.word	0x08003cb9
 8003c90:	08003ccf 	.word	0x08003ccf
 8003c94:	08003cbf 	.word	0x08003cbf
 8003c98:	08003ccf 	.word	0x08003ccf
 8003c9c:	08003ccf 	.word	0x08003ccf
 8003ca0:	08003ccf 	.word	0x08003ccf
 8003ca4:	08003cc7 	.word	0x08003cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca8:	f7fe fec2 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8003cac:	61f8      	str	r0, [r7, #28]
        break;
 8003cae:	e014      	b.n	8003cda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb0:	f7fe fed4 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8003cb4:	61f8      	str	r0, [r7, #28]
        break;
 8003cb6:	e010      	b.n	8003cda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <UART_SetConfig+0x508>)
 8003cba:	61fb      	str	r3, [r7, #28]
        break;
 8003cbc:	e00d      	b.n	8003cda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cbe:	f7fe fe1f 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003cc2:	61f8      	str	r0, [r7, #28]
        break;
 8003cc4:	e009      	b.n	8003cda <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cca:	61fb      	str	r3, [r7, #28]
        break;
 8003ccc:	e005      	b.n	8003cda <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cd8:	bf00      	nop
    }

    if (pclk != 0U)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d019      	beq.n	8003d14 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	085a      	lsrs	r2, r3, #1
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	441a      	add	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	d909      	bls.n	8003d0e <UART_SetConfig+0x4e6>
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d00:	d205      	bcs.n	8003d0e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	e002      	b.n	8003d14 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3728      	adds	r7, #40	; 0x28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2e:	bf00      	nop
 8003d30:	00f42400 	.word	0x00f42400

08003d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d01a      	beq.n	8003e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e32:	d10a      	bne.n	8003e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e88:	f7fc fee8 	bl	8000c5c <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d10e      	bne.n	8003eba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f82d 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e023      	b.n	8003f02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d10e      	bne.n	8003ee6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f817 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e00d      	b.n	8003f02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b09c      	sub	sp, #112	; 0x70
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1a:	e0a5      	b.n	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	f000 80a1 	beq.w	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7fc fe99 	bl	8000c5c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d13e      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f50:	667b      	str	r3, [r7, #100]	; 0x64
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e6      	bne.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3308      	adds	r3, #8
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f78:	e853 3f00 	ldrex	r3, [r3]
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	663b      	str	r3, [r7, #96]	; 0x60
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e5      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e067      	b.n	800408a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d04f      	beq.n	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd6:	d147      	bne.n	8004068 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
 8004002:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	e853 3f00 	ldrex	r3, [r3]
 8004022:	613b      	str	r3, [r7, #16]
   return(result);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f023 0301 	bic.w	r3, r3, #1
 800402a:	66bb      	str	r3, [r7, #104]	; 0x68
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004034:	623a      	str	r2, [r7, #32]
 8004036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	69f9      	ldr	r1, [r7, #28]
 800403a:	6a3a      	ldr	r2, [r7, #32]
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	61bb      	str	r3, [r7, #24]
   return(result);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e5      	bne.n	8004014 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e010      	b.n	800408a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	429a      	cmp	r2, r3
 8004084:	f43f af4a 	beq.w	8003f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3770      	adds	r7, #112	; 0x70
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <__libc_init_array>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	4d0d      	ldr	r5, [pc, #52]	; (80040cc <__libc_init_array+0x38>)
 8004098:	4c0d      	ldr	r4, [pc, #52]	; (80040d0 <__libc_init_array+0x3c>)
 800409a:	1b64      	subs	r4, r4, r5
 800409c:	10a4      	asrs	r4, r4, #2
 800409e:	2600      	movs	r6, #0
 80040a0:	42a6      	cmp	r6, r4
 80040a2:	d109      	bne.n	80040b8 <__libc_init_array+0x24>
 80040a4:	4d0b      	ldr	r5, [pc, #44]	; (80040d4 <__libc_init_array+0x40>)
 80040a6:	4c0c      	ldr	r4, [pc, #48]	; (80040d8 <__libc_init_array+0x44>)
 80040a8:	f000 f820 	bl	80040ec <_init>
 80040ac:	1b64      	subs	r4, r4, r5
 80040ae:	10a4      	asrs	r4, r4, #2
 80040b0:	2600      	movs	r6, #0
 80040b2:	42a6      	cmp	r6, r4
 80040b4:	d105      	bne.n	80040c2 <__libc_init_array+0x2e>
 80040b6:	bd70      	pop	{r4, r5, r6, pc}
 80040b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040bc:	4798      	blx	r3
 80040be:	3601      	adds	r6, #1
 80040c0:	e7ee      	b.n	80040a0 <__libc_init_array+0xc>
 80040c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c6:	4798      	blx	r3
 80040c8:	3601      	adds	r6, #1
 80040ca:	e7f2      	b.n	80040b2 <__libc_init_array+0x1e>
 80040cc:	08004154 	.word	0x08004154
 80040d0:	08004154 	.word	0x08004154
 80040d4:	08004154 	.word	0x08004154
 80040d8:	08004158 	.word	0x08004158

080040dc <memset>:
 80040dc:	4402      	add	r2, r0
 80040de:	4603      	mov	r3, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d100      	bne.n	80040e6 <memset+0xa>
 80040e4:	4770      	bx	lr
 80040e6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ea:	e7f9      	b.n	80040e0 <memset+0x4>

080040ec <_init>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr

080040f8 <_fini>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr
