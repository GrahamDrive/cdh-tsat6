
cdh-tsat6-stm32project-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005684  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058fc  080058fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005904  08005904  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800590c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001110  20000074  08005980  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001184  08005980  00021184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ade7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003657  00000000  00000000  0003ae8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  0003e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003fa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a7f  00000000  00000000  00040ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018359  00000000  00000000  0006691f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5849  00000000  00000000  0007ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001644c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d20  00000000  00000000  00164514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800580c 	.word	0x0800580c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800580c 	.word	0x0800580c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <boot_CAN>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
void boot_CAN(CAN_HandleTypeDef *hcan1){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08c      	sub	sp, #48	; 0x30
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef  		sFilterConfig;
	sFilterConfig.FilterIdHigh = 0x0000;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = 0x0000;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterBank = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000508:	2301      	movs	r3, #1
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterActivation = ENABLE;
 800050c:	2301      	movs	r3, #1
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.SlaveStartFilterBank = 14;
 8000510:	230e      	movs	r3, #14
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan1, &sFilterConfig);
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	4619      	mov	r1, r3
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 fcbd 	bl	8000e9a <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(hcan1); // Turn on CANBus
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 fd84 	bl	800102e <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000526:	2102      	movs	r1, #2
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 fed6 	bl	80012da <HAL_CAN_ActivateNotification>
	can_rx_queue = xQueueCreate( QueueLength, ItemSize);
 800052e:	2340      	movs	r3, #64	; 0x40
 8000530:	2104      	movs	r1, #4
 8000532:	2200      	movs	r2, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fe75 	bl	8004224 <xQueueGenericCreate>
 800053a:	4603      	mov	r3, r0
 800053c:	4a02      	ldr	r2, [pc, #8]	; (8000548 <boot_CAN+0x64>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	3730      	adds	r7, #48	; 0x30
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200000b8 	.word	0x200000b8

0800054c <CAN_MESSAGE_RECEIVED>:
	TxMessage.RTR = CAN_RTR_DATA;
	TxMessage.DLC = MAX_CAN_DATA_LENGTH;
	HAL_CAN_AddTxMessage(hcan1,&TxMessage,message,&TxMailbox);
}

void CAN_MESSAGE_RECEIVED(CAN_HandleTypeDef *hcan1){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

	// Message Sent To Queue
	/* Get RX message */
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxMessage, RxData);
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <CAN_MESSAGE_RECEIVED+0x60>)
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <CAN_MESSAGE_RECEIVED+0x64>)
 8000558:	2100      	movs	r1, #0
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 fdab 	bl	80010b6 <HAL_CAN_GetRxMessage>
	receivedDestinationId = receivedDestinationIdMask & RxMessage.StdId;
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <CAN_MESSAGE_RECEIVED+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2203      	movs	r2, #3
 8000568:	4013      	ands	r3, r2
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <CAN_MESSAGE_RECEIVED+0x68>)
 800056e:	701a      	strb	r2, [r3, #0]
	if(receivedDestinationId == SourceID){
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <CAN_MESSAGE_RECEIVED+0x68>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2203      	movs	r2, #3
 8000576:	4293      	cmp	r3, r2
 8000578:	d113      	bne.n	80005a2 <CAN_MESSAGE_RECEIVED+0x56>
		// Either send to OS Queue or Handle
		// Below is the CDH solution
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2120      	movs	r1, #32
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f001 fb5b 	bl	8001c3c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058a:	f000 fb67 	bl	8000c5c <HAL_Delay>
		// LED OFF
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2120      	movs	r1, #32
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f001 fb51 	bl	8001c3c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800059a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800059e:	f000 fb5d 	bl	8000c5c <HAL_Delay>
	}
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000b0 	.word	0x200000b0
 80005b0:	20000094 	.word	0x20000094
 80005b4:	20000090 	.word	0x20000090

080005b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d6:	bf00      	nop
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200000bc 	.word	0x200000bc
 80005e8:	20000170 	.word	0x20000170

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fafa 	bl	8000bea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f81f 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f8d9 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f8a7 	bl	8000750 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000602:	f000 f86b 	bl	80006dc <MX_CAN1_Init>
  //xQueueCreate( QueueLength, sizeof( struct CANMessage_t * ) );
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x44>)
 8000608:	1d3c      	adds	r4, r7, #4
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fc85 	bl	8003f2c <osThreadCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <main+0x48>)
 8000626:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000628:	f003 fc79 	bl	8003f1e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x40>
 800062e:	bf00      	nop
 8000630:	08005830 	.word	0x08005830
 8000634:	2000041c 	.word	0x2000041c

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	; 0x58
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2244      	movs	r2, #68	; 0x44
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f005 f816 	bl	8005678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800065e:	f001 fb13 	bl	8001c88 <HAL_PWREx_ControlVoltageScaling>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000668:	f000 f92e 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000686:	230a      	movs	r3, #10
 8000688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800068a:	2307      	movs	r3, #7
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fb4a 	bl	8001d34 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006a6:	f000 f90f 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006be:	463b      	mov	r3, r7
 80006c0:	2104      	movs	r1, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 ff4a 	bl	800255c <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f000 f8fb 	bl	80008c8 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3758      	adds	r7, #88	; 0x58
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_CAN1_Init+0x6c>)
 80006e2:	4a1a      	ldr	r2, [pc, #104]	; (800074c <MX_CAN1_Init+0x70>)
 80006e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_CAN1_Init+0x6c>)
 80006e8:	2210      	movs	r2, #16
 80006ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_CAN1_Init+0x6c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_CAN1_Init+0x6c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_CAN1_Init+0x6c>)
 80006fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_CAN1_Init+0x6c>)
 8000702:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000706:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_CAN1_Init+0x6c>)
 800070a:	2200      	movs	r2, #0
 800070c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_CAN1_Init+0x6c>)
 8000710:	2200      	movs	r2, #0
 8000712:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_CAN1_Init+0x6c>)
 8000716:	2200      	movs	r2, #0
 8000718:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_CAN1_Init+0x6c>)
 800071c:	2200      	movs	r2, #0
 800071e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_CAN1_Init+0x6c>)
 8000722:	2200      	movs	r2, #0
 8000724:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_CAN1_Init+0x6c>)
 8000728:	2200      	movs	r2, #0
 800072a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_CAN1_Init+0x6c>)
 800072e:	f000 fab9 	bl	8000ca4 <HAL_CAN_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f8c6 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  boot_CAN(&hcan1);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <MX_CAN1_Init+0x6c>)
 800073e:	f7ff fed1 	bl	80004e4 <boot_CAN>
  /* USER CODE END CAN1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000370 	.word	0x20000370
 800074c:	40006400 	.word	0x40006400

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART2_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000794:	f002 ff28 	bl	80035e8 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f893 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000398 	.word	0x20000398
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a2a      	ldr	r2, [pc, #168]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a24      	ldr	r2, [pc, #144]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <MX_GPIO_Init+0xc4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_GPIO_Init+0xc4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_GPIO_Init+0xc4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <MX_GPIO_Init+0xc4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_GPIO_Init+0xc4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f001 fa05 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000838:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0xc8>)
 800084a:	f001 f87d 	bl	8001948 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f001 f86e 	bl	8001948 <HAL_GPIO_Init>

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	48000800 	.word	0x48000800

0800087c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	CAN_MESSAGE_RECEIVED(hcan);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fe61 	bl	800054c <CAN_MESSAGE_RECEIVED>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800089a:	2001      	movs	r0, #1
 800089c:	f003 fb92 	bl	8003fc4 <osDelay>
 80008a0:	e7fb      	b.n	800089a <StartDefaultTask+0x8>
	...

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f000 f9b1 	bl	8000c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_MspInit+0x4c>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_MspInit+0x4c>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_MspInit+0x4c>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	f06f 0001 	mvn.w	r0, #1
 8000912:	f000 ffef 	bl	80018f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <HAL_CAN_MspInit+0x8c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d130      	bne.n	80009a8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 800094c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000976:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000988:	230a      	movs	r3, #10
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <HAL_CAN_MspInit+0x94>)
 8000994:	f000 ffd8 	bl	8001948 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2105      	movs	r1, #5
 800099c:	2014      	movs	r0, #20
 800099e:	f000 ffa9 	bl	80018f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009a2:	2014      	movs	r0, #20
 80009a4:	f000 ffc2 	bl	800192c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40006400 	.word	0x40006400
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000400 	.word	0x48000400

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b0a4      	sub	sp, #144	; 0x90
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2268      	movs	r2, #104	; 0x68
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 fe4b 	bl	8005678 <memset>
  if(huart->Instance==USART2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <HAL_UART_MspInit+0xb0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d13a      	bne.n	8000a62 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 f805 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a04:	f7ff ff60 	bl	80008c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0c:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a12:	6593      	str	r3, [r2, #88]	; 0x58
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f000 ff73 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3790      	adds	r7, #144	; 0x90
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2019      	movs	r0, #25
 8000a8a:	f000 ff33 	bl	80018f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 ff4c 	bl	800192c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <HAL_InitTick+0x9c>)
 8000a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a98:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <HAL_InitTick+0x9c>)
 8000a9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a9e:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <HAL_InitTick+0x9c>)
 8000aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aac:	f107 0210 	add.w	r2, r7, #16
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 ff14 	bl	80028e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000abc:	f001 fefc 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 8000ac0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac4:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <HAL_InitTick+0xa0>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	0c9b      	lsrs	r3, r3, #18
 8000acc:	3b01      	subs	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_InitTick+0xa4>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <HAL_InitTick+0xa8>)
 8000ad4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_InitTick+0xa4>)
 8000ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000adc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_InitTick+0xa4>)
 8000ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_InitTick+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_InitTick+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <HAL_InitTick+0xa4>)
 8000af2:	f002 fae7 	bl	80030c4 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d104      	bne.n	8000b06 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <HAL_InitTick+0xa4>)
 8000afe:	f002 fb43 	bl	8003188 <HAL_TIM_Base_Start_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3730      	adds	r7, #48	; 0x30
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000
 8000b14:	431bde83 	.word	0x431bde83
 8000b18:	20000420 	.word	0x20000420
 8000b1c:	40012c00 	.word	0x40012c00

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <CAN1_RX0_IRQHandler+0x10>)
 8000b52:	f000 fbe8 	bl	8001326 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000370 	.word	0x20000370

08000b60 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b66:	f002 fb6b 	bl	8003240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000420 	.word	0x20000420

08000b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopForever+0x2>
 8000b9c:	f7ff ffea 	bl	8000b74 <SystemInit>
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopForever+0x6>)
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <LoopForever+0xa>)
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LoopForever+0xe>)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:
 8000baa:	58d4      	ldr	r4, [r2, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:
 8000bb0:	18c4      	adds	r4, r0, r3
 8000bb2:	428c      	cmp	r4, r1
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopForever+0x12>)
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <LoopForever+0x16>)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:
 8000bc2:	42a2      	cmp	r2, r4
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>
 8000bc6:	f004 fd31 	bl	800562c <__libc_init_array>
 8000bca:	f7ff fd0f 	bl	80005ec <main>

08000bce <LoopForever>:
 8000bce:	e7fe      	b.n	8000bce <LoopForever>
 8000bd0:	20028000 	.word	0x20028000
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000074 	.word	0x20000074
 8000bdc:	0800590c 	.word	0x0800590c
 8000be0:	20000074 	.word	0x20000074
 8000be4:	20001184 	.word	0x20001184

08000be8 <ADC1_IRQHandler>:
 8000be8:	e7fe      	b.n	8000be8 <ADC1_IRQHandler>

08000bea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 fe72 	bl	80018de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f7ff ff3a 	bl	8000a74 <HAL_InitTick>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	e001      	b.n	8000c10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c0c:	f7ff fe62 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c10:	79fb      	ldrb	r3, [r7, #7]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x20>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x24>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_IncTick+0x24>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	2000046c 	.word	0x2000046c

08000c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_GetTick+0x14>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	2000046c 	.word	0x2000046c

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff ffee 	bl	8000c44 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffde 	bl	8000c44 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0ed      	b.n	8000e92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fe2e 	bl	8000924 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd8:	f7ff ffb4 	bl	8000c44 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cde:	e012      	b.n	8000d06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce0:	f7ff ffb0 	bl	8000c44 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d90b      	bls.n	8000d06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e0c5      	b.n	8000e92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0e5      	beq.n	8000ce0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0202 	bic.w	r2, r2, #2
 8000d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d24:	f7ff ff8e 	bl	8000c44 <HAL_GetTick>
 8000d28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d2a:	e012      	b.n	8000d52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d2c:	f7ff ff8a 	bl	8000c44 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b0a      	cmp	r3, #10
 8000d38:	d90b      	bls.n	8000d52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2205      	movs	r2, #5
 8000d4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e09f      	b.n	8000e92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e5      	bne.n	8000d2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7e1b      	ldrb	r3, [r3, #24]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d108      	bne.n	8000d7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	e007      	b.n	8000d8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7e5b      	ldrb	r3, [r3, #25]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d108      	bne.n	8000da4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7e9b      	ldrb	r3, [r3, #26]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d108      	bne.n	8000dce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0220 	orr.w	r2, r2, #32
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e007      	b.n	8000dde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0220 	bic.w	r2, r2, #32
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7edb      	ldrb	r3, [r3, #27]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d108      	bne.n	8000df8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0210 	bic.w	r2, r2, #16
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e007      	b.n	8000e08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0210 	orr.w	r2, r2, #16
 8000e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7f1b      	ldrb	r3, [r3, #28]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d108      	bne.n	8000e22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0208 	orr.w	r2, r2, #8
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e007      	b.n	8000e32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0208 	bic.w	r2, r2, #8
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7f5b      	ldrb	r3, [r3, #29]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d108      	bne.n	8000e4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0204 	orr.w	r2, r2, #4
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e007      	b.n	8000e5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0204 	bic.w	r2, r2, #4
 8000e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	ea42 0103 	orr.w	r1, r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	1e5a      	subs	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b087      	sub	sp, #28
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000eb2:	7cfb      	ldrb	r3, [r7, #19]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d003      	beq.n	8000ec0 <HAL_CAN_ConfigFilter+0x26>
 8000eb8:	7cfb      	ldrb	r3, [r7, #19]
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	f040 80aa 	bne.w	8001014 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ec6:	f043 0201 	orr.w	r2, r3, #1
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	2201      	movs	r2, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d123      	bne.n	8000f42 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	401a      	ands	r2, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3248      	adds	r2, #72	; 0x48
 8000f22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f38:	6979      	ldr	r1, [r7, #20]
 8000f3a:	3348      	adds	r3, #72	; 0x48
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d122      	bne.n	8000f90 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3248      	adds	r2, #72	; 0x48
 8000f70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f86:	6979      	ldr	r1, [r7, #20]
 8000f88:	3348      	adds	r3, #72	; 0x48
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d109      	bne.n	8000fac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000faa:	e007      	b.n	8000fbc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d109      	bne.n	8000fd8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fd6:	e007      	b.n	8000fe8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d107      	bne.n	8001000 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001006:	f023 0201 	bic.w	r2, r3, #1
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	e006      	b.n	8001022 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
  }
}
 8001022:	4618      	mov	r0, r3
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d12e      	bne.n	80010a0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2202      	movs	r2, #2
 8001046:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800105a:	f7ff fdf3 	bl	8000c44 <HAL_GetTick>
 800105e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001060:	e012      	b.n	8001088 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001062:	f7ff fdef 	bl	8000c44 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b0a      	cmp	r3, #10
 800106e:	d90b      	bls.n	8001088 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2205      	movs	r2, #5
 8001080:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e012      	b.n	80010ae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1e5      	bne.n	8001062 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	e006      	b.n	80010ae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
  }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010b6:	b480      	push	{r7}
 80010b8:	b087      	sub	sp, #28
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d003      	beq.n	80010da <HAL_CAN_GetRxMessage+0x24>
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	f040 80f3 	bne.w	80012c0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10e      	bne.n	80010fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d116      	bne.n	800111c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0e7      	b.n	80012ce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0d8      	b.n	80012ce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	331b      	adds	r3, #27
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0204 	and.w	r2, r3, #4
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	331b      	adds	r3, #27
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0d5b      	lsrs	r3, r3, #21
 800114a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e00b      	b.n	800116c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	331b      	adds	r3, #27
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4413      	add	r3, r2
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	331b      	adds	r3, #27
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	4413      	add	r3, r2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0202 	and.w	r2, r3, #2
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	331b      	adds	r3, #27
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	3304      	adds	r3, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 020f 	and.w	r2, r3, #15
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	331b      	adds	r3, #27
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	3304      	adds	r3, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	331b      	adds	r3, #27
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4413      	add	r3, r2
 80011be:	3304      	adds	r3, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0c1b      	lsrs	r3, r3, #16
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	4413      	add	r3, r2
 80011d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0a1a      	lsrs	r2, r3, #8
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	4413      	add	r3, r2
 8001204:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	0c1a      	lsrs	r2, r3, #16
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3302      	adds	r3, #2
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	4413      	add	r3, r2
 800121e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	0e1a      	lsrs	r2, r3, #24
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3303      	adds	r3, #3
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	4413      	add	r3, r2
 8001238:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3304      	adds	r3, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	4413      	add	r3, r2
 8001250:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	0a1a      	lsrs	r2, r3, #8
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3305      	adds	r3, #5
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4413      	add	r3, r2
 800126a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0c1a      	lsrs	r2, r3, #16
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	3306      	adds	r3, #6
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	4413      	add	r3, r2
 8001284:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	0e1a      	lsrs	r2, r3, #24
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	3307      	adds	r3, #7
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d108      	bne.n	80012ac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0220 	orr.w	r2, r2, #32
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	e007      	b.n	80012bc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	691a      	ldr	r2, [r3, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0220 	orr.w	r2, r2, #32
 80012ba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	e006      	b.n	80012ce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
  }
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d002      	beq.n	80012f8 <HAL_CAN_ActivateNotification+0x1e>
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d109      	bne.n	800130c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6959      	ldr	r1, [r3, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	e006      	b.n	800131a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001310:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
  }
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b08a      	sub	sp, #40	; 0x28
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d07c      	beq.n	8001466 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d023      	beq.n	80013be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2201      	movs	r2, #1
 800137c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f983 	bl	8001694 <HAL_CAN_TxMailbox0CompleteCallback>
 800138e:	e016      	b.n	80013be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	e00c      	b.n	80013be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	e002      	b.n	80013be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f989 	bl	80016d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d024      	beq.n	8001412 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f963 	bl	80016a8 <HAL_CAN_TxMailbox1CompleteCallback>
 80013e2:	e016      	b.n	8001412 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	e00c      	b.n	8001412 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	e002      	b.n	8001412 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f969 	bl	80016e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d024      	beq.n	8001466 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001424:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f943 	bl	80016bc <HAL_CAN_TxMailbox2CompleteCallback>
 8001436:	e016      	b.n	8001466 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	e00c      	b.n	8001466 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	e002      	b.n	8001466 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f949 	bl	80016f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00c      	beq.n	800148a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001480:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2210      	movs	r2, #16
 8001488:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2208      	movs	r2, #8
 80014a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f930 	bl	800170c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d009      	beq.n	80014ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff f9d9 	bl	800087c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00c      	beq.n	80014ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2210      	movs	r2, #16
 80014ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00b      	beq.n	8001510 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d006      	beq.n	8001510 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2208      	movs	r2, #8
 8001508:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f912 	bl	8001734 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f8f9 	bl	8001720 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2210      	movs	r2, #16
 8001548:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f8fc 	bl	8001748 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2208      	movs	r2, #8
 800156a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f8f5 	bl	800175c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d07b      	beq.n	8001674 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d072      	beq.n	800166c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d043      	beq.n	800166c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d03e      	beq.n	800166c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015f4:	2b60      	cmp	r3, #96	; 0x60
 80015f6:	d02b      	beq.n	8001650 <HAL_CAN_IRQHandler+0x32a>
 80015f8:	2b60      	cmp	r3, #96	; 0x60
 80015fa:	d82e      	bhi.n	800165a <HAL_CAN_IRQHandler+0x334>
 80015fc:	2b50      	cmp	r3, #80	; 0x50
 80015fe:	d022      	beq.n	8001646 <HAL_CAN_IRQHandler+0x320>
 8001600:	2b50      	cmp	r3, #80	; 0x50
 8001602:	d82a      	bhi.n	800165a <HAL_CAN_IRQHandler+0x334>
 8001604:	2b40      	cmp	r3, #64	; 0x40
 8001606:	d019      	beq.n	800163c <HAL_CAN_IRQHandler+0x316>
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d826      	bhi.n	800165a <HAL_CAN_IRQHandler+0x334>
 800160c:	2b30      	cmp	r3, #48	; 0x30
 800160e:	d010      	beq.n	8001632 <HAL_CAN_IRQHandler+0x30c>
 8001610:	2b30      	cmp	r3, #48	; 0x30
 8001612:	d822      	bhi.n	800165a <HAL_CAN_IRQHandler+0x334>
 8001614:	2b10      	cmp	r3, #16
 8001616:	d002      	beq.n	800161e <HAL_CAN_IRQHandler+0x2f8>
 8001618:	2b20      	cmp	r3, #32
 800161a:	d005      	beq.n	8001628 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800161c:	e01d      	b.n	800165a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001626:	e019      	b.n	800165c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001630:	e014      	b.n	800165c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	f043 0320 	orr.w	r3, r3, #32
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800163a:	e00f      	b.n	800165c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001644:	e00a      	b.n	800165c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800164e:	e005      	b.n	800165c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001658:	e000      	b.n	800165c <HAL_CAN_IRQHandler+0x336>
            break;
 800165a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800166a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2204      	movs	r2, #4
 8001672:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f872 	bl	8001770 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff4c 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001906:	f7ff ff61 	bl	80017cc <__NVIC_GetPriorityGrouping>
 800190a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	6978      	ldr	r0, [r7, #20]
 8001912:	f7ff ffb1 	bl	8001878 <NVIC_EncodePriority>
 8001916:	4602      	mov	r2, r0
 8001918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff80 	bl	8001824 <__NVIC_SetPriority>
}
 8001924:	bf00      	nop
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff54 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	e154      	b.n	8001c02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8146 	beq.w	8001bfc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d005      	beq.n	8001988 <HAL_GPIO_Init+0x40>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d130      	bne.n	80019ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019be:	2201      	movs	r2, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	f003 0201 	and.w	r2, r3, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d017      	beq.n	8001a26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d123      	bne.n	8001a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	08da      	lsrs	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3208      	adds	r2, #8
 8001a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	6939      	ldr	r1, [r7, #16]
 8001a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0203 	and.w	r2, r3, #3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a0 	beq.w	8001bfc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abc:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <HAL_GPIO_Init+0x2d8>)
 8001abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac0:	4a57      	ldr	r2, [pc, #348]	; (8001c20 <HAL_GPIO_Init+0x2d8>)
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ac8:	4b55      	ldr	r3, [pc, #340]	; (8001c20 <HAL_GPIO_Init+0x2d8>)
 8001aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad4:	4a53      	ldr	r2, [pc, #332]	; (8001c24 <HAL_GPIO_Init+0x2dc>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001afe:	d019      	beq.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_GPIO_Init+0x1e8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <HAL_GPIO_Init+0x2e4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1e4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1e0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a46      	ldr	r2, [pc, #280]	; (8001c34 <HAL_GPIO_Init+0x2ec>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1dc>
 8001b20:	2304      	movs	r3, #4
 8001b22:	e008      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b24:	2307      	movs	r3, #7
 8001b26:	e006      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e004      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_GPIO_Init+0x1ee>
 8001b34:	2300      	movs	r3, #0
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	f002 0203 	and.w	r2, r2, #3
 8001b3c:	0092      	lsls	r2, r2, #2
 8001b3e:	4093      	lsls	r3, r2
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b46:	4937      	ldr	r1, [pc, #220]	; (8001c24 <HAL_GPIO_Init+0x2dc>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b78:	4a2f      	ldr	r2, [pc, #188]	; (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ba2:	4a25      	ldr	r2, [pc, #148]	; (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bf6:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <HAL_GPIO_Init+0x2f0>)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f aea3 	bne.w	8001958 <HAL_GPIO_Init+0x10>
  }
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010000 	.word	0x40010000
 8001c28:	48000400 	.word	0x48000400
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	48000c00 	.word	0x48000c00
 8001c34:	48001000 	.word	0x48001000
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40007000 	.word	0x40007000

08001c88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c96:	d130      	bne.n	8001cfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c98:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca4:	d038      	beq.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cae:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2232      	movs	r2, #50	; 0x32
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9b      	lsrs	r3, r3, #18
 8001cc8:	3301      	adds	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ccc:	e002      	b.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce0:	d102      	bne.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f2      	bne.n	8001cce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf4:	d110      	bne.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e00f      	b.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d06:	d007      	beq.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d10:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f000 bc02 	b.w	800254c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d48:	4b96      	ldr	r3, [pc, #600]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d52:	4b94      	ldr	r3, [pc, #592]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80e4 	beq.w	8001f32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_RCC_OscConfig+0x4c>
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	f040 808b 	bne.w	8001e8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	f040 8087 	bne.w	8001e8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d80:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_OscConfig+0x64>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e3d9      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	4b81      	ldr	r3, [pc, #516]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <HAL_RCC_OscConfig+0x7e>
 8001da8:	4b7e      	ldr	r3, [pc, #504]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db0:	e005      	b.n	8001dbe <HAL_RCC_OscConfig+0x8a>
 8001db2:	4b7c      	ldr	r3, [pc, #496]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d223      	bcs.n	8001e0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 fdbe 	bl	8002948 <RCC_SetFlashLatencyFromMSIRange>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e3ba      	b.n	800254c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd6:	4b73      	ldr	r3, [pc, #460]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a72      	ldr	r2, [pc, #456]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b70      	ldr	r3, [pc, #448]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	496d      	ldr	r1, [pc, #436]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001df4:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	4968      	ldr	r1, [pc, #416]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
 8001e08:	e025      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e0a:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4960      	ldr	r1, [pc, #384]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e28:	4b5e      	ldr	r3, [pc, #376]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	495b      	ldr	r1, [pc, #364]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fd7e 	bl	8002948 <RCC_SetFlashLatencyFromMSIRange>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e37a      	b.n	800254c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e56:	f000 fc81 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b51      	ldr	r3, [pc, #324]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	4950      	ldr	r1, [pc, #320]	; (8001fa8 <HAL_RCC_OscConfig+0x274>)
 8001e68:	5ccb      	ldrb	r3, [r1, r3]
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e72:	4a4e      	ldr	r2, [pc, #312]	; (8001fac <HAL_RCC_OscConfig+0x278>)
 8001e74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e76:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <HAL_RCC_OscConfig+0x27c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fdfa 	bl	8000a74 <HAL_InitTick>
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d052      	beq.n	8001f30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	e35e      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d032      	beq.n	8001efc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a42      	ldr	r2, [pc, #264]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fecf 	bl	8000c44 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eaa:	f7fe fecb 	bl	8000c44 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e347      	b.n	800254c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ebc:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a35      	ldr	r2, [pc, #212]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b33      	ldr	r3, [pc, #204]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4930      	ldr	r1, [pc, #192]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	492b      	ldr	r1, [pc, #172]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
 8001efa:	e01a      	b.n	8001f32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a28      	ldr	r2, [pc, #160]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fe9c 	bl	8000c44 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f10:	f7fe fe98 	bl	8000c44 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e314      	b.n	800254c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1dc>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d073      	beq.n	8002026 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x21c>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	d10e      	bne.n	8001f68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d063      	beq.n	8002024 <HAL_RCC_OscConfig+0x2f0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d15f      	bne.n	8002024 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e2f1      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d106      	bne.n	8001f80 <HAL_RCC_OscConfig+0x24c>
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e025      	b.n	8001fcc <HAL_RCC_OscConfig+0x298>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f88:	d114      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x280>
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a02      	ldr	r2, [pc, #8]	; (8001fa4 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e013      	b.n	8001fcc <HAL_RCC_OscConfig+0x298>
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08005854 	.word	0x08005854
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	4ba0      	ldr	r3, [pc, #640]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a9f      	ldr	r2, [pc, #636]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b9d      	ldr	r3, [pc, #628]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a9c      	ldr	r2, [pc, #624]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fe36 	bl	8000c44 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7fe fe32 	bl	8000c44 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e2ae      	b.n	800254c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	4b92      	ldr	r3, [pc, #584]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x2a8>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fe22 	bl	8000c44 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe fe1e 	bl	8000c44 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e29a      	b.n	800254c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x2d0>
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d060      	beq.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d005      	beq.n	8002044 <HAL_RCC_OscConfig+0x310>
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2b0c      	cmp	r3, #12
 800203c:	d119      	bne.n	8002072 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d116      	bne.n	8002072 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002044:	4b7c      	ldr	r3, [pc, #496]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_OscConfig+0x328>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e277      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b76      	ldr	r3, [pc, #472]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	4973      	ldr	r1, [pc, #460]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002070:	e040      	b.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d023      	beq.n	80020c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207a:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6e      	ldr	r2, [pc, #440]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe fddd 	bl	8000c44 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7fe fdd9 	bl	8000c44 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e255      	b.n	800254c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a0:	4b65      	ldr	r3, [pc, #404]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b62      	ldr	r3, [pc, #392]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	061b      	lsls	r3, r3, #24
 80020ba:	495f      	ldr	r1, [pc, #380]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
 80020c0:	e018      	b.n	80020f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a5c      	ldr	r2, [pc, #368]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 80020c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7fe fdb9 	bl	8000c44 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d6:	f7fe fdb5 	bl	8000c44 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e231      	b.n	800254c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d03c      	beq.n	800217a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01c      	beq.n	8002142 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800210a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210e:	4a4a      	ldr	r2, [pc, #296]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7fe fd94 	bl	8000c44 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002120:	f7fe fd90 	bl	8000c44 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e20c      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8002134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ef      	beq.n	8002120 <HAL_RCC_OscConfig+0x3ec>
 8002140:	e01b      	b.n	800217a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8002144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002148:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002152:	f7fe fd77 	bl	8000c44 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7fe fd73 	bl	8000c44 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1ef      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216c:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ef      	bne.n	800215a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80a6 	beq.w	80022d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800218c:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10d      	bne.n	80021b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800219e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a2:	6593      	str	r3, [r2, #88]	; 0x58
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_RCC_OscConfig+0x508>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d118      	bne.n	80021f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_OscConfig+0x508>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <HAL_RCC_OscConfig+0x508>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021cc:	f7fe fd3a 	bl	8000c44 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d4:	f7fe fd36 	bl	8000c44 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e1b2      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_RCC_OscConfig+0x508>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_RCC_OscConfig+0x4d8>
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220a:	e029      	b.n	8002260 <HAL_RCC_OscConfig+0x52c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b05      	cmp	r3, #5
 8002212:	d115      	bne.n	8002240 <HAL_RCC_OscConfig+0x50c>
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	4a07      	ldr	r2, [pc, #28]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	4a03      	ldr	r2, [pc, #12]	; (8002238 <HAL_RCC_OscConfig+0x504>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x52c>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	40007000 	.word	0x40007000
 8002240:	4b9a      	ldr	r3, [pc, #616]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	4a99      	ldr	r2, [pc, #612]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002250:	4b96      	ldr	r3, [pc, #600]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002256:	4a95      	ldr	r2, [pc, #596]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002258:	f023 0304 	bic.w	r3, r3, #4
 800225c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d016      	beq.n	8002296 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7fe fcec 	bl	8000c44 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7fe fce8 	bl	8000c44 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e162      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002286:	4b89      	ldr	r3, [pc, #548]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0ed      	beq.n	8002270 <HAL_RCC_OscConfig+0x53c>
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7fe fcd5 	bl	8000c44 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fcd1 	bl	8000c44 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e14b      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b4:	4b7d      	ldr	r3, [pc, #500]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1ed      	bne.n	800229e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c2:	7ffb      	ldrb	r3, [r7, #31]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d105      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c8:	4b78      	ldr	r3, [pc, #480]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a77      	ldr	r2, [pc, #476]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 80022ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d03c      	beq.n	800235a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01c      	beq.n	8002322 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022e8:	4b70      	ldr	r3, [pc, #448]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 80022ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022ee:	4a6f      	ldr	r2, [pc, #444]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe fca4 	bl	8000c44 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002300:	f7fe fca0 	bl	8000c44 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e11c      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002312:	4b66      	ldr	r3, [pc, #408]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCC_OscConfig+0x5cc>
 8002320:	e01b      	b.n	800235a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002322:	4b62      	ldr	r3, [pc, #392]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002328:	4a60      	ldr	r2, [pc, #384]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fc87 	bl	8000c44 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800233a:	f7fe fc83 	bl	8000c44 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0ff      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800234c:	4b57      	ldr	r3, [pc, #348]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 800234e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ef      	bne.n	800233a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80f3 	beq.w	800254a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	2b02      	cmp	r3, #2
 800236a:	f040 80c9 	bne.w	8002500 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800236e:	4b4f      	ldr	r3, [pc, #316]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 0203 	and.w	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	429a      	cmp	r2, r3
 8002380:	d12c      	bne.n	80023dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	3b01      	subs	r3, #1
 800238e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d123      	bne.n	80023dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d11b      	bne.n	80023dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d113      	bne.n	80023dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	085b      	lsrs	r3, r3, #1
 80023c0:	3b01      	subs	r3, #1
 80023c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d109      	bne.n	80023dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d06b      	beq.n	80024b4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d062      	beq.n	80024a8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e0ac      	b.n	800254c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023f2:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a2d      	ldr	r2, [pc, #180]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 80023f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023fe:	f7fe fc21 	bl	8000c44 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7fe fc1d 	bl	8000c44 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e099      	b.n	800254c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCC_OscConfig+0x77c>)
 800242a:	4013      	ands	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002434:	3a01      	subs	r2, #1
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	4311      	orrs	r1, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800243e:	0212      	lsls	r2, r2, #8
 8002440:	4311      	orrs	r1, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002446:	0852      	lsrs	r2, r2, #1
 8002448:	3a01      	subs	r2, #1
 800244a:	0552      	lsls	r2, r2, #21
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002452:	0852      	lsrs	r2, r2, #1
 8002454:	3a01      	subs	r2, #1
 8002456:	0652      	lsls	r2, r2, #25
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800245e:	06d2      	lsls	r2, r2, #27
 8002460:	430a      	orrs	r2, r1
 8002462:	4912      	ldr	r1, [pc, #72]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002464:	4313      	orrs	r3, r2
 8002466:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002472:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 800247a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002480:	f7fe fbe0 	bl	8000c44 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fbdc 	bl	8000c44 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e058      	b.n	800254c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <HAL_RCC_OscConfig+0x778>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024a6:	e050      	b.n	800254a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e04f      	b.n	800254c <HAL_RCC_OscConfig+0x818>
 80024ac:	40021000 	.word	0x40021000
 80024b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d144      	bne.n	800254a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 80024c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a20      	ldr	r2, [pc, #128]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 80024d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024d8:	f7fe fbb4 	bl	8000c44 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fbb0 	bl	8000c44 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e02c      	b.n	800254c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x7ac>
 80024fe:	e024      	b.n	800254a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d01f      	beq.n	8002546 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 800250c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe fb97 	bl	8000c44 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fb93 	bl	8000c44 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e00f      	b.n	800254c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4905      	ldr	r1, [pc, #20]	; (8002554 <HAL_RCC_OscConfig+0x820>)
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_OscConfig+0x824>)
 8002540:	4013      	ands	r3, r2
 8002542:	60cb      	str	r3, [r1, #12]
 8002544:	e001      	b.n	800254a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	feeefffc 	.word	0xfeeefffc

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0e7      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b75      	ldr	r3, [pc, #468]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d910      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4970      	ldr	r1, [pc, #448]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b6e      	ldr	r3, [pc, #440]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0cf      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d010      	beq.n	80025ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b66      	ldr	r3, [pc, #408]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d908      	bls.n	80025ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4960      	ldr	r1, [pc, #384]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d04c      	beq.n	8002674 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e2:	4b5a      	ldr	r3, [pc, #360]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d121      	bne.n	8002632 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0a6      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d115      	bne.n	8002632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e09a      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002612:	4b4e      	ldr	r3, [pc, #312]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e08e      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e086      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002632:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f023 0203 	bic.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4943      	ldr	r1, [pc, #268]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7fe fafe 	bl	8000c44 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	e00a      	b.n	8002662 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264c:	f7fe fafa 	bl	8000c44 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e06e      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	4b3a      	ldr	r3, [pc, #232]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 020c 	and.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	429a      	cmp	r2, r3
 8002672:	d1eb      	bne.n	800264c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d010      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	4b31      	ldr	r3, [pc, #196]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268c:	429a      	cmp	r2, r3
 800268e:	d208      	bcs.n	80026a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002690:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	492b      	ldr	r1, [pc, #172]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d210      	bcs.n	80026d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 0207 	bic.w	r2, r3, #7
 80026b8:	4923      	ldr	r1, [pc, #140]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c0:	4b21      	ldr	r3, [pc, #132]	; (8002748 <HAL_RCC_ClockConfig+0x1ec>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e036      	b.n	8002740 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	4918      	ldr	r1, [pc, #96]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4910      	ldr	r1, [pc, #64]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002710:	f000 f824 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	490b      	ldr	r1, [pc, #44]	; (8002750 <HAL_RCC_ClockConfig+0x1f4>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a09      	ldr	r2, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1f8>)
 800272e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_RCC_ClockConfig+0x1fc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe f99d 	bl	8000a74 <HAL_InitTick>
 800273a:	4603      	mov	r3, r0
 800273c:	72fb      	strb	r3, [r7, #11]

  return status;
 800273e:	7afb      	ldrb	r3, [r7, #11]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40022000 	.word	0x40022000
 800274c:	40021000 	.word	0x40021000
 8002750:	08005854 	.word	0x08005854
 8002754:	20000000 	.word	0x20000000
 8002758:	20000004 	.word	0x20000004

0800275c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x34>
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d121      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d11e      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002790:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d107      	bne.n	80027ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 800279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e005      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027ac:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027b8:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d102      	bne.n	80027da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027d4:	4b25      	ldr	r3, [pc, #148]	; (800286c <HAL_RCC_GetSysClockFreq+0x110>)
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	e004      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_RCC_GetSysClockFreq+0x114>)
 80027e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d134      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0xa6>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d003      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0xac>
 8002800:	e005      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_RCC_GetSysClockFreq+0x110>)
 8002804:	617b      	str	r3, [r7, #20]
      break;
 8002806:	e005      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_RCC_GetSysClockFreq+0x114>)
 800280a:	617b      	str	r3, [r7, #20]
      break;
 800280c:	e002      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	617b      	str	r3, [r7, #20]
      break;
 8002812:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	3301      	adds	r3, #1
 8002820:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	fb03 f202 	mul.w	r2, r3, r2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_RCC_GetSysClockFreq+0x108>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	0e5b      	lsrs	r3, r3, #25
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	3301      	adds	r3, #1
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002854:	69bb      	ldr	r3, [r7, #24]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	0800586c 	.word	0x0800586c
 800286c:	00f42400 	.word	0x00f42400
 8002870:	007a1200 	.word	0x007a1200

08002874 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_RCC_GetHCLKFreq+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000000 	.word	0x20000000

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002890:	f7ff fff0 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4904      	ldr	r1, [pc, #16]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	08005864 	.word	0x08005864

080028b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028bc:	f7ff ffda 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0adb      	lsrs	r3, r3, #11
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4904      	ldr	r1, [pc, #16]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08005864 	.word	0x08005864

080028e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	220f      	movs	r2, #15
 80028f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80028f4:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCC_GetClockConfig+0x5c>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_RCC_GetClockConfig+0x5c>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_RCC_GetClockConfig+0x5c>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_GetClockConfig+0x5c>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	08db      	lsrs	r3, r3, #3
 800291e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_RCC_GetClockConfig+0x60>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0207 	and.w	r2, r3, #7
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	601a      	str	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40022000 	.word	0x40022000

08002948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002960:	f7ff f984 	bl	8001c6c <HAL_PWREx_GetVoltageRange>
 8002964:	6178      	str	r0, [r7, #20]
 8002966:	e014      	b.n	8002992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002972:	6593      	str	r3, [r2, #88]	; 0x58
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002980:	f7ff f974 	bl	8001c6c <HAL_PWREx_GetVoltageRange>
 8002984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002998:	d10b      	bne.n	80029b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d919      	bls.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2ba0      	cmp	r3, #160	; 0xa0
 80029a4:	d902      	bls.n	80029ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a6:	2302      	movs	r3, #2
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	e013      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029ac:	2301      	movs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	e010      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d902      	bls.n	80029be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029b8:	2303      	movs	r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	e00a      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d102      	bne.n	80029ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029c4:	2302      	movs	r3, #2
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	e004      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b70      	cmp	r3, #112	; 0x70
 80029ce:	d101      	bne.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029d0:	2301      	movs	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 0207 	bic.w	r2, r3, #7
 80029dc:	4909      	ldr	r1, [pc, #36]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d001      	beq.n	80029f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40022000 	.word	0x40022000

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a10:	2300      	movs	r3, #0
 8002a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d031      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a2c:	d01a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a32:	d814      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a3c:	d10f      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a5c      	ldr	r2, [pc, #368]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a4a:	e00c      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fa44 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a5c:	e003      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	74fb      	strb	r3, [r7, #19]
      break;
 8002a62:	e000      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a6c:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	494e      	ldr	r1, [pc, #312]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a82:	e001      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 809e 	beq.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a9a:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab0:	4b40      	ldr	r3, [pc, #256]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	4a3f      	ldr	r2, [pc, #252]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6593      	str	r3, [r2, #88]	; 0x58
 8002abc:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002acc:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a39      	ldr	r2, [pc, #228]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe f8b4 	bl	8000c44 <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ade:	e009      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fe f8b0 	bl	8000c44 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	74fb      	strb	r3, [r7, #19]
        break;
 8002af2:	e005      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002af4:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ef      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d15a      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b06:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01e      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d019      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b22:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b4e:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d016      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe f870 	bl	8000c44 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	e00b      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe f86c 	bl	8000c44 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d902      	bls.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b7e:	e006      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ec      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ba2:	4904      	ldr	r1, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002baa:	e009      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
 8002bb0:	e006      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc0:	7c7b      	ldrb	r3, [r7, #17]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc6:	4b9e      	ldr	r3, [pc, #632]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	4a9d      	ldr	r2, [pc, #628]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bde:	4b98      	ldr	r3, [pc, #608]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f023 0203 	bic.w	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4994      	ldr	r1, [pc, #592]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c00:	4b8f      	ldr	r3, [pc, #572]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f023 020c 	bic.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	498c      	ldr	r1, [pc, #560]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c22:	4b87      	ldr	r3, [pc, #540]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	4983      	ldr	r1, [pc, #524]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c44:	4b7e      	ldr	r3, [pc, #504]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	497b      	ldr	r1, [pc, #492]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c66:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	4972      	ldr	r1, [pc, #456]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c88:	4b6d      	ldr	r3, [pc, #436]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	496a      	ldr	r1, [pc, #424]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002caa:	4b65      	ldr	r3, [pc, #404]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb8:	4961      	ldr	r1, [pc, #388]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ccc:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	4959      	ldr	r1, [pc, #356]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cee:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	4950      	ldr	r1, [pc, #320]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d10:	4b4b      	ldr	r3, [pc, #300]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	4948      	ldr	r1, [pc, #288]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d32:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d38:	f023 0203 	bic.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	493f      	ldr	r1, [pc, #252]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d028      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d54:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d62:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d72:	d106      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4a31      	ldr	r2, [pc, #196]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7e:	60d3      	str	r3, [r2, #12]
 8002d80:	e011      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	2101      	movs	r1, #1
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f8a4 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d9c:	7cfb      	ldrb	r3, [r7, #19]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d028      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	491f      	ldr	r1, [pc, #124]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ddc:	60d3      	str	r3, [r2, #12]
 8002dde:	e011      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2101      	movs	r1, #1
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f875 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d02b      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	4908      	ldr	r1, [pc, #32]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e2e:	d109      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a02      	ldr	r2, [pc, #8]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e3a:	60d3      	str	r3, [r2, #12]
 8002e3c:	e014      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 f843 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01c      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	4916      	ldr	r1, [pc, #88]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e92:	d10c      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3304      	adds	r3, #4
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f820 	bl	8002ee0 <RCCEx_PLLSAI1_Config>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ed0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000

08002ee0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eee:	4b74      	ldr	r3, [pc, #464]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d018      	beq.n	8002f2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002efa:	4b71      	ldr	r3, [pc, #452]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0203 	and.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d10d      	bne.n	8002f26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d009      	beq.n	8002f26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f12:	4b6b      	ldr	r3, [pc, #428]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	091b      	lsrs	r3, r3, #4
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
       ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d047      	beq.n	8002fb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	e044      	b.n	8002fb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d018      	beq.n	8002f66 <RCCEx_PLLSAI1_Config+0x86>
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d825      	bhi.n	8002f84 <RCCEx_PLLSAI1_Config+0xa4>
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d002      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0x62>
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d009      	beq.n	8002f54 <RCCEx_PLLSAI1_Config+0x74>
 8002f40:	e020      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f42:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11d      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f52:	e01a      	b.n	8002f8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f54:	4b5a      	ldr	r3, [pc, #360]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d116      	bne.n	8002f8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f64:	e013      	b.n	8002f8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f66:	4b56      	ldr	r3, [pc, #344]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f72:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f82:	e006      	b.n	8002f92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e004      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f9a:	4b49      	ldr	r3, [pc, #292]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	4943      	ldr	r1, [pc, #268]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d17c      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fbc:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3f      	ldr	r2, [pc, #252]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc8:	f7fd fe3c 	bl	8000c44 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fce:	e009      	b.n	8002fe4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fd0:	f7fd fe38 	bl	8000c44 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fe2:	e005      	b.n	8002ff0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fe4:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ef      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d15f      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d110      	bne.n	800301e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffc:	4b30      	ldr	r3, [pc, #192]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	0211      	lsls	r1, r2, #8
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	06d2      	lsls	r2, r2, #27
 8003014:	430a      	orrs	r2, r1
 8003016:	492a      	ldr	r1, [pc, #168]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	610b      	str	r3, [r1, #16]
 800301c:	e027      	b.n	800306e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d112      	bne.n	800304a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003024:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800302c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6892      	ldr	r2, [r2, #8]
 8003034:	0211      	lsls	r1, r2, #8
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6912      	ldr	r2, [r2, #16]
 800303a:	0852      	lsrs	r2, r2, #1
 800303c:	3a01      	subs	r2, #1
 800303e:	0552      	lsls	r2, r2, #21
 8003040:	430a      	orrs	r2, r1
 8003042:	491f      	ldr	r1, [pc, #124]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	610b      	str	r3, [r1, #16]
 8003048:	e011      	b.n	800306e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003052:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6892      	ldr	r2, [r2, #8]
 800305a:	0211      	lsls	r1, r2, #8
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6952      	ldr	r2, [r2, #20]
 8003060:	0852      	lsrs	r2, r2, #1
 8003062:	3a01      	subs	r2, #1
 8003064:	0652      	lsls	r2, r2, #25
 8003066:	430a      	orrs	r2, r1
 8003068:	4915      	ldr	r1, [pc, #84]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800306a:	4313      	orrs	r3, r2
 800306c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003078:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fd fde3 	bl	8000c44 <HAL_GetTick>
 800307e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003080:	e009      	b.n	8003096 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003082:	f7fd fddf 	bl	8000c44 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d902      	bls.n	8003096 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	73fb      	strb	r3, [r7, #15]
          break;
 8003094:	e005      	b.n	80030a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ef      	beq.n	8003082 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000

080030c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e049      	b.n	800316a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f841 	bl	8003172 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f000 f9e4 	bl	80034d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d001      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e040      	b.n	8003222 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_TIM_Base_Start_IT+0xa8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x58>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d009      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x58>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a18      	ldr	r2, [pc, #96]	; (8003234 <HAL_TIM_Base_Start_IT+0xac>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0x58>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a17      	ldr	r2, [pc, #92]	; (8003238 <HAL_TIM_Base_Start_IT+0xb0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d115      	bne.n	800320c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_TIM_Base_Start_IT+0xb4>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d015      	beq.n	800321e <HAL_TIM_Base_Start_IT+0x96>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d011      	beq.n	800321e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	e008      	b.n	800321e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e000      	b.n	8003220 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40000400 	.word	0x40000400
 8003238:	40014000 	.word	0x40014000
 800323c:	00010007 	.word	0x00010007

08003240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d122      	bne.n	800329c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b02      	cmp	r3, #2
 8003262:	d11b      	bne.n	800329c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0202 	mvn.w	r2, #2
 800326c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f905 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f8f7 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f908 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d122      	bne.n	80032f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d11b      	bne.n	80032f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0204 	mvn.w	r2, #4
 80032c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2202      	movs	r2, #2
 80032c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8db 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f8cd 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f8de 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d122      	bne.n	8003344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b08      	cmp	r3, #8
 800330a:	d11b      	bne.n	8003344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0208 	mvn.w	r2, #8
 8003314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2204      	movs	r2, #4
 800331a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8b1 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8a3 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8b4 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b10      	cmp	r3, #16
 8003350:	d122      	bne.n	8003398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b10      	cmp	r3, #16
 800335e:	d11b      	bne.n	8003398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0210 	mvn.w	r2, #16
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2208      	movs	r2, #8
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f887 	bl	8003492 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f879 	bl	800347e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f88a 	bl	80034a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d10e      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d107      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0201 	mvn.w	r2, #1
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fa70 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d10e      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d107      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f8e8 	bl	80035c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fe:	d10e      	bne.n	800341e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b80      	cmp	r3, #128	; 0x80
 800340c:	d107      	bne.n	800341e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f8db 	bl	80035d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d10e      	bne.n	800344a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d107      	bne.n	800344a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f838 	bl	80034ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b20      	cmp	r3, #32
 8003456:	d10e      	bne.n	8003476 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b20      	cmp	r3, #32
 8003464:	d107      	bne.n	8003476 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f06f 0220 	mvn.w	r2, #32
 800346e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f89b 	bl	80035ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a2e      	ldr	r2, [pc, #184]	; (800359c <TIM_Base_SetConfig+0xcc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x28>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x28>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a2b      	ldr	r2, [pc, #172]	; (80035a0 <TIM_Base_SetConfig+0xd0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d108      	bne.n	800350a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a23      	ldr	r2, [pc, #140]	; (800359c <TIM_Base_SetConfig+0xcc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00f      	beq.n	8003532 <TIM_Base_SetConfig+0x62>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d00b      	beq.n	8003532 <TIM_Base_SetConfig+0x62>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <TIM_Base_SetConfig+0xd0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <TIM_Base_SetConfig+0x62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <TIM_Base_SetConfig+0xd4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_Base_SetConfig+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <TIM_Base_SetConfig+0xd8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a0c      	ldr	r2, [pc, #48]	; (800359c <TIM_Base_SetConfig+0xcc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <TIM_Base_SetConfig+0xb0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a0c      	ldr	r2, [pc, #48]	; (80035a4 <TIM_Base_SetConfig+0xd4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_Base_SetConfig+0xb0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <TIM_Base_SetConfig+0xd8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d103      	bne.n	8003588 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	615a      	str	r2, [r3, #20]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400

080035ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e040      	b.n	800367c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd f9d6 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	; 0x24
 8003614:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f82c 	bl	8003684 <UART_SetConfig>
 800362c:	4603      	mov	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e022      	b.n	800367c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 faa6 	bl	8003b90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fb2d 	bl	8003cd4 <UART_CheckIdleState>
 800367a:	4603      	mov	r3, r0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b08a      	sub	sp, #40	; 0x28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	431a      	orrs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4ba5      	ldr	r3, [pc, #660]	; (8003948 <UART_SetConfig+0x2c4>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036bc:	430b      	orrs	r3, r1
 80036be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a9a      	ldr	r2, [pc, #616]	; (800394c <UART_SetConfig+0x2c8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	4313      	orrs	r3, r2
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a91      	ldr	r2, [pc, #580]	; (8003950 <UART_SetConfig+0x2cc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d126      	bne.n	800375c <UART_SetConfig+0xd8>
 800370e:	4b91      	ldr	r3, [pc, #580]	; (8003954 <UART_SetConfig+0x2d0>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	2b03      	cmp	r3, #3
 800371a:	d81b      	bhi.n	8003754 <UART_SetConfig+0xd0>
 800371c:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <UART_SetConfig+0xa0>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003735 	.word	0x08003735
 8003728:	08003745 	.word	0x08003745
 800372c:	0800373d 	.word	0x0800373d
 8003730:	0800374d 	.word	0x0800374d
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e0d6      	b.n	80038ea <UART_SetConfig+0x266>
 800373c:	2302      	movs	r3, #2
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003742:	e0d2      	b.n	80038ea <UART_SetConfig+0x266>
 8003744:	2304      	movs	r3, #4
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374a:	e0ce      	b.n	80038ea <UART_SetConfig+0x266>
 800374c:	2308      	movs	r3, #8
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003752:	e0ca      	b.n	80038ea <UART_SetConfig+0x266>
 8003754:	2310      	movs	r3, #16
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375a:	e0c6      	b.n	80038ea <UART_SetConfig+0x266>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7d      	ldr	r2, [pc, #500]	; (8003958 <UART_SetConfig+0x2d4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d138      	bne.n	80037d8 <UART_SetConfig+0x154>
 8003766:	4b7b      	ldr	r3, [pc, #492]	; (8003954 <UART_SetConfig+0x2d0>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d82d      	bhi.n	80037d0 <UART_SetConfig+0x14c>
 8003774:	a201      	add	r2, pc, #4	; (adr r2, 800377c <UART_SetConfig+0xf8>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037b1 	.word	0x080037b1
 8003780:	080037d1 	.word	0x080037d1
 8003784:	080037d1 	.word	0x080037d1
 8003788:	080037d1 	.word	0x080037d1
 800378c:	080037c1 	.word	0x080037c1
 8003790:	080037d1 	.word	0x080037d1
 8003794:	080037d1 	.word	0x080037d1
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	080037d1 	.word	0x080037d1
 80037a4:	080037d1 	.word	0x080037d1
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037c9 	.word	0x080037c9
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e098      	b.n	80038ea <UART_SetConfig+0x266>
 80037b8:	2302      	movs	r3, #2
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e094      	b.n	80038ea <UART_SetConfig+0x266>
 80037c0:	2304      	movs	r3, #4
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e090      	b.n	80038ea <UART_SetConfig+0x266>
 80037c8:	2308      	movs	r3, #8
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ce:	e08c      	b.n	80038ea <UART_SetConfig+0x266>
 80037d0:	2310      	movs	r3, #16
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d6:	e088      	b.n	80038ea <UART_SetConfig+0x266>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a5f      	ldr	r2, [pc, #380]	; (800395c <UART_SetConfig+0x2d8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d125      	bne.n	800382e <UART_SetConfig+0x1aa>
 80037e2:	4b5c      	ldr	r3, [pc, #368]	; (8003954 <UART_SetConfig+0x2d0>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037ec:	2b30      	cmp	r3, #48	; 0x30
 80037ee:	d016      	beq.n	800381e <UART_SetConfig+0x19a>
 80037f0:	2b30      	cmp	r3, #48	; 0x30
 80037f2:	d818      	bhi.n	8003826 <UART_SetConfig+0x1a2>
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d00a      	beq.n	800380e <UART_SetConfig+0x18a>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d814      	bhi.n	8003826 <UART_SetConfig+0x1a2>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <UART_SetConfig+0x182>
 8003800:	2b10      	cmp	r3, #16
 8003802:	d008      	beq.n	8003816 <UART_SetConfig+0x192>
 8003804:	e00f      	b.n	8003826 <UART_SetConfig+0x1a2>
 8003806:	2300      	movs	r3, #0
 8003808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380c:	e06d      	b.n	80038ea <UART_SetConfig+0x266>
 800380e:	2302      	movs	r3, #2
 8003810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003814:	e069      	b.n	80038ea <UART_SetConfig+0x266>
 8003816:	2304      	movs	r3, #4
 8003818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381c:	e065      	b.n	80038ea <UART_SetConfig+0x266>
 800381e:	2308      	movs	r3, #8
 8003820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003824:	e061      	b.n	80038ea <UART_SetConfig+0x266>
 8003826:	2310      	movs	r3, #16
 8003828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382c:	e05d      	b.n	80038ea <UART_SetConfig+0x266>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4b      	ldr	r2, [pc, #300]	; (8003960 <UART_SetConfig+0x2dc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d125      	bne.n	8003884 <UART_SetConfig+0x200>
 8003838:	4b46      	ldr	r3, [pc, #280]	; (8003954 <UART_SetConfig+0x2d0>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003842:	2bc0      	cmp	r3, #192	; 0xc0
 8003844:	d016      	beq.n	8003874 <UART_SetConfig+0x1f0>
 8003846:	2bc0      	cmp	r3, #192	; 0xc0
 8003848:	d818      	bhi.n	800387c <UART_SetConfig+0x1f8>
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d00a      	beq.n	8003864 <UART_SetConfig+0x1e0>
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d814      	bhi.n	800387c <UART_SetConfig+0x1f8>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <UART_SetConfig+0x1d8>
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d008      	beq.n	800386c <UART_SetConfig+0x1e8>
 800385a:	e00f      	b.n	800387c <UART_SetConfig+0x1f8>
 800385c:	2300      	movs	r3, #0
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003862:	e042      	b.n	80038ea <UART_SetConfig+0x266>
 8003864:	2302      	movs	r3, #2
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	e03e      	b.n	80038ea <UART_SetConfig+0x266>
 800386c:	2304      	movs	r3, #4
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003872:	e03a      	b.n	80038ea <UART_SetConfig+0x266>
 8003874:	2308      	movs	r3, #8
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387a:	e036      	b.n	80038ea <UART_SetConfig+0x266>
 800387c:	2310      	movs	r3, #16
 800387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003882:	e032      	b.n	80038ea <UART_SetConfig+0x266>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a30      	ldr	r2, [pc, #192]	; (800394c <UART_SetConfig+0x2c8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d12a      	bne.n	80038e4 <UART_SetConfig+0x260>
 800388e:	4b31      	ldr	r3, [pc, #196]	; (8003954 <UART_SetConfig+0x2d0>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003898:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800389c:	d01a      	beq.n	80038d4 <UART_SetConfig+0x250>
 800389e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038a2:	d81b      	bhi.n	80038dc <UART_SetConfig+0x258>
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a8:	d00c      	beq.n	80038c4 <UART_SetConfig+0x240>
 80038aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ae:	d815      	bhi.n	80038dc <UART_SetConfig+0x258>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <UART_SetConfig+0x238>
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b8:	d008      	beq.n	80038cc <UART_SetConfig+0x248>
 80038ba:	e00f      	b.n	80038dc <UART_SetConfig+0x258>
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c2:	e012      	b.n	80038ea <UART_SetConfig+0x266>
 80038c4:	2302      	movs	r3, #2
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ca:	e00e      	b.n	80038ea <UART_SetConfig+0x266>
 80038cc:	2304      	movs	r3, #4
 80038ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d2:	e00a      	b.n	80038ea <UART_SetConfig+0x266>
 80038d4:	2308      	movs	r3, #8
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038da:	e006      	b.n	80038ea <UART_SetConfig+0x266>
 80038dc:	2310      	movs	r3, #16
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e2:	e002      	b.n	80038ea <UART_SetConfig+0x266>
 80038e4:	2310      	movs	r3, #16
 80038e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <UART_SetConfig+0x2c8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	f040 808b 	bne.w	8003a0c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d834      	bhi.n	8003968 <UART_SetConfig+0x2e4>
 80038fe:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <UART_SetConfig+0x280>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003929 	.word	0x08003929
 8003908:	08003969 	.word	0x08003969
 800390c:	08003931 	.word	0x08003931
 8003910:	08003969 	.word	0x08003969
 8003914:	08003937 	.word	0x08003937
 8003918:	08003969 	.word	0x08003969
 800391c:	08003969 	.word	0x08003969
 8003920:	08003969 	.word	0x08003969
 8003924:	0800393f 	.word	0x0800393f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003928:	f7fe ffb0 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 800392c:	61f8      	str	r0, [r7, #28]
        break;
 800392e:	e021      	b.n	8003974 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <UART_SetConfig+0x2e0>)
 8003932:	61fb      	str	r3, [r7, #28]
        break;
 8003934:	e01e      	b.n	8003974 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003936:	f7fe ff11 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800393a:	61f8      	str	r0, [r7, #28]
        break;
 800393c:	e01a      	b.n	8003974 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003942:	61fb      	str	r3, [r7, #28]
        break;
 8003944:	e016      	b.n	8003974 <UART_SetConfig+0x2f0>
 8003946:	bf00      	nop
 8003948:	efff69f3 	.word	0xefff69f3
 800394c:	40008000 	.word	0x40008000
 8003950:	40013800 	.word	0x40013800
 8003954:	40021000 	.word	0x40021000
 8003958:	40004400 	.word	0x40004400
 800395c:	40004800 	.word	0x40004800
 8003960:	40004c00 	.word	0x40004c00
 8003964:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003972:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80fa 	beq.w	8003b70 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	429a      	cmp	r2, r3
 800398a:	d305      	bcc.n	8003998 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	429a      	cmp	r2, r3
 8003996:	d903      	bls.n	80039a0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800399e:	e0e7      	b.n	8003b70 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2200      	movs	r2, #0
 80039a4:	461c      	mov	r4, r3
 80039a6:	4615      	mov	r5, r2
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	022b      	lsls	r3, r5, #8
 80039b2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039b6:	0222      	lsls	r2, r4, #8
 80039b8:	68f9      	ldr	r1, [r7, #12]
 80039ba:	6849      	ldr	r1, [r1, #4]
 80039bc:	0849      	lsrs	r1, r1, #1
 80039be:	2000      	movs	r0, #0
 80039c0:	4688      	mov	r8, r1
 80039c2:	4681      	mov	r9, r0
 80039c4:	eb12 0a08 	adds.w	sl, r2, r8
 80039c8:	eb43 0b09 	adc.w	fp, r3, r9
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039da:	4650      	mov	r0, sl
 80039dc:	4659      	mov	r1, fp
 80039de:	f7fc fbff 	bl	80001e0 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4613      	mov	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039f0:	d308      	bcc.n	8003a04 <UART_SetConfig+0x380>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f8:	d204      	bcs.n	8003a04 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	e0b5      	b.n	8003b70 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a0a:	e0b1      	b.n	8003b70 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a14:	d15d      	bne.n	8003ad2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003a16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d827      	bhi.n	8003a6e <UART_SetConfig+0x3ea>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <UART_SetConfig+0x3a0>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a51 	.word	0x08003a51
 8003a2c:	08003a59 	.word	0x08003a59
 8003a30:	08003a6f 	.word	0x08003a6f
 8003a34:	08003a5f 	.word	0x08003a5f
 8003a38:	08003a6f 	.word	0x08003a6f
 8003a3c:	08003a6f 	.word	0x08003a6f
 8003a40:	08003a6f 	.word	0x08003a6f
 8003a44:	08003a67 	.word	0x08003a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a48:	f7fe ff20 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8003a4c:	61f8      	str	r0, [r7, #28]
        break;
 8003a4e:	e014      	b.n	8003a7a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a50:	f7fe ff32 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 8003a54:	61f8      	str	r0, [r7, #28]
        break;
 8003a56:	e010      	b.n	8003a7a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a58:	4b4c      	ldr	r3, [pc, #304]	; (8003b8c <UART_SetConfig+0x508>)
 8003a5a:	61fb      	str	r3, [r7, #28]
        break;
 8003a5c:	e00d      	b.n	8003a7a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5e:	f7fe fe7d 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8003a62:	61f8      	str	r0, [r7, #28]
        break;
 8003a64:	e009      	b.n	8003a7a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6a:	61fb      	str	r3, [r7, #28]
        break;
 8003a6c:	e005      	b.n	8003a7a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d077      	beq.n	8003b70 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005a      	lsls	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d916      	bls.n	8003aca <UART_SetConfig+0x446>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d212      	bcs.n	8003aca <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f023 030f 	bic.w	r3, r3, #15
 8003aac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	8afb      	ldrh	r3, [r7, #22]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	8afa      	ldrh	r2, [r7, #22]
 8003ac6:	60da      	str	r2, [r3, #12]
 8003ac8:	e052      	b.n	8003b70 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ad0:	e04e      	b.n	8003b70 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d827      	bhi.n	8003b2a <UART_SetConfig+0x4a6>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <UART_SetConfig+0x45c>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b05 	.word	0x08003b05
 8003ae4:	08003b0d 	.word	0x08003b0d
 8003ae8:	08003b15 	.word	0x08003b15
 8003aec:	08003b2b 	.word	0x08003b2b
 8003af0:	08003b1b 	.word	0x08003b1b
 8003af4:	08003b2b 	.word	0x08003b2b
 8003af8:	08003b2b 	.word	0x08003b2b
 8003afc:	08003b2b 	.word	0x08003b2b
 8003b00:	08003b23 	.word	0x08003b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b04:	f7fe fec2 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8003b08:	61f8      	str	r0, [r7, #28]
        break;
 8003b0a:	e014      	b.n	8003b36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b0c:	f7fe fed4 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 8003b10:	61f8      	str	r0, [r7, #28]
        break;
 8003b12:	e010      	b.n	8003b36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <UART_SetConfig+0x508>)
 8003b16:	61fb      	str	r3, [r7, #28]
        break;
 8003b18:	e00d      	b.n	8003b36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1a:	f7fe fe1f 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8003b1e:	61f8      	str	r0, [r7, #28]
        break;
 8003b20:	e009      	b.n	8003b36 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b26:	61fb      	str	r3, [r7, #28]
        break;
 8003b28:	e005      	b.n	8003b36 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b34:	bf00      	nop
    }

    if (pclk != 0U)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d019      	beq.n	8003b70 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	085a      	lsrs	r2, r3, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	441a      	add	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b0f      	cmp	r3, #15
 8003b54:	d909      	bls.n	8003b6a <UART_SetConfig+0x4e6>
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5c:	d205      	bcs.n	8003b6a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	e002      	b.n	8003b70 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3728      	adds	r7, #40	; 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8a:	bf00      	nop
 8003b8c:	00f42400 	.word	0x00f42400

08003b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01a      	beq.n	8003ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8e:	d10a      	bne.n	8003ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ce4:	f7fc ffae 	bl	8000c44 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d10e      	bne.n	8003d16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f82d 	bl	8003d66 <UART_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e023      	b.n	8003d5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d10e      	bne.n	8003d42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f817 	bl	8003d66 <UART_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e00d      	b.n	8003d5e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b09c      	sub	sp, #112	; 0x70
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4613      	mov	r3, r2
 8003d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d76:	e0a5      	b.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	f000 80a1 	beq.w	8003ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d82:	f7fc ff5f 	bl	8000c44 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d13e      	bne.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dac:	667b      	str	r3, [r7, #100]	; 0x64
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003db8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e6      	bne.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	663b      	str	r3, [r7, #96]	; 0x60
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dea:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e5      	bne.n	8003dca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e067      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d04f      	beq.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e32:	d147      	bne.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e3c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e6      	bne.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e90:	623a      	str	r2, [r7, #32]
 8003e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	69f9      	ldr	r1, [r7, #28]
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e5      	bne.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e010      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	f43f af4a 	beq.w	8003d78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3770      	adds	r7, #112	; 0x70
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f00:	2b84      	cmp	r3, #132	; 0x84
 8003f02:	d005      	beq.n	8003f10 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3303      	adds	r3, #3
 8003f0e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f10:	68fb      	ldr	r3, [r7, #12]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f22:	f000 fbb7 	bl	8004694 <vTaskStartScheduler>
  
  return osOK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af04      	add	r7, sp, #16
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d020      	beq.n	8003f80 <osThreadCreate+0x54>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01c      	beq.n	8003f80 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685c      	ldr	r4, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681d      	ldr	r5, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691e      	ldr	r6, [r3, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ffc8 	bl	8003eee <makeFreeRtosPriority>
 8003f5e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f68:	9202      	str	r2, [sp, #8]
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	9100      	str	r1, [sp, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	4632      	mov	r2, r6
 8003f72:	4629      	mov	r1, r5
 8003f74:	4620      	mov	r0, r4
 8003f76:	f000 f9ae 	bl	80042d6 <xTaskCreateStatic>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e01c      	b.n	8003fba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685c      	ldr	r4, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f8c:	b29e      	uxth	r6, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ffaa 	bl	8003eee <makeFreeRtosPriority>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	9200      	str	r2, [sp, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	4632      	mov	r2, r6
 8003fa8:	4629      	mov	r1, r5
 8003faa:	4620      	mov	r0, r4
 8003fac:	f000 f9f0 	bl	8004390 <xTaskCreate>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d001      	beq.n	8003fba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e000      	b.n	8003fbc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003fba:	68fb      	ldr	r3, [r7, #12]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fc4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <osDelay+0x16>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	e000      	b.n	8003fdc <osDelay+0x18>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fb25 	bl	800462c <vTaskDelay>
  
  return osOK;
 8003fe2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f103 0208 	add.w	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f04f 32ff 	mov.w	r2, #4294967295
 8004004:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f103 0208 	add.w	r2, r3, #8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f103 0208 	add.w	r2, r3, #8
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	601a      	str	r2, [r3, #0]
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d103      	bne.n	80040ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	e00c      	b.n	80040c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3308      	adds	r3, #8
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e002      	b.n	80040bc <vListInsert+0x2e>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d2f6      	bcs.n	80040b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	601a      	str	r2, [r3, #0]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6892      	ldr	r2, [r2, #8]
 8004116:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6852      	ldr	r2, [r2, #4]
 8004120:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d103      	bne.n	8004134 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1e5a      	subs	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800417a:	bf00      	nop
 800417c:	e7fe      	b.n	800417c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800417e:	f000 ff89 	bl	8005094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	68f9      	ldr	r1, [r7, #12]
 800418c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	441a      	add	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	3b01      	subs	r3, #1
 80041b0:	68f9      	ldr	r1, [r7, #12]
 80041b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	441a      	add	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	22ff      	movs	r2, #255	; 0xff
 80041c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d114      	bne.n	80041fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01a      	beq.n	8004212 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3310      	adds	r3, #16
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fc85 	bl	8004af0 <xTaskRemoveFromEventList>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <xQueueGenericReset+0xcc>)
 80041ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	e009      	b.n	8004212 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	3310      	adds	r3, #16
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fef2 	bl	8003fec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3324      	adds	r3, #36	; 0x24
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff feed 	bl	8003fec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004212:	f000 ff6f 	bl	80050f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004216:	2301      	movs	r3, #1
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af02      	add	r7, sp, #8
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	613b      	str	r3, [r7, #16]
}
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3348      	adds	r3, #72	; 0x48
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fffb 	bl	8005258 <pvPortMalloc>
 8004262:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d011      	beq.n	800428e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3348      	adds	r3, #72	; 0x48
 8004272:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800427c:	79fa      	ldrb	r2, [r7, #7]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f805 	bl	8004298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800428e:	69bb      	ldr	r3, [r7, #24]
	}
 8004290:	4618      	mov	r0, r3
 8004292:	3720      	adds	r7, #32
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e002      	b.n	80042ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042c6:	2101      	movs	r1, #1
 80042c8:	69b8      	ldr	r0, [r7, #24]
 80042ca:	f7ff ff43 	bl	8004154 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b08e      	sub	sp, #56	; 0x38
 80042da:	af04      	add	r7, sp, #16
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
 80042e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <xTaskCreateStatic+0x2a>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	623b      	str	r3, [r7, #32]
}
 80042fc:	bf00      	nop
 80042fe:	e7fe      	b.n	80042fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xTaskCreateStatic+0x46>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	61fb      	str	r3, [r7, #28]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800431c:	23b4      	movs	r3, #180	; 0xb4
 800431e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2bb4      	cmp	r3, #180	; 0xb4
 8004324:	d00a      	beq.n	800433c <xTaskCreateStatic+0x66>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	61bb      	str	r3, [r7, #24]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800433c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01e      	beq.n	8004382 <xTaskCreateStatic+0xac>
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01b      	beq.n	8004382 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004352:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	2202      	movs	r2, #2
 8004358:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800435c:	2300      	movs	r3, #0
 800435e:	9303      	str	r3, [sp, #12]
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	9302      	str	r3, [sp, #8]
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f851 	bl	800441c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800437a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800437c:	f000 f8ec 	bl	8004558 <prvAddNewTaskToReadyList>
 8004380:	e001      	b.n	8004386 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004386:	697b      	ldr	r3, [r7, #20]
	}
 8004388:	4618      	mov	r0, r3
 800438a:	3728      	adds	r7, #40	; 0x28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af04      	add	r7, sp, #16
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 ff57 	bl	8005258 <pvPortMalloc>
 80043aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00e      	beq.n	80043d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043b2:	20b4      	movs	r0, #180	; 0xb4
 80043b4:	f000 ff50 	bl	8005258 <pvPortMalloc>
 80043b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
 80043c6:	e005      	b.n	80043d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043c8:	6978      	ldr	r0, [r7, #20]
 80043ca:	f001 f811 	bl	80053f0 <vPortFree>
 80043ce:	e001      	b.n	80043d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d017      	beq.n	800440a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9303      	str	r3, [sp, #12]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	9302      	str	r3, [sp, #8]
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	9301      	str	r3, [sp, #4]
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f80f 	bl	800441c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043fe:	69f8      	ldr	r0, [r7, #28]
 8004400:	f000 f8aa 	bl	8004558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004404:	2301      	movs	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e002      	b.n	8004410 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004410:	69bb      	ldr	r3, [r7, #24]
	}
 8004412:	4618      	mov	r0, r3
 8004414:	3720      	adds	r7, #32
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004434:	3b01      	subs	r3, #1
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f023 0307 	bic.w	r3, r3, #7
 8004442:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <prvInitialiseNewTask+0x48>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	617b      	str	r3, [r7, #20]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01f      	beq.n	80044aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e012      	b.n	8004496 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	7819      	ldrb	r1, [r3, #0]
 8004478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	3334      	adds	r3, #52	; 0x34
 8004480:	460a      	mov	r2, r1
 8004482:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	4413      	add	r3, r2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d006      	beq.n	800449e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	3301      	adds	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d9e9      	bls.n	8004470 <prvInitialiseNewTask+0x54>
 800449c:	e000      	b.n	80044a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800449e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a8:	e003      	b.n	80044b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	2b06      	cmp	r3, #6
 80044b6:	d901      	bls.n	80044bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044b8:	2306      	movs	r3, #6
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	2200      	movs	r2, #0
 80044cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	3304      	adds	r3, #4
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fdaa 	bl	800402c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	3318      	adds	r3, #24
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fda5 	bl	800402c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	f1c3 0207 	rsb	r2, r3, #7
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2200      	movs	r2, #0
 8004504:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	334c      	adds	r3, #76	; 0x4c
 800450c:	2260      	movs	r2, #96	; 0x60
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f001 f8b1 	bl	8005678 <memset>
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <prvInitialiseNewTask+0x130>)
 800451a:	651a      	str	r2, [r3, #80]	; 0x50
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <prvInitialiseNewTask+0x134>)
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	4a0b      	ldr	r2, [pc, #44]	; (8004554 <prvInitialiseNewTask+0x138>)
 8004526:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	68f9      	ldr	r1, [r7, #12]
 800452c:	69b8      	ldr	r0, [r7, #24]
 800452e:	f000 fc81 	bl	8004e34 <pxPortInitialiseStack>
 8004532:	4602      	mov	r2, r0
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004542:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004544:	bf00      	nop
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	080058bc 	.word	0x080058bc
 8004550:	080058dc 	.word	0x080058dc
 8004554:	0800589c 	.word	0x0800589c

08004558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004560:	f000 fd98 	bl	8005094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004564:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <prvAddNewTaskToReadyList+0xb8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	4a29      	ldr	r2, [pc, #164]	; (8004610 <prvAddNewTaskToReadyList+0xb8>)
 800456c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800456e:	4b29      	ldr	r3, [pc, #164]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004576:	4a27      	ldr	r2, [pc, #156]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800457c:	4b24      	ldr	r3, [pc, #144]	; (8004610 <prvAddNewTaskToReadyList+0xb8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d110      	bne.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004584:	f000 fb2e 	bl	8004be4 <prvInitialiseTaskLists>
 8004588:	e00d      	b.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800458a:	4b23      	ldr	r3, [pc, #140]	; (8004618 <prvAddNewTaskToReadyList+0xc0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	429a      	cmp	r2, r3
 800459e:	d802      	bhi.n	80045a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045a0:	4a1c      	ldr	r2, [pc, #112]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <prvAddNewTaskToReadyList+0xc4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <prvAddNewTaskToReadyList+0xc4>)
 80045ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <prvAddNewTaskToReadyList+0xc8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4313      	orrs	r3, r2
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <prvAddNewTaskToReadyList+0xc8>)
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <prvAddNewTaskToReadyList+0xcc>)
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f7ff fd34 	bl	8004046 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045de:	f000 fd89 	bl	80050f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <prvAddNewTaskToReadyList+0xc0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00e      	beq.n	8004608 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ea:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <prvAddNewTaskToReadyList+0xbc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d207      	bcs.n	8004608 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <prvAddNewTaskToReadyList+0xd0>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004608:	bf00      	nop
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000570 	.word	0x20000570
 8004614:	20000470 	.word	0x20000470
 8004618:	2000057c 	.word	0x2000057c
 800461c:	2000058c 	.word	0x2000058c
 8004620:	20000578 	.word	0x20000578
 8004624:	20000474 	.word	0x20000474
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d017      	beq.n	800466e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <vTaskDelay+0x60>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <vTaskDelay+0x30>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	60bb      	str	r3, [r7, #8]
}
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800465c:	f000 f884 	bl	8004768 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004660:	2100      	movs	r1, #0
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fb80 	bl	8004d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004668:	f000 f88c 	bl	8004784 <xTaskResumeAll>
 800466c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d107      	bne.n	8004684 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <vTaskDelay+0x64>)
 8004676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000598 	.word	0x20000598
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046a2:	463a      	mov	r2, r7
 80046a4:	1d39      	adds	r1, r7, #4
 80046a6:	f107 0308 	add.w	r3, r7, #8
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fb ff84 	bl	80005b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	9202      	str	r2, [sp, #8]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	2300      	movs	r3, #0
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	460a      	mov	r2, r1
 80046c2:	4921      	ldr	r1, [pc, #132]	; (8004748 <vTaskStartScheduler+0xb4>)
 80046c4:	4821      	ldr	r0, [pc, #132]	; (800474c <vTaskStartScheduler+0xb8>)
 80046c6:	f7ff fe06 	bl	80042d6 <xTaskCreateStatic>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4a20      	ldr	r2, [pc, #128]	; (8004750 <vTaskStartScheduler+0xbc>)
 80046ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046d0:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <vTaskStartScheduler+0xbc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e001      	b.n	80046e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d11b      	bne.n	8004720 <vTaskStartScheduler+0x8c>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	613b      	str	r3, [r7, #16]
}
 80046fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <vTaskStartScheduler+0xc0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	334c      	adds	r3, #76	; 0x4c
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <vTaskStartScheduler+0xc4>)
 8004704:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <vTaskStartScheduler+0xc8>)
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <vTaskStartScheduler+0xcc>)
 8004710:	2201      	movs	r2, #1
 8004712:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <vTaskStartScheduler+0xd0>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800471a:	f000 fc19 	bl	8004f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800471e:	e00e      	b.n	800473e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004726:	d10a      	bne.n	800473e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	60fb      	str	r3, [r7, #12]
}
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <vTaskStartScheduler+0xa8>
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	0800584c 	.word	0x0800584c
 800474c:	08004bb5 	.word	0x08004bb5
 8004750:	20000594 	.word	0x20000594
 8004754:	20000470 	.word	0x20000470
 8004758:	20000010 	.word	0x20000010
 800475c:	20000590 	.word	0x20000590
 8004760:	2000057c 	.word	0x2000057c
 8004764:	20000574 	.word	0x20000574

08004768 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800476c:	4b04      	ldr	r3, [pc, #16]	; (8004780 <vTaskSuspendAll+0x18>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	4a03      	ldr	r2, [pc, #12]	; (8004780 <vTaskSuspendAll+0x18>)
 8004774:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004776:	bf00      	nop
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	20000598 	.word	0x20000598

08004784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004792:	4b41      	ldr	r3, [pc, #260]	; (8004898 <xTaskResumeAll+0x114>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	603b      	str	r3, [r7, #0]
}
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047b0:	f000 fc70 	bl	8005094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047b4:	4b38      	ldr	r3, [pc, #224]	; (8004898 <xTaskResumeAll+0x114>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	4a37      	ldr	r2, [pc, #220]	; (8004898 <xTaskResumeAll+0x114>)
 80047bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047be:	4b36      	ldr	r3, [pc, #216]	; (8004898 <xTaskResumeAll+0x114>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d161      	bne.n	800488a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047c6:	4b35      	ldr	r3, [pc, #212]	; (800489c <xTaskResumeAll+0x118>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d05d      	beq.n	800488a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047ce:	e02e      	b.n	800482e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d0:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <xTaskResumeAll+0x11c>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3318      	adds	r3, #24
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff fc8f 	bl	8004100 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fc8a 	bl	8004100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	2201      	movs	r2, #1
 80047f2:	409a      	lsls	r2, r3
 80047f4:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <xTaskResumeAll+0x120>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	4a2a      	ldr	r2, [pc, #168]	; (80048a4 <xTaskResumeAll+0x120>)
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <xTaskResumeAll+0x124>)
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7ff fc16 	bl	8004046 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	4b23      	ldr	r3, [pc, #140]	; (80048ac <xTaskResumeAll+0x128>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004828:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <xTaskResumeAll+0x12c>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800482e:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <xTaskResumeAll+0x11c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1cc      	bne.n	80047d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800483c:	f000 fa74 	bl	8004d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <xTaskResumeAll+0x130>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800484c:	f000 f836 	bl	80048bc <xTaskIncrementTick>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <xTaskResumeAll+0x12c>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3b01      	subs	r3, #1
 8004860:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f1      	bne.n	800484c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004868:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <xTaskResumeAll+0x130>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <xTaskResumeAll+0x12c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004876:	2301      	movs	r3, #1
 8004878:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800487a:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <xTaskResumeAll+0x134>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800488a:	f000 fc33 	bl	80050f4 <vPortExitCritical>

	return xAlreadyYielded;
 800488e:	68bb      	ldr	r3, [r7, #8]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000598 	.word	0x20000598
 800489c:	20000570 	.word	0x20000570
 80048a0:	20000530 	.word	0x20000530
 80048a4:	20000578 	.word	0x20000578
 80048a8:	20000474 	.word	0x20000474
 80048ac:	20000470 	.word	0x20000470
 80048b0:	20000584 	.word	0x20000584
 80048b4:	20000580 	.word	0x20000580
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c6:	4b4e      	ldr	r3, [pc, #312]	; (8004a00 <xTaskIncrementTick+0x144>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f040 808e 	bne.w	80049ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048d0:	4b4c      	ldr	r3, [pc, #304]	; (8004a04 <xTaskIncrementTick+0x148>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048d8:	4a4a      	ldr	r2, [pc, #296]	; (8004a04 <xTaskIncrementTick+0x148>)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d120      	bne.n	8004926 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048e4:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <xTaskIncrementTick+0x14c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <xTaskIncrementTick+0x48>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	603b      	str	r3, [r7, #0]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <xTaskIncrementTick+0x46>
 8004904:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <xTaskIncrementTick+0x14c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	4b40      	ldr	r3, [pc, #256]	; (8004a0c <xTaskIncrementTick+0x150>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3e      	ldr	r2, [pc, #248]	; (8004a08 <xTaskIncrementTick+0x14c>)
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4a3e      	ldr	r2, [pc, #248]	; (8004a0c <xTaskIncrementTick+0x150>)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	4b3d      	ldr	r3, [pc, #244]	; (8004a10 <xTaskIncrementTick+0x154>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3301      	adds	r3, #1
 800491e:	4a3c      	ldr	r2, [pc, #240]	; (8004a10 <xTaskIncrementTick+0x154>)
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	f000 fa01 	bl	8004d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004926:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <xTaskIncrementTick+0x158>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	429a      	cmp	r2, r3
 800492e:	d348      	bcc.n	80049c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004930:	4b35      	ldr	r3, [pc, #212]	; (8004a08 <xTaskIncrementTick+0x14c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800493a:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <xTaskIncrementTick+0x158>)
 800493c:	f04f 32ff 	mov.w	r2, #4294967295
 8004940:	601a      	str	r2, [r3, #0]
					break;
 8004942:	e03e      	b.n	80049c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004944:	4b30      	ldr	r3, [pc, #192]	; (8004a08 <xTaskIncrementTick+0x14c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d203      	bcs.n	8004964 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <xTaskIncrementTick+0x158>)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004962:	e02e      	b.n	80049c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	3304      	adds	r3, #4
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fbc9 	bl	8004100 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	3318      	adds	r3, #24
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fbc0 	bl	8004100 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	2201      	movs	r2, #1
 8004986:	409a      	lsls	r2, r3
 8004988:	4b23      	ldr	r3, [pc, #140]	; (8004a18 <xTaskIncrementTick+0x15c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4313      	orrs	r3, r2
 800498e:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <xTaskIncrementTick+0x15c>)
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <xTaskIncrementTick+0x160>)
 80049a0:	441a      	add	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f7ff fb4c 	bl	8004046 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <xTaskIncrementTick+0x164>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d3b9      	bcc.n	8004930 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049c0:	e7b6      	b.n	8004930 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049c2:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <xTaskIncrementTick+0x164>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	4914      	ldr	r1, [pc, #80]	; (8004a1c <xTaskIncrementTick+0x160>)
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d901      	bls.n	80049de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80049da:	2301      	movs	r3, #1
 80049dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <xTaskIncrementTick+0x168>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e004      	b.n	80049f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <xTaskIncrementTick+0x16c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <xTaskIncrementTick+0x16c>)
 80049f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049f6:	697b      	ldr	r3, [r7, #20]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000598 	.word	0x20000598
 8004a04:	20000574 	.word	0x20000574
 8004a08:	20000528 	.word	0x20000528
 8004a0c:	2000052c 	.word	0x2000052c
 8004a10:	20000588 	.word	0x20000588
 8004a14:	20000590 	.word	0x20000590
 8004a18:	20000578 	.word	0x20000578
 8004a1c:	20000474 	.word	0x20000474
 8004a20:	20000470 	.word	0x20000470
 8004a24:	20000584 	.word	0x20000584
 8004a28:	20000580 	.word	0x20000580

08004a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a32:	4b29      	ldr	r3, [pc, #164]	; (8004ad8 <vTaskSwitchContext+0xac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a3a:	4b28      	ldr	r3, [pc, #160]	; (8004adc <vTaskSwitchContext+0xb0>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a40:	e044      	b.n	8004acc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004a42:	4b26      	ldr	r3, [pc, #152]	; (8004adc <vTaskSwitchContext+0xb0>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a48:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <vTaskSwitchContext+0xb4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	fab3 f383 	clz	r3, r3
 8004a54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	f1c3 031f 	rsb	r3, r3, #31
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	4921      	ldr	r1, [pc, #132]	; (8004ae4 <vTaskSwitchContext+0xb8>)
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	607b      	str	r3, [r7, #4]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <vTaskSwitchContext+0x5a>
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <vTaskSwitchContext+0xb8>)
 8004a94:	4413      	add	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d104      	bne.n	8004ab8 <vTaskSwitchContext+0x8c>
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <vTaskSwitchContext+0xbc>)
 8004ac0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <vTaskSwitchContext+0xbc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	334c      	adds	r3, #76	; 0x4c
 8004ac8:	4a08      	ldr	r2, [pc, #32]	; (8004aec <vTaskSwitchContext+0xc0>)
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	20000598 	.word	0x20000598
 8004adc:	20000584 	.word	0x20000584
 8004ae0:	20000578 	.word	0x20000578
 8004ae4:	20000474 	.word	0x20000474
 8004ae8:	20000470 	.word	0x20000470
 8004aec:	20000010 	.word	0x20000010

08004af0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60fb      	str	r3, [r7, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	e7fe      	b.n	8004b1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	3318      	adds	r3, #24
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff faed 	bl	8004100 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b26:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <xTaskRemoveFromEventList+0xac>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11c      	bne.n	8004b68 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fae4 	bl	8004100 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <xTaskRemoveFromEventList+0xb0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <xTaskRemoveFromEventList+0xb0>)
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <xTaskRemoveFromEventList+0xb4>)
 8004b58:	441a      	add	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f7ff fa70 	bl	8004046 <vListInsertEnd>
 8004b66:	e005      	b.n	8004b74 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	3318      	adds	r3, #24
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	480e      	ldr	r0, [pc, #56]	; (8004ba8 <xTaskRemoveFromEventList+0xb8>)
 8004b70:	f7ff fa69 	bl	8004046 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <xTaskRemoveFromEventList+0xbc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d905      	bls.n	8004b8e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <xTaskRemoveFromEventList+0xc0>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e001      	b.n	8004b92 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b92:	697b      	ldr	r3, [r7, #20]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20000598 	.word	0x20000598
 8004ba0:	20000578 	.word	0x20000578
 8004ba4:	20000474 	.word	0x20000474
 8004ba8:	20000530 	.word	0x20000530
 8004bac:	20000470 	.word	0x20000470
 8004bb0:	20000584 	.word	0x20000584

08004bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bbc:	f000 f852 	bl	8004c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <prvIdleTask+0x28>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d9f9      	bls.n	8004bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <prvIdleTask+0x2c>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bd8:	e7f0      	b.n	8004bbc <prvIdleTask+0x8>
 8004bda:	bf00      	nop
 8004bdc:	20000474 	.word	0x20000474
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	e00c      	b.n	8004c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <prvInitialiseTaskLists+0x60>)
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff f9f4 	bl	8003fec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3301      	adds	r3, #1
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d9ef      	bls.n	8004bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c10:	480d      	ldr	r0, [pc, #52]	; (8004c48 <prvInitialiseTaskLists+0x64>)
 8004c12:	f7ff f9eb 	bl	8003fec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c16:	480d      	ldr	r0, [pc, #52]	; (8004c4c <prvInitialiseTaskLists+0x68>)
 8004c18:	f7ff f9e8 	bl	8003fec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c1c:	480c      	ldr	r0, [pc, #48]	; (8004c50 <prvInitialiseTaskLists+0x6c>)
 8004c1e:	f7ff f9e5 	bl	8003fec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c22:	480c      	ldr	r0, [pc, #48]	; (8004c54 <prvInitialiseTaskLists+0x70>)
 8004c24:	f7ff f9e2 	bl	8003fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c28:	480b      	ldr	r0, [pc, #44]	; (8004c58 <prvInitialiseTaskLists+0x74>)
 8004c2a:	f7ff f9df 	bl	8003fec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <prvInitialiseTaskLists+0x78>)
 8004c30:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <prvInitialiseTaskLists+0x64>)
 8004c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <prvInitialiseTaskLists+0x7c>)
 8004c36:	4a05      	ldr	r2, [pc, #20]	; (8004c4c <prvInitialiseTaskLists+0x68>)
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000474 	.word	0x20000474
 8004c48:	20000500 	.word	0x20000500
 8004c4c:	20000514 	.word	0x20000514
 8004c50:	20000530 	.word	0x20000530
 8004c54:	20000544 	.word	0x20000544
 8004c58:	2000055c 	.word	0x2000055c
 8004c5c:	20000528 	.word	0x20000528
 8004c60:	2000052c 	.word	0x2000052c

08004c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c6a:	e019      	b.n	8004ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c6c:	f000 fa12 	bl	8005094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c70:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <prvCheckTasksWaitingTermination+0x50>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fa3f 	bl	8004100 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c82:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <prvCheckTasksWaitingTermination+0x54>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <prvCheckTasksWaitingTermination+0x54>)
 8004c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <prvCheckTasksWaitingTermination+0x58>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <prvCheckTasksWaitingTermination+0x58>)
 8004c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c96:	f000 fa2d 	bl	80050f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f810 	bl	8004cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <prvCheckTasksWaitingTermination+0x58>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e1      	bne.n	8004c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000544 	.word	0x20000544
 8004cb8:	20000570 	.word	0x20000570
 8004cbc:	20000558 	.word	0x20000558

08004cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	334c      	adds	r3, #76	; 0x4c
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fce9 	bl	80056a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d108      	bne.n	8004cee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fb85 	bl	80053f0 <vPortFree>
				vPortFree( pxTCB );
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fb82 	bl	80053f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cec:	e018      	b.n	8004d20 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d103      	bne.n	8004d00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fb79 	bl	80053f0 <vPortFree>
	}
 8004cfe:	e00f      	b.n	8004d20 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d00a      	beq.n	8004d20 <prvDeleteTCB+0x60>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60fb      	str	r3, [r7, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <prvDeleteTCB+0x5e>
	}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <prvResetNextTaskUnblockTime+0x38>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <prvResetNextTaskUnblockTime+0x3c>)
 8004d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d40:	e008      	b.n	8004d54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d42:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <prvResetNextTaskUnblockTime+0x38>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <prvResetNextTaskUnblockTime+0x3c>)
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	20000528 	.word	0x20000528
 8004d64:	20000590 	.word	0x20000590

08004d68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d72:	4b29      	ldr	r3, [pc, #164]	; (8004e18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d78:	4b28      	ldr	r3, [pc, #160]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff f9be 	bl	8004100 <uxListRemove>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d8a:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	2201      	movs	r2, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43da      	mvns	r2, r3
 8004d98:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004da0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d10a      	bne.n	8004dc0 <prvAddCurrentTaskToDelayedList+0x58>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d007      	beq.n	8004dc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db0:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3304      	adds	r3, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	481a      	ldr	r0, [pc, #104]	; (8004e24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dba:	f7ff f944 	bl	8004046 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dbe:	e026      	b.n	8004e0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d209      	bcs.n	8004dec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dd8:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3304      	adds	r3, #4
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f7ff f952 	bl	800408e <vListInsert>
}
 8004dea:	e010      	b.n	8004e0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f7ff f948 	bl	800408e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d202      	bcs.n	8004e0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e08:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	6013      	str	r3, [r2, #0]
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000574 	.word	0x20000574
 8004e1c:	20000470 	.word	0x20000470
 8004e20:	20000578 	.word	0x20000578
 8004e24:	2000055c 	.word	0x2000055c
 8004e28:	2000052c 	.word	0x2000052c
 8004e2c:	20000528 	.word	0x20000528
 8004e30:	20000590 	.word	0x20000590

08004e34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3b04      	subs	r3, #4
 8004e44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3b04      	subs	r3, #4
 8004e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f023 0201 	bic.w	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e64:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <pxPortInitialiseStack+0x64>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b14      	subs	r3, #20
 8004e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3b04      	subs	r3, #4
 8004e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f06f 0202 	mvn.w	r2, #2
 8004e82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3b20      	subs	r3, #32
 8004e88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	08004e9d 	.word	0x08004e9d

08004e9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <prvTaskExitError+0x54>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d00a      	beq.n	8004ec6 <prvTaskExitError+0x2a>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60fb      	str	r3, [r7, #12]
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <prvTaskExitError+0x28>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	60bb      	str	r3, [r7, #8]
}
 8004ed8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004eda:	bf00      	nop
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0fc      	beq.n	8004edc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	2000000c 	.word	0x2000000c
	...

08004f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <pxCurrentTCBConst2>)
 8004f02:	6819      	ldr	r1, [r3, #0]
 8004f04:	6808      	ldr	r0, [r1, #0]
 8004f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0a:	f380 8809 	msr	PSP, r0
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f380 8811 	msr	BASEPRI, r0
 8004f1a:	4770      	bx	lr
 8004f1c:	f3af 8000 	nop.w

08004f20 <pxCurrentTCBConst2>:
 8004f20:	20000470 	.word	0x20000470
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop

08004f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f28:	4808      	ldr	r0, [pc, #32]	; (8004f4c <prvPortStartFirstTask+0x24>)
 8004f2a:	6800      	ldr	r0, [r0, #0]
 8004f2c:	6800      	ldr	r0, [r0, #0]
 8004f2e:	f380 8808 	msr	MSP, r0
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8814 	msr	CONTROL, r0
 8004f3a:	b662      	cpsie	i
 8004f3c:	b661      	cpsie	f
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	df00      	svc	0
 8004f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f4a:	bf00      	nop
 8004f4c:	e000ed08 	.word	0xe000ed08

08004f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f56:	4b46      	ldr	r3, [pc, #280]	; (8005070 <xPortStartScheduler+0x120>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a46      	ldr	r2, [pc, #280]	; (8005074 <xPortStartScheduler+0x124>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10a      	bne.n	8004f76 <xPortStartScheduler+0x26>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	613b      	str	r3, [r7, #16]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f76:	4b3e      	ldr	r3, [pc, #248]	; (8005070 <xPortStartScheduler+0x120>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a3f      	ldr	r2, [pc, #252]	; (8005078 <xPortStartScheduler+0x128>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10a      	bne.n	8004f96 <xPortStartScheduler+0x46>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60fb      	str	r3, [r7, #12]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <xPortStartScheduler+0x12c>)
 8004f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	22ff      	movs	r2, #255	; 0xff
 8004fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	4b31      	ldr	r3, [pc, #196]	; (8005080 <xPortStartScheduler+0x130>)
 8004fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fbe:	4b31      	ldr	r3, [pc, #196]	; (8005084 <xPortStartScheduler+0x134>)
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fc4:	e009      	b.n	8004fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004fc6:	4b2f      	ldr	r3, [pc, #188]	; (8005084 <xPortStartScheduler+0x134>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	4a2d      	ldr	r2, [pc, #180]	; (8005084 <xPortStartScheduler+0x134>)
 8004fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b80      	cmp	r3, #128	; 0x80
 8004fe4:	d0ef      	beq.n	8004fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fe6:	4b27      	ldr	r3, [pc, #156]	; (8005084 <xPortStartScheduler+0x134>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1c3 0307 	rsb	r3, r3, #7
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d00a      	beq.n	8005008 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60bb      	str	r3, [r7, #8]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005008:	4b1e      	ldr	r3, [pc, #120]	; (8005084 <xPortStartScheduler+0x134>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <xPortStartScheduler+0x134>)
 8005010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <xPortStartScheduler+0x134>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800501a:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <xPortStartScheduler+0x134>)
 800501c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005026:	4b18      	ldr	r3, [pc, #96]	; (8005088 <xPortStartScheduler+0x138>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a17      	ldr	r2, [pc, #92]	; (8005088 <xPortStartScheduler+0x138>)
 800502c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005032:	4b15      	ldr	r3, [pc, #84]	; (8005088 <xPortStartScheduler+0x138>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a14      	ldr	r2, [pc, #80]	; (8005088 <xPortStartScheduler+0x138>)
 8005038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800503c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800503e:	f000 f8dd 	bl	80051fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <xPortStartScheduler+0x13c>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005048:	f000 f8fc 	bl	8005244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800504c:	4b10      	ldr	r3, [pc, #64]	; (8005090 <xPortStartScheduler+0x140>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0f      	ldr	r2, [pc, #60]	; (8005090 <xPortStartScheduler+0x140>)
 8005052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005058:	f7ff ff66 	bl	8004f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800505c:	f7ff fce6 	bl	8004a2c <vTaskSwitchContext>
	prvTaskExitError();
 8005060:	f7ff ff1c 	bl	8004e9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	e000ed00 	.word	0xe000ed00
 8005074:	410fc271 	.word	0x410fc271
 8005078:	410fc270 	.word	0x410fc270
 800507c:	e000e400 	.word	0xe000e400
 8005080:	2000059c 	.word	0x2000059c
 8005084:	200005a0 	.word	0x200005a0
 8005088:	e000ed20 	.word	0xe000ed20
 800508c:	2000000c 	.word	0x2000000c
 8005090:	e000ef34 	.word	0xe000ef34

08005094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	607b      	str	r3, [r7, #4]
}
 80050ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050ae:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <vPortEnterCritical+0x58>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3301      	adds	r3, #1
 80050b4:	4a0d      	ldr	r2, [pc, #52]	; (80050ec <vPortEnterCritical+0x58>)
 80050b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050b8:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <vPortEnterCritical+0x58>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d10f      	bne.n	80050e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <vPortEnterCritical+0x5c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	603b      	str	r3, [r7, #0]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <vPortEnterCritical+0x4a>
	}
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	2000000c 	.word	0x2000000c
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <vPortExitCritical+0x50>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <vPortExitCritical+0x24>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	607b      	str	r3, [r7, #4]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <vPortExitCritical+0x50>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3b01      	subs	r3, #1
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <vPortExitCritical+0x50>)
 8005120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <vPortExitCritical+0x50>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d105      	bne.n	8005136 <vPortExitCritical+0x42>
 800512a:	2300      	movs	r3, #0
 800512c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c
	...

08005150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005150:	f3ef 8009 	mrs	r0, PSP
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <pxCurrentTCBConst>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	f01e 0f10 	tst.w	lr, #16
 8005160:	bf08      	it	eq
 8005162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	6010      	str	r0, [r2, #0]
 800516c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005174:	f380 8811 	msr	BASEPRI, r0
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f7ff fc54 	bl	8004a2c <vTaskSwitchContext>
 8005184:	f04f 0000 	mov.w	r0, #0
 8005188:	f380 8811 	msr	BASEPRI, r0
 800518c:	bc09      	pop	{r0, r3}
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	6808      	ldr	r0, [r1, #0]
 8005192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005196:	f01e 0f10 	tst.w	lr, #16
 800519a:	bf08      	it	eq
 800519c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051a0:	f380 8809 	msr	PSP, r0
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w

080051b0 <pxCurrentTCBConst>:
 80051b0:	20000470 	.word	0x20000470
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
}
 80051d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051d2:	f7ff fb73 	bl	80048bc <xTaskIncrementTick>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <SysTick_Handler+0x40>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f383 8811 	msr	BASEPRI, r3
}
 80051ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <vPortSetupTimerInterrupt+0x34>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <vPortSetupTimerInterrupt+0x38>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <vPortSetupTimerInterrupt+0x3c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0a      	ldr	r2, [pc, #40]	; (800523c <vPortSetupTimerInterrupt+0x40>)
 8005212:	fba2 2303 	umull	r2, r3, r2, r3
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	4a09      	ldr	r2, [pc, #36]	; (8005240 <vPortSetupTimerInterrupt+0x44>)
 800521a:	3b01      	subs	r3, #1
 800521c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <vPortSetupTimerInterrupt+0x34>)
 8005220:	2207      	movs	r2, #7
 8005222:	601a      	str	r2, [r3, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	e000e010 	.word	0xe000e010
 8005234:	e000e018 	.word	0xe000e018
 8005238:	20000000 	.word	0x20000000
 800523c:	10624dd3 	.word	0x10624dd3
 8005240:	e000e014 	.word	0xe000e014

08005244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005254 <vPortEnableVFP+0x10>
 8005248:	6801      	ldr	r1, [r0, #0]
 800524a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800524e:	6001      	str	r1, [r0, #0]
 8005250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005252:	bf00      	nop
 8005254:	e000ed88 	.word	0xe000ed88

08005258 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005264:	f7ff fa80 	bl	8004768 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005268:	4b5b      	ldr	r3, [pc, #364]	; (80053d8 <pvPortMalloc+0x180>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005270:	f000 f920 	bl	80054b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005274:	4b59      	ldr	r3, [pc, #356]	; (80053dc <pvPortMalloc+0x184>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	f040 8093 	bne.w	80053a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01d      	beq.n	80052c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005288:	2208      	movs	r2, #8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f023 0307 	bic.w	r3, r3, #7
 80052a0:	3308      	adds	r3, #8
 80052a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <pvPortMalloc+0x6c>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	617b      	str	r3, [r7, #20]
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d06e      	beq.n	80053a8 <pvPortMalloc+0x150>
 80052ca:	4b45      	ldr	r3, [pc, #276]	; (80053e0 <pvPortMalloc+0x188>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d869      	bhi.n	80053a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052d4:	4b43      	ldr	r3, [pc, #268]	; (80053e4 <pvPortMalloc+0x18c>)
 80052d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052d8:	4b42      	ldr	r3, [pc, #264]	; (80053e4 <pvPortMalloc+0x18c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052de:	e004      	b.n	80052ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d903      	bls.n	80052fc <pvPortMalloc+0xa4>
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f1      	bne.n	80052e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052fc:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <pvPortMalloc+0x180>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	429a      	cmp	r2, r3
 8005304:	d050      	beq.n	80053a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2208      	movs	r2, #8
 800530c:	4413      	add	r3, r2
 800530e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	2308      	movs	r3, #8
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	429a      	cmp	r2, r3
 8005326:	d91f      	bls.n	8005368 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <pvPortMalloc+0xf8>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	613b      	str	r3, [r7, #16]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad2      	subs	r2, r2, r3
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005362:	69b8      	ldr	r0, [r7, #24]
 8005364:	f000 f908 	bl	8005578 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005368:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <pvPortMalloc+0x188>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	4a1b      	ldr	r2, [pc, #108]	; (80053e0 <pvPortMalloc+0x188>)
 8005374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005376:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <pvPortMalloc+0x188>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <pvPortMalloc+0x190>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d203      	bcs.n	800538a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005382:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <pvPortMalloc+0x188>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <pvPortMalloc+0x190>)
 8005388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	4b13      	ldr	r3, [pc, #76]	; (80053dc <pvPortMalloc+0x184>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	431a      	orrs	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <pvPortMalloc+0x194>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3301      	adds	r3, #1
 80053a4:	4a11      	ldr	r2, [pc, #68]	; (80053ec <pvPortMalloc+0x194>)
 80053a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053a8:	f7ff f9ec 	bl	8004784 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <pvPortMalloc+0x174>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60fb      	str	r3, [r7, #12]
}
 80053c8:	bf00      	nop
 80053ca:	e7fe      	b.n	80053ca <pvPortMalloc+0x172>
	return pvReturn;
 80053cc:	69fb      	ldr	r3, [r7, #28]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3728      	adds	r7, #40	; 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20001164 	.word	0x20001164
 80053dc:	20001178 	.word	0x20001178
 80053e0:	20001168 	.word	0x20001168
 80053e4:	2000115c 	.word	0x2000115c
 80053e8:	2000116c 	.word	0x2000116c
 80053ec:	20001170 	.word	0x20001170

080053f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d04d      	beq.n	800549e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005402:	2308      	movs	r3, #8
 8005404:	425b      	negs	r3, r3
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4413      	add	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <vPortFree+0xb8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4013      	ands	r3, r2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10a      	bne.n	8005434 <vPortFree+0x44>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	60fb      	str	r3, [r7, #12]
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <vPortFree+0x62>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	60bb      	str	r3, [r7, #8]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <vPortFree+0xb8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01e      	beq.n	800549e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11a      	bne.n	800549e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <vPortFree+0xb8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	43db      	mvns	r3, r3
 8005472:	401a      	ands	r2, r3
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005478:	f7ff f976 	bl	8004768 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <vPortFree+0xbc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4413      	add	r3, r2
 8005486:	4a09      	ldr	r2, [pc, #36]	; (80054ac <vPortFree+0xbc>)
 8005488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800548a:	6938      	ldr	r0, [r7, #16]
 800548c:	f000 f874 	bl	8005578 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005490:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <vPortFree+0xc0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3301      	adds	r3, #1
 8005496:	4a06      	ldr	r2, [pc, #24]	; (80054b0 <vPortFree+0xc0>)
 8005498:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800549a:	f7ff f973 	bl	8004784 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800549e:	bf00      	nop
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20001178 	.word	0x20001178
 80054ac:	20001168 	.word	0x20001168
 80054b0:	20001174 	.word	0x20001174

080054b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80054be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054c0:	4b27      	ldr	r3, [pc, #156]	; (8005560 <prvHeapInit+0xac>)
 80054c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00c      	beq.n	80054e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3307      	adds	r3, #7
 80054d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0307 	bic.w	r3, r3, #7
 80054da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <prvHeapInit+0xac>)
 80054e4:	4413      	add	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054ec:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <prvHeapInit+0xb0>)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054f2:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <prvHeapInit+0xb0>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4413      	add	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005500:	2208      	movs	r2, #8
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0307 	bic.w	r3, r3, #7
 800550e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4a15      	ldr	r2, [pc, #84]	; (8005568 <prvHeapInit+0xb4>)
 8005514:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <prvHeapInit+0xb4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800551e:	4b12      	ldr	r3, [pc, #72]	; (8005568 <prvHeapInit+0xb4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <prvHeapInit+0xb4>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a0a      	ldr	r2, [pc, #40]	; (800556c <prvHeapInit+0xb8>)
 8005542:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a09      	ldr	r2, [pc, #36]	; (8005570 <prvHeapInit+0xbc>)
 800554a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800554c:	4b09      	ldr	r3, [pc, #36]	; (8005574 <prvHeapInit+0xc0>)
 800554e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005552:	601a      	str	r2, [r3, #0]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	200005a4 	.word	0x200005a4
 8005564:	2000115c 	.word	0x2000115c
 8005568:	20001164 	.word	0x20001164
 800556c:	2000116c 	.word	0x2000116c
 8005570:	20001168 	.word	0x20001168
 8005574:	20001178 	.word	0x20001178

08005578 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005580:	4b28      	ldr	r3, [pc, #160]	; (8005624 <prvInsertBlockIntoFreeList+0xac>)
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e002      	b.n	800558c <prvInsertBlockIntoFreeList+0x14>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	429a      	cmp	r2, r3
 8005594:	d8f7      	bhi.n	8005586 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	4413      	add	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d108      	bne.n	80055ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	441a      	add	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	441a      	add	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d118      	bne.n	8005600 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <prvInsertBlockIntoFreeList+0xb0>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d00d      	beq.n	80055f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	441a      	add	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e008      	b.n	8005608 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <prvInsertBlockIntoFreeList+0xb0>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e003      	b.n	8005608 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	429a      	cmp	r2, r3
 800560e:	d002      	beq.n	8005616 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2000115c 	.word	0x2000115c
 8005628:	20001164 	.word	0x20001164

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4d0d      	ldr	r5, [pc, #52]	; (8005664 <__libc_init_array+0x38>)
 8005630:	4c0d      	ldr	r4, [pc, #52]	; (8005668 <__libc_init_array+0x3c>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	2600      	movs	r6, #0
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	4d0b      	ldr	r5, [pc, #44]	; (800566c <__libc_init_array+0x40>)
 800563e:	4c0c      	ldr	r4, [pc, #48]	; (8005670 <__libc_init_array+0x44>)
 8005640:	f000 f8e4 	bl	800580c <_init>
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	2600      	movs	r6, #0
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	08005904 	.word	0x08005904
 8005668:	08005904 	.word	0x08005904
 800566c:	08005904 	.word	0x08005904
 8005670:	08005908 	.word	0x08005908

08005674 <__retarget_lock_acquire_recursive>:
 8005674:	4770      	bx	lr

08005676 <__retarget_lock_release_recursive>:
 8005676:	4770      	bx	lr

08005678 <memset>:
 8005678:	4402      	add	r2, r0
 800567a:	4603      	mov	r3, r0
 800567c:	4293      	cmp	r3, r2
 800567e:	d100      	bne.n	8005682 <memset+0xa>
 8005680:	4770      	bx	lr
 8005682:	f803 1b01 	strb.w	r1, [r3], #1
 8005686:	e7f9      	b.n	800567c <memset+0x4>

08005688 <cleanup_glue>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	460c      	mov	r4, r1
 800568c:	6809      	ldr	r1, [r1, #0]
 800568e:	4605      	mov	r5, r0
 8005690:	b109      	cbz	r1, 8005696 <cleanup_glue+0xe>
 8005692:	f7ff fff9 	bl	8005688 <cleanup_glue>
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800569e:	f000 b869 	b.w	8005774 <_free_r>
	...

080056a4 <_reclaim_reent>:
 80056a4:	4b2c      	ldr	r3, [pc, #176]	; (8005758 <_reclaim_reent+0xb4>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4283      	cmp	r3, r0
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	4604      	mov	r4, r0
 80056ae:	d051      	beq.n	8005754 <_reclaim_reent+0xb0>
 80056b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056b2:	b143      	cbz	r3, 80056c6 <_reclaim_reent+0x22>
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d14a      	bne.n	8005750 <_reclaim_reent+0xac>
 80056ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056bc:	6819      	ldr	r1, [r3, #0]
 80056be:	b111      	cbz	r1, 80056c6 <_reclaim_reent+0x22>
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 f857 	bl	8005774 <_free_r>
 80056c6:	6961      	ldr	r1, [r4, #20]
 80056c8:	b111      	cbz	r1, 80056d0 <_reclaim_reent+0x2c>
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 f852 	bl	8005774 <_free_r>
 80056d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80056d2:	b111      	cbz	r1, 80056da <_reclaim_reent+0x36>
 80056d4:	4620      	mov	r0, r4
 80056d6:	f000 f84d 	bl	8005774 <_free_r>
 80056da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056dc:	b111      	cbz	r1, 80056e4 <_reclaim_reent+0x40>
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 f848 	bl	8005774 <_free_r>
 80056e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80056e6:	b111      	cbz	r1, 80056ee <_reclaim_reent+0x4a>
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 f843 	bl	8005774 <_free_r>
 80056ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80056f0:	b111      	cbz	r1, 80056f8 <_reclaim_reent+0x54>
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f83e 	bl	8005774 <_free_r>
 80056f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80056fa:	b111      	cbz	r1, 8005702 <_reclaim_reent+0x5e>
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 f839 	bl	8005774 <_free_r>
 8005702:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005704:	b111      	cbz	r1, 800570c <_reclaim_reent+0x68>
 8005706:	4620      	mov	r0, r4
 8005708:	f000 f834 	bl	8005774 <_free_r>
 800570c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800570e:	b111      	cbz	r1, 8005716 <_reclaim_reent+0x72>
 8005710:	4620      	mov	r0, r4
 8005712:	f000 f82f 	bl	8005774 <_free_r>
 8005716:	69a3      	ldr	r3, [r4, #24]
 8005718:	b1e3      	cbz	r3, 8005754 <_reclaim_reent+0xb0>
 800571a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800571c:	4620      	mov	r0, r4
 800571e:	4798      	blx	r3
 8005720:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005722:	b1b9      	cbz	r1, 8005754 <_reclaim_reent+0xb0>
 8005724:	4620      	mov	r0, r4
 8005726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800572a:	f7ff bfad 	b.w	8005688 <cleanup_glue>
 800572e:	5949      	ldr	r1, [r1, r5]
 8005730:	b941      	cbnz	r1, 8005744 <_reclaim_reent+0xa0>
 8005732:	3504      	adds	r5, #4
 8005734:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005736:	2d80      	cmp	r5, #128	; 0x80
 8005738:	68d9      	ldr	r1, [r3, #12]
 800573a:	d1f8      	bne.n	800572e <_reclaim_reent+0x8a>
 800573c:	4620      	mov	r0, r4
 800573e:	f000 f819 	bl	8005774 <_free_r>
 8005742:	e7ba      	b.n	80056ba <_reclaim_reent+0x16>
 8005744:	680e      	ldr	r6, [r1, #0]
 8005746:	4620      	mov	r0, r4
 8005748:	f000 f814 	bl	8005774 <_free_r>
 800574c:	4631      	mov	r1, r6
 800574e:	e7ef      	b.n	8005730 <_reclaim_reent+0x8c>
 8005750:	2500      	movs	r5, #0
 8005752:	e7ef      	b.n	8005734 <_reclaim_reent+0x90>
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	bf00      	nop
 8005758:	20000010 	.word	0x20000010

0800575c <__malloc_lock>:
 800575c:	4801      	ldr	r0, [pc, #4]	; (8005764 <__malloc_lock+0x8>)
 800575e:	f7ff bf89 	b.w	8005674 <__retarget_lock_acquire_recursive>
 8005762:	bf00      	nop
 8005764:	2000117c 	.word	0x2000117c

08005768 <__malloc_unlock>:
 8005768:	4801      	ldr	r0, [pc, #4]	; (8005770 <__malloc_unlock+0x8>)
 800576a:	f7ff bf84 	b.w	8005676 <__retarget_lock_release_recursive>
 800576e:	bf00      	nop
 8005770:	2000117c 	.word	0x2000117c

08005774 <_free_r>:
 8005774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005776:	2900      	cmp	r1, #0
 8005778:	d044      	beq.n	8005804 <_free_r+0x90>
 800577a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800577e:	9001      	str	r0, [sp, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f1a1 0404 	sub.w	r4, r1, #4
 8005786:	bfb8      	it	lt
 8005788:	18e4      	addlt	r4, r4, r3
 800578a:	f7ff ffe7 	bl	800575c <__malloc_lock>
 800578e:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <_free_r+0x94>)
 8005790:	9801      	ldr	r0, [sp, #4]
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	b933      	cbnz	r3, 80057a4 <_free_r+0x30>
 8005796:	6063      	str	r3, [r4, #4]
 8005798:	6014      	str	r4, [r2, #0]
 800579a:	b003      	add	sp, #12
 800579c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057a0:	f7ff bfe2 	b.w	8005768 <__malloc_unlock>
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d908      	bls.n	80057ba <_free_r+0x46>
 80057a8:	6825      	ldr	r5, [r4, #0]
 80057aa:	1961      	adds	r1, r4, r5
 80057ac:	428b      	cmp	r3, r1
 80057ae:	bf01      	itttt	eq
 80057b0:	6819      	ldreq	r1, [r3, #0]
 80057b2:	685b      	ldreq	r3, [r3, #4]
 80057b4:	1949      	addeq	r1, r1, r5
 80057b6:	6021      	streq	r1, [r4, #0]
 80057b8:	e7ed      	b.n	8005796 <_free_r+0x22>
 80057ba:	461a      	mov	r2, r3
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b10b      	cbz	r3, 80057c4 <_free_r+0x50>
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	d9fa      	bls.n	80057ba <_free_r+0x46>
 80057c4:	6811      	ldr	r1, [r2, #0]
 80057c6:	1855      	adds	r5, r2, r1
 80057c8:	42a5      	cmp	r5, r4
 80057ca:	d10b      	bne.n	80057e4 <_free_r+0x70>
 80057cc:	6824      	ldr	r4, [r4, #0]
 80057ce:	4421      	add	r1, r4
 80057d0:	1854      	adds	r4, r2, r1
 80057d2:	42a3      	cmp	r3, r4
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	d1e0      	bne.n	800579a <_free_r+0x26>
 80057d8:	681c      	ldr	r4, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	6053      	str	r3, [r2, #4]
 80057de:	4421      	add	r1, r4
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	e7da      	b.n	800579a <_free_r+0x26>
 80057e4:	d902      	bls.n	80057ec <_free_r+0x78>
 80057e6:	230c      	movs	r3, #12
 80057e8:	6003      	str	r3, [r0, #0]
 80057ea:	e7d6      	b.n	800579a <_free_r+0x26>
 80057ec:	6825      	ldr	r5, [r4, #0]
 80057ee:	1961      	adds	r1, r4, r5
 80057f0:	428b      	cmp	r3, r1
 80057f2:	bf04      	itt	eq
 80057f4:	6819      	ldreq	r1, [r3, #0]
 80057f6:	685b      	ldreq	r3, [r3, #4]
 80057f8:	6063      	str	r3, [r4, #4]
 80057fa:	bf04      	itt	eq
 80057fc:	1949      	addeq	r1, r1, r5
 80057fe:	6021      	streq	r1, [r4, #0]
 8005800:	6054      	str	r4, [r2, #4]
 8005802:	e7ca      	b.n	800579a <_free_r+0x26>
 8005804:	b003      	add	sp, #12
 8005806:	bd30      	pop	{r4, r5, pc}
 8005808:	20001180 	.word	0x20001180

0800580c <_init>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	bf00      	nop
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr

08005818 <_fini>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	bf00      	nop
 800581c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581e:	bc08      	pop	{r3}
 8005820:	469e      	mov	lr, r3
 8005822:	4770      	bx	lr
