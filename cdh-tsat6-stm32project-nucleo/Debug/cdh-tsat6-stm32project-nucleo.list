
cdh-tsat6-stm32project-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005674  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f8  080058f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005900  08005900  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001128  20000074  0800597c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  0800597c  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019451  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003289  00000000  00000000  000394f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256f1  00000000  00000000  0003ef38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d6c  00000000  00000000  00064629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e522b  00000000  00000000  0007b395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001605c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b4  00000000  00000000  00160610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057fc 	.word	0x080057fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080057fc 	.word	0x080057fc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <boot_CAN>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
void boot_CAN(CAN_HandleTypeDef *hcan1){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08c      	sub	sp, #48	; 0x30
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef  		sFilterConfig;
	sFilterConfig.FilterIdHigh = 0x0000;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = 0x0000;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterBank = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000508:	2301      	movs	r3, #1
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterActivation = ENABLE;
 800050c:	2301      	movs	r3, #1
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.SlaveStartFilterBank = 14;
 8000510:	230e      	movs	r3, #14
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan1, &sFilterConfig);
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	4619      	mov	r1, r3
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 fd09 	bl	8000f32 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(hcan1); // Turn on CANBus
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 fdd0 	bl	80010c6 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000526:	2102      	movs	r1, #2
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 fff2 	bl	8001512 <HAL_CAN_ActivateNotification>
}
 800052e:	bf00      	nop
 8000530:	3730      	adds	r7, #48	; 0x30
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <CAN_transmit_message>:
 * @brief Used to send messages over CAN
 * @param hcan1 The CANBUS object to send the message over\
 * @param message A 8 byte message
 */
void CAN_transmit_message(CAN_HandleTypeDef *hcan1, struct message myMessage)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	4638      	mov	r0, r7
 8000542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// TX Message Parameters
	uint16_t ID = (myMessage.priority << 4) | (SourceID << 2) | (myMessage.DestinationID);
 8000546:	783b      	ldrb	r3, [r7, #0]
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	b21a      	sxth	r2, r3
 800054c:	2303      	movs	r3, #3
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	b21b      	sxth	r3, r3
 8000552:	4313      	orrs	r3, r2
 8000554:	b21a      	sxth	r2, r3
 8000556:	787b      	ldrb	r3, [r7, #1]
 8000558:	b21b      	sxth	r3, r3
 800055a:	4313      	orrs	r3, r2
 800055c:	b21b      	sxth	r3, r3
 800055e:	83fb      	strh	r3, [r7, #30]
	uint8_t message[8] = {myMessage.command, myMessage.data[0], myMessage.data[1], myMessage.data[2], myMessage.data[3], myMessage.data[4], myMessage.data[5],myMessage.data[6]};
 8000560:	78bb      	ldrb	r3, [r7, #2]
 8000562:	753b      	strb	r3, [r7, #20]
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	757b      	strb	r3, [r7, #21]
 8000568:	793b      	ldrb	r3, [r7, #4]
 800056a:	75bb      	strb	r3, [r7, #22]
 800056c:	797b      	ldrb	r3, [r7, #5]
 800056e:	75fb      	strb	r3, [r7, #23]
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	763b      	strb	r3, [r7, #24]
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	767b      	strb	r3, [r7, #25]
 8000578:	7a3b      	ldrb	r3, [r7, #8]
 800057a:	76bb      	strb	r3, [r7, #26]
 800057c:	7a7b      	ldrb	r3, [r7, #9]
 800057e:	76fb      	strb	r3, [r7, #27]

	TxMessage.StdId = ID;
 8000580:	8bfb      	ldrh	r3, [r7, #30]
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <CAN_transmit_message+0x78>)
 8000584:	6013      	str	r3, [r2, #0]
	TxMessage.IDE = CAN_ID_STD;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <CAN_transmit_message+0x78>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
	TxMessage.RTR = CAN_RTR_DATA;
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <CAN_transmit_message+0x78>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
	TxMessage.DLC = MAX_CAN_DATA_LENGTH;
 8000592:	2308      	movs	r3, #8
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <CAN_transmit_message+0x78>)
 8000598:	611a      	str	r2, [r3, #16]
	HAL_CAN_AddTxMessage(hcan1,&TxMessage,message,&TxMailbox);
 800059a:	f107 0214 	add.w	r2, r7, #20
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <CAN_transmit_message+0x7c>)
 80005a0:	4903      	ldr	r1, [pc, #12]	; (80005b0 <CAN_transmit_message+0x78>)
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f000 fdd3 	bl	800114e <HAL_CAN_AddTxMessage>
}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000094 	.word	0x20000094
 80005b4:	200000c8 	.word	0x200000c8

080005b8 <CAN_MESSAGE_RECEIVED>:

void CAN_MESSAGE_RECEIVED(CAN_HandleTypeDef *hcan1){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxMessage, RxData);
 80005c0:	4b14      	ldr	r3, [pc, #80]	; (8000614 <CAN_MESSAGE_RECEIVED+0x5c>)
 80005c2:	4a15      	ldr	r2, [pc, #84]	; (8000618 <CAN_MESSAGE_RECEIVED+0x60>)
 80005c4:	2100      	movs	r1, #0
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 fe91 	bl	80012ee <HAL_CAN_GetRxMessage>
	receivedDestinationId = receivedDestinationIdMask & RxMessage.StdId;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <CAN_MESSAGE_RECEIVED+0x60>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2203      	movs	r2, #3
 80005d4:	4013      	ands	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <CAN_MESSAGE_RECEIVED+0x64>)
 80005da:	701a      	strb	r2, [r3, #0]
	if(receivedDestinationId == SourceID){
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <CAN_MESSAGE_RECEIVED+0x64>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2203      	movs	r2, #3
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d111      	bne.n	800060a <CAN_MESSAGE_RECEIVED+0x52>
		receivedSourceId = receivedSourceIdMask & RxMessage.StdId;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <CAN_MESSAGE_RECEIVED+0x60>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	220c      	movs	r2, #12
 80005ee:	4013      	ands	r3, r2
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <CAN_MESSAGE_RECEIVED+0x68>)
 80005f4:	701a      	strb	r2, [r3, #0]
		receivedPriority = receivedPriorityMask & RxMessage.StdId;
 80005f6:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <CAN_MESSAGE_RECEIVED+0x60>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4013      	ands	r3, r2
 8000604:	b2da      	uxtb	r2, r3
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <CAN_MESSAGE_RECEIVED+0x6c>)
 8000608:	701a      	strb	r2, [r3, #0]
		// Either send to OS Queue or Handle
	}
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000cc 	.word	0x200000cc
 8000618:	200000ac 	.word	0x200000ac
 800061c:	20000092 	.word	0x20000092
 8000620:	20000091 	.word	0x20000091
 8000624:	20000090 	.word	0x20000090

08000628 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <vApplicationGetIdleTaskMemory+0x2c>)
 8000638:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <vApplicationGetIdleTaskMemory+0x30>)
 800063e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200000d4 	.word	0x200000d4
 8000658:	20000188 	.word	0x20000188

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b5b0      	push	{r4, r5, r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f000 fb0e 	bl	8000c82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f833 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 f8ed 	bl	8000848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066e:	f000 f8bb 	bl	80007e8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000672:	f000 f87f 	bl	8000774 <MX_CAN1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <main+0x64>)
 8000678:	f107 040c 	add.w	r4, r7, #12
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f003 fd67 	bl	8004164 <osThreadCreate>
 8000696:	4603      	mov	r3, r0
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <main+0x68>)
 800069a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069c:	f003 fd5b 	bl	8004156 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  struct message Mymessage = {
 80006a0:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <main+0x6c>)
 80006a2:	463b      	mov	r3, r7
 80006a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a6:	c303      	stmia	r3!, {r0, r1}
 80006a8:	801a      	strh	r2, [r3, #0]
		  0x1,	// Priority
		  0x3,	// Destination ID
		  0x42,	// Command
		  {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7}	// Data
	  };
	  CAN_transmit_message(&hcan1, Mymessage);
 80006aa:	463b      	mov	r3, r7
 80006ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006ae:	4807      	ldr	r0, [pc, #28]	; (80006cc <main+0x70>)
 80006b0:	f7ff ff42 	bl	8000538 <CAN_transmit_message>
	  HAL_Delay(500);
 80006b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b8:	f000 fb1c 	bl	8000cf4 <HAL_Delay>
  {
 80006bc:	e7f0      	b.n	80006a0 <main+0x44>
 80006be:	bf00      	nop
 80006c0:	08005820 	.word	0x08005820
 80006c4:	20000434 	.word	0x20000434
 80006c8:	0800583c 	.word	0x0800583c
 80006cc:	20000388 	.word	0x20000388

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	; 0x58
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2244      	movs	r2, #68	; 0x44
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 ffc2 	bl	8005668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f6:	f001 fbe3 	bl	8001ec0 <HAL_PWREx_ControlVoltageScaling>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000700:	f000 f92e 	bl	8000960 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070e:	2340      	movs	r3, #64	; 0x40
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000716:	2302      	movs	r3, #2
 8000718:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800071e:	230a      	movs	r3, #10
 8000720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000722:	2307      	movs	r3, #7
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fc1a 	bl	8001f6c <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800073e:	f000 f90f 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2303      	movs	r3, #3
 8000748:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	2104      	movs	r1, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f002 f81a 	bl	8002794 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000766:	f000 f8fb 	bl	8000960 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3758      	adds	r7, #88	; 0x58
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_CAN1_Init+0x6c>)
 800077a:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <MX_CAN1_Init+0x70>)
 800077c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_CAN1_Init+0x6c>)
 8000780:	2210      	movs	r2, #16
 8000782:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000784:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_CAN1_Init+0x6c>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_CAN1_Init+0x6c>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_CAN1_Init+0x6c>)
 8000792:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000796:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_CAN1_Init+0x6c>)
 800079a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800079e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_CAN1_Init+0x6c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_CAN1_Init+0x6c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_CAN1_Init+0x6c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_CAN1_Init+0x6c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_CAN1_Init+0x6c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_CAN1_Init+0x6c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <MX_CAN1_Init+0x6c>)
 80007c6:	f000 fab9 	bl	8000d3c <HAL_CAN_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007d0:	f000 f8c6 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  boot_CAN(&hcan1);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <MX_CAN1_Init+0x6c>)
 80007d6:	f7ff fe85 	bl	80004e4 <boot_CAN>
  /* USER CODE END CAN1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000388 	.word	0x20000388
 80007e4:	40006400 	.word	0x40006400

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART2_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_USART2_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART2_UART_Init+0x58>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART2_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART2_UART_Init+0x58>)
 800082c:	f002 fff8 	bl	8003820 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f893 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200003b0 	.word	0x200003b0
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_GPIO_Init+0xc4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <MX_GPIO_Init+0xc4>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <MX_GPIO_Init+0xc4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <MX_GPIO_Init+0xc4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a24      	ldr	r2, [pc, #144]	; (800090c <MX_GPIO_Init+0xc4>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_GPIO_Init+0xc4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_GPIO_Init+0xc4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <MX_GPIO_Init+0xc4>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_GPIO_Init+0xc4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_GPIO_Init+0xc4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <MX_GPIO_Init+0xc4>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_GPIO_Init+0xc4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2120      	movs	r1, #32
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f001 fad5 	bl	8001e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0xc8>)
 80008e2:	f001 f94d 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80008e6:	2320      	movs	r3, #32
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f001 f93e 	bl	8001b80 <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	48000800 	.word	0x48000800

08000914 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	CAN_MESSAGE_RECEIVED(hcan);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fe4b 	bl	80005b8 <CAN_MESSAGE_RECEIVED>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f003 fc62 	bl	80041fc <osDelay>
 8000938:	e7fb      	b.n	8000932 <StartDefaultTask+0x8>
	...

0800093c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094e:	f000 f9b1 	bl	8000cb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40012c00 	.word	0x40012c00

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_MspInit+0x4c>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_MspInit+0x4c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6613      	str	r3, [r2, #96]	; 0x60
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_MspInit+0x4c>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_MspInit+0x4c>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_MspInit+0x4c>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	210f      	movs	r1, #15
 80009a6:	f06f 0001 	mvn.w	r0, #1
 80009aa:	f001 f8bf 	bl	8001b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1b      	ldr	r2, [pc, #108]	; (8000a48 <HAL_CAN_MspInit+0x8c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d130      	bne.n	8000a40 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_CAN_MspInit+0x90>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <HAL_CAN_MspInit+0x90>)
 80009e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_CAN_MspInit+0x90>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_CAN_MspInit+0x90>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <HAL_CAN_MspInit+0x90>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_CAN_MspInit+0x90>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a0e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000a20:	230a      	movs	r3, #10
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4809      	ldr	r0, [pc, #36]	; (8000a50 <HAL_CAN_MspInit+0x94>)
 8000a2c:	f001 f8a8 	bl	8001b80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2105      	movs	r1, #5
 8000a34:	2014      	movs	r0, #20
 8000a36:	f001 f879 	bl	8001b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a3a:	2014      	movs	r0, #20
 8000a3c:	f001 f892 	bl	8001b64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40006400 	.word	0x40006400
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000400 	.word	0x48000400

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0a4      	sub	sp, #144	; 0x90
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2268      	movs	r2, #104	; 0x68
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 fdf7 	bl	8005668 <memset>
  if(huart->Instance==USART2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <HAL_UART_MspInit+0xb0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d13a      	bne.n	8000afa <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 f8d5 	bl	8002c40 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff ff60 	bl	8000960 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa4:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <HAL_UART_MspInit+0xb4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <HAL_UART_MspInit+0xb4>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_UART_MspInit+0xb4>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f001 f843 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3790      	adds	r7, #144	; 0x90
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2019      	movs	r0, #25
 8000b22:	f001 f803 	bl	8001b2c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b26:	2019      	movs	r0, #25
 8000b28:	f001 f81c 	bl	8001b64 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <HAL_InitTick+0x9c>)
 8000b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <HAL_InitTick+0x9c>)
 8000b32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b36:	6613      	str	r3, [r2, #96]	; 0x60
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <HAL_InitTick+0x9c>)
 8000b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 0210 	add.w	r2, r7, #16
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 ffe4 	bl	8002b1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b54:	f001 ffcc 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8000b58:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <HAL_InitTick+0xa0>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3b01      	subs	r3, #1
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <HAL_InitTick+0xa8>)
 8000b6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b8a:	f002 fbb7 	bl	80032fc <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d104      	bne.n	8000b9e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b94:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <HAL_InitTick+0xa4>)
 8000b96:	f002 fc13 	bl	80033c0 <HAL_TIM_Base_Start_IT>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	431bde83 	.word	0x431bde83
 8000bb0:	20000438 	.word	0x20000438
 8000bb4:	40012c00 	.word	0x40012c00

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <CAN1_RX0_IRQHandler+0x10>)
 8000bea:	f000 fcb8 	bl	800155e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000388 	.word	0x20000388

08000bf8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bfe:	f002 fc3b 	bl	8003478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000438 	.word	0x20000438

08000c0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff ffea 	bl	8000c0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480c      	ldr	r0, [pc, #48]	; (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3a:	490d      	ldr	r1, [pc, #52]	; (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c50:	4c0a      	ldr	r4, [pc, #40]	; (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f004 fcdd 	bl	800561c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c62:	f7ff fcfb 	bl	800065c <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c68:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c74:	08005908 	.word	0x08005908
  ldr r2, =_sbss
 8000c78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c7c:	2000119c 	.word	0x2000119c

08000c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_IRQHandler>

08000c82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f000 ff42 	bl	8001b16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c92:	200f      	movs	r0, #15
 8000c94:	f7ff ff3a 	bl	8000b0c <HAL_InitTick>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	e001      	b.n	8000ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca4:	f7ff fe62 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000484 	.word	0x20000484

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000484 	.word	0x20000484

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffde 	bl	8000cdc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e0ed      	b.n	8000f2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fe2e 	bl	80009bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0201 	orr.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d70:	f7ff ffb4 	bl	8000cdc <HAL_GetTick>
 8000d74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d76:	e012      	b.n	8000d9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d78:	f7ff ffb0 	bl	8000cdc <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b0a      	cmp	r3, #10
 8000d84:	d90b      	bls.n	8000d9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2205      	movs	r2, #5
 8000d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e0c5      	b.n	8000f2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0e5      	beq.n	8000d78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0202 	bic.w	r2, r2, #2
 8000dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dbc:	f7ff ff8e 	bl	8000cdc <HAL_GetTick>
 8000dc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dc2:	e012      	b.n	8000dea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc4:	f7ff ff8a 	bl	8000cdc <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b0a      	cmp	r3, #10
 8000dd0:	d90b      	bls.n	8000dea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2205      	movs	r2, #5
 8000de2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e09f      	b.n	8000f2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1e5      	bne.n	8000dc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7e1b      	ldrb	r3, [r3, #24]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d108      	bne.n	8000e12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	e007      	b.n	8000e22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7e5b      	ldrb	r3, [r3, #25]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d108      	bne.n	8000e3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	e007      	b.n	8000e4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7e9b      	ldrb	r3, [r3, #26]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d108      	bne.n	8000e66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0220 	orr.w	r2, r2, #32
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e007      	b.n	8000e76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0220 	bic.w	r2, r2, #32
 8000e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7edb      	ldrb	r3, [r3, #27]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d108      	bne.n	8000e90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0210 	bic.w	r2, r2, #16
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e007      	b.n	8000ea0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0210 	orr.w	r2, r2, #16
 8000e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	7f1b      	ldrb	r3, [r3, #28]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d108      	bne.n	8000eba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0208 	orr.w	r2, r2, #8
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	e007      	b.n	8000eca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0208 	bic.w	r2, r2, #8
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7f5b      	ldrb	r3, [r3, #29]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d108      	bne.n	8000ee4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f042 0204 	orr.w	r2, r2, #4
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	e007      	b.n	8000ef4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0204 	bic.w	r2, r2, #4
 8000ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	ea42 0103 	orr.w	r1, r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	1e5a      	subs	r2, r3, #1
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b087      	sub	sp, #28
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f48:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f4a:	7cfb      	ldrb	r3, [r7, #19]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d003      	beq.n	8000f58 <HAL_CAN_ConfigFilter+0x26>
 8000f50:	7cfb      	ldrb	r3, [r7, #19]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	f040 80aa 	bne.w	80010ac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	f003 031f 	and.w	r3, r3, #31
 8000f70:	2201      	movs	r2, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d123      	bne.n	8000fda <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3248      	adds	r2, #72	; 0x48
 8000fba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd0:	6979      	ldr	r1, [r7, #20]
 8000fd2:	3348      	adds	r3, #72	; 0x48
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	440b      	add	r3, r1
 8000fd8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d122      	bne.n	8001028 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001002:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3248      	adds	r2, #72	; 0x48
 8001008:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800101c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800101e:	6979      	ldr	r1, [r7, #20]
 8001020:	3348      	adds	r3, #72	; 0x48
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001042:	e007      	b.n	8001054 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800106e:	e007      	b.n	8001080 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	431a      	orrs	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d107      	bne.n	8001098 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	431a      	orrs	r2, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800109e:	f023 0201 	bic.w	r2, r3, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e006      	b.n	80010ba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
  }
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d12e      	bne.n	8001138 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0201 	bic.w	r2, r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010f2:	f7ff fdf3 	bl	8000cdc <HAL_GetTick>
 80010f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010f8:	e012      	b.n	8001120 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010fa:	f7ff fdef 	bl	8000cdc <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b0a      	cmp	r3, #10
 8001106:	d90b      	bls.n	8001120 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2205      	movs	r2, #5
 8001118:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e012      	b.n	8001146 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1e5      	bne.n	80010fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	e006      	b.n	8001146 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
  }
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800114e:	b480      	push	{r7}
 8001150:	b089      	sub	sp, #36	; 0x24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001162:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d003      	beq.n	800117a <HAL_CAN_AddTxMessage+0x2c>
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	2b02      	cmp	r3, #2
 8001176:	f040 80ad 	bne.w	80012d4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10a      	bne.n	800119a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 8095 	beq.w	80012c4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	0e1b      	lsrs	r3, r3, #24
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011a4:	2201      	movs	r2, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	409a      	lsls	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011c0:	68f9      	ldr	r1, [r7, #12]
 80011c2:	6809      	ldr	r1, [r1, #0]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3318      	adds	r3, #24
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	440b      	add	r3, r1
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e00f      	b.n	80011f2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3318      	adds	r3, #24
 80011ec:	011b      	lsls	r3, r3, #4
 80011ee:	440b      	add	r3, r1
 80011f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3318      	adds	r3, #24
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	440b      	add	r3, r1
 8001202:	3304      	adds	r3, #4
 8001204:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	7d1b      	ldrb	r3, [r3, #20]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d111      	bne.n	8001232 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3318      	adds	r3, #24
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	6811      	ldr	r1, [r2, #0]
 8001222:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3318      	adds	r3, #24
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	440b      	add	r3, r1
 800122e:	3304      	adds	r3, #4
 8001230:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3307      	adds	r3, #7
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	061a      	lsls	r2, r3, #24
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3306      	adds	r3, #6
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	041b      	lsls	r3, r3, #16
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3305      	adds	r3, #5
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	4313      	orrs	r3, r2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	3204      	adds	r2, #4
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	4610      	mov	r0, r2
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	6811      	ldr	r1, [r2, #0]
 800125a:	ea43 0200 	orr.w	r2, r3, r0
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	440b      	add	r3, r1
 8001264:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001268:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3303      	adds	r3, #3
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	061a      	lsls	r2, r3, #24
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3302      	adds	r3, #2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3301      	adds	r3, #1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	4313      	orrs	r3, r2
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	4610      	mov	r0, r2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	6811      	ldr	r1, [r2, #0]
 8001290:	ea43 0200 	orr.w	r2, r3, r0
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	440b      	add	r3, r1
 800129a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800129e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3318      	adds	r3, #24
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	4413      	add	r3, r2
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	6811      	ldr	r1, [r2, #0]
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3318      	adds	r3, #24
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	440b      	add	r3, r1
 80012be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e00e      	b.n	80012e2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e006      	b.n	80012e2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
  }
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012ee:	b480      	push	{r7}
 80012f0:	b087      	sub	sp, #28
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001302:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d003      	beq.n	8001312 <HAL_CAN_GetRxMessage+0x24>
 800130a:	7dfb      	ldrb	r3, [r7, #23]
 800130c:	2b02      	cmp	r3, #2
 800130e:	f040 80f3 	bne.w	80014f8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10e      	bne.n	8001336 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d116      	bne.n	8001354 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0e7      	b.n	8001506 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d107      	bne.n	8001354 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0d8      	b.n	8001506 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	331b      	adds	r3, #27
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	4413      	add	r3, r2
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0204 	and.w	r2, r3, #4
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	331b      	adds	r3, #27
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	4413      	add	r3, r2
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0d5b      	lsrs	r3, r3, #21
 8001382:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	331b      	adds	r3, #27
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4413      	add	r3, r2
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	331b      	adds	r3, #27
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4413      	add	r3, r2
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0202 	and.w	r2, r3, #2
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	331b      	adds	r3, #27
 80013c2:	011b      	lsls	r3, r3, #4
 80013c4:	4413      	add	r3, r2
 80013c6:	3304      	adds	r3, #4
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 020f 	and.w	r2, r3, #15
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	331b      	adds	r3, #27
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	3304      	adds	r3, #4
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	331b      	adds	r3, #27
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	3304      	adds	r3, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	0c1b      	lsrs	r3, r3, #16
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	4413      	add	r3, r2
 800140c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	0a1a      	lsrs	r2, r3, #8
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	0c1a      	lsrs	r2, r3, #16
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	3302      	adds	r3, #2
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0e1a      	lsrs	r2, r3, #24
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3303      	adds	r3, #3
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3304      	adds	r3, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	0a1a      	lsrs	r2, r3, #8
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3305      	adds	r3, #5
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4413      	add	r3, r2
 80014a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	0c1a      	lsrs	r2, r3, #16
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3306      	adds	r3, #6
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0e1a      	lsrs	r2, r3, #24
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3307      	adds	r3, #7
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d108      	bne.n	80014e4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f042 0220 	orr.w	r2, r2, #32
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	e007      	b.n	80014f4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0220 	orr.w	r2, r2, #32
 80014f2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e006      	b.n	8001506 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
  }
}
 8001506:	4618      	mov	r0, r3
 8001508:	371c      	adds	r7, #28
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001512:	b480      	push	{r7}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001522:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d002      	beq.n	8001530 <HAL_CAN_ActivateNotification+0x1e>
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d109      	bne.n	8001544 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6959      	ldr	r1, [r3, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e006      	b.n	8001552 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b08a      	sub	sp, #40	; 0x28
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d07c      	beq.n	800169e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d023      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2201      	movs	r2, #1
 80015b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f983 	bl	80018cc <HAL_CAN_TxMailbox0CompleteCallback>
 80015c6:	e016      	b.n	80015f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
 80015da:	e00c      	b.n	80015f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	e002      	b.n	80015f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f989 	bl	8001908 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d024      	beq.n	800164a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001608:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f963 	bl	80018e0 <HAL_CAN_TxMailbox1CompleteCallback>
 800161a:	e016      	b.n	800164a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	e00c      	b.n	800164a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
 8001642:	e002      	b.n	800164a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f969 	bl	800191c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d024      	beq.n	800169e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800165c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f943 	bl	80018f4 <HAL_CAN_TxMailbox2CompleteCallback>
 800166e:	e016      	b.n	800169e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	e00c      	b.n	800169e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d004      	beq.n	8001698 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
 8001696:	e002      	b.n	800169e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f949 	bl	8001930 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00c      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2210      	movs	r2, #16
 80016c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00b      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2208      	movs	r2, #8
 80016dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f930 	bl	8001944 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff f909 	bl	8000914 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00c      	beq.n	8001726 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2210      	movs	r2, #16
 8001724:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f003 0320 	and.w	r3, r3, #32
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2208      	movs	r2, #8
 8001740:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f912 	bl	800196c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f8f9 	bl	8001958 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00b      	beq.n	8001788 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2210      	movs	r2, #16
 8001780:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8fc 	bl	8001980 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2208      	movs	r2, #8
 80017a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f8f5 	bl	8001994 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d07b      	beq.n	80018ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d072      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001818:	2b00      	cmp	r3, #0
 800181a:	d043      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001822:	2b00      	cmp	r3, #0
 8001824:	d03e      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800182c:	2b60      	cmp	r3, #96	; 0x60
 800182e:	d02b      	beq.n	8001888 <HAL_CAN_IRQHandler+0x32a>
 8001830:	2b60      	cmp	r3, #96	; 0x60
 8001832:	d82e      	bhi.n	8001892 <HAL_CAN_IRQHandler+0x334>
 8001834:	2b50      	cmp	r3, #80	; 0x50
 8001836:	d022      	beq.n	800187e <HAL_CAN_IRQHandler+0x320>
 8001838:	2b50      	cmp	r3, #80	; 0x50
 800183a:	d82a      	bhi.n	8001892 <HAL_CAN_IRQHandler+0x334>
 800183c:	2b40      	cmp	r3, #64	; 0x40
 800183e:	d019      	beq.n	8001874 <HAL_CAN_IRQHandler+0x316>
 8001840:	2b40      	cmp	r3, #64	; 0x40
 8001842:	d826      	bhi.n	8001892 <HAL_CAN_IRQHandler+0x334>
 8001844:	2b30      	cmp	r3, #48	; 0x30
 8001846:	d010      	beq.n	800186a <HAL_CAN_IRQHandler+0x30c>
 8001848:	2b30      	cmp	r3, #48	; 0x30
 800184a:	d822      	bhi.n	8001892 <HAL_CAN_IRQHandler+0x334>
 800184c:	2b10      	cmp	r3, #16
 800184e:	d002      	beq.n	8001856 <HAL_CAN_IRQHandler+0x2f8>
 8001850:	2b20      	cmp	r3, #32
 8001852:	d005      	beq.n	8001860 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001854:	e01d      	b.n	8001892 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800185e:	e019      	b.n	8001894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001868:	e014      	b.n	8001894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	f043 0320 	orr.w	r3, r3, #32
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001872:	e00f      	b.n	8001894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800187c:	e00a      	b.n	8001894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001886:	e005      	b.n	8001894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001890:	e000      	b.n	8001894 <HAL_CAN_IRQHandler+0x336>
            break;
 8001892:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80018a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2204      	movs	r2, #4
 80018aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f872 	bl	80019a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff4c 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3e:	f7ff ff61 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	6978      	ldr	r0, [r7, #20]
 8001b4a:	f7ff ffb1 	bl	8001ab0 <NVIC_EncodePriority>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff80 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff54 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	e154      	b.n	8001e3a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8146 	beq.w	8001e34 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <HAL_GPIO_Init+0x40>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d017      	beq.n	8001c5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d123      	bne.n	8001cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	6939      	ldr	r1, [r7, #16]
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0203 	and.w	r2, r3, #3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80a0 	beq.w	8001e34 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf4:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <HAL_GPIO_Init+0x2d8>)
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf8:	4a57      	ldr	r2, [pc, #348]	; (8001e58 <HAL_GPIO_Init+0x2d8>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6613      	str	r3, [r2, #96]	; 0x60
 8001d00:	4b55      	ldr	r3, [pc, #340]	; (8001e58 <HAL_GPIO_Init+0x2d8>)
 8001d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d0c:	4a53      	ldr	r2, [pc, #332]	; (8001e5c <HAL_GPIO_Init+0x2dc>)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d36:	d019      	beq.n	8001d6c <HAL_GPIO_Init+0x1ec>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <HAL_GPIO_Init+0x2e0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d013      	beq.n	8001d68 <HAL_GPIO_Init+0x1e8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_GPIO_Init+0x2e4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d00d      	beq.n	8001d64 <HAL_GPIO_Init+0x1e4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a47      	ldr	r2, [pc, #284]	; (8001e68 <HAL_GPIO_Init+0x2e8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d007      	beq.n	8001d60 <HAL_GPIO_Init+0x1e0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a46      	ldr	r2, [pc, #280]	; (8001e6c <HAL_GPIO_Init+0x2ec>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d101      	bne.n	8001d5c <HAL_GPIO_Init+0x1dc>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e008      	b.n	8001d6e <HAL_GPIO_Init+0x1ee>
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	e006      	b.n	8001d6e <HAL_GPIO_Init+0x1ee>
 8001d60:	2303      	movs	r3, #3
 8001d62:	e004      	b.n	8001d6e <HAL_GPIO_Init+0x1ee>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e002      	b.n	8001d6e <HAL_GPIO_Init+0x1ee>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_GPIO_Init+0x1ee>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	f002 0203 	and.w	r2, r2, #3
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	4093      	lsls	r3, r2
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d7e:	4937      	ldr	r1, [pc, #220]	; (8001e5c <HAL_GPIO_Init+0x2dc>)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d8c:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001db0:	4a2f      	ldr	r2, [pc, #188]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001db6:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dda:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e04:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_GPIO_Init+0x2f0>)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f47f aea3 	bne.w	8001b90 <HAL_GPIO_Init+0x10>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	48000400 	.word	0x48000400
 8001e64:	48000800 	.word	0x48000800
 8001e68:	48000c00 	.word	0x48000c00
 8001e6c:	48001000 	.word	0x48001000
 8001e70:	40010400 	.word	0x40010400

08001e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]
 8001e80:	4613      	mov	r3, r2
 8001e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e84:	787b      	ldrb	r3, [r7, #1]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <HAL_PWREx_GetVoltageRange+0x18>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40007000 	.word	0x40007000

08001ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ece:	d130      	bne.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001edc:	d038      	beq.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ee6:	4a1e      	ldr	r2, [pc, #120]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2232      	movs	r2, #50	; 0x32
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	; (8001f68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001efa:	fba2 2303 	umull	r2, r3, r2, r3
 8001efe:	0c9b      	lsrs	r3, r3, #18
 8001f00:	3301      	adds	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f04:	e002      	b.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f18:	d102      	bne.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f2      	bne.n	8001f06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2c:	d110      	bne.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e00f      	b.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3e:	d007      	beq.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40007000 	.word	0x40007000
 8001f64:	20000000 	.word	0x20000000
 8001f68:	431bde83 	.word	0x431bde83

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f000 bc02 	b.w	8002784 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f80:	4b96      	ldr	r3, [pc, #600]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f8a:	4b94      	ldr	r3, [pc, #592]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80e4 	beq.w	800216a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4c>
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b0c      	cmp	r3, #12
 8001fac:	f040 808b 	bne.w	80020c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	f040 8087 	bne.w	80020c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fb8:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x64>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e3d9      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1a      	ldr	r2, [r3, #32]
 8001fd4:	4b81      	ldr	r3, [pc, #516]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <HAL_RCC_OscConfig+0x7e>
 8001fe0:	4b7e      	ldr	r3, [pc, #504]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fe8:	e005      	b.n	8001ff6 <HAL_RCC_OscConfig+0x8a>
 8001fea:	4b7c      	ldr	r3, [pc, #496]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d223      	bcs.n	8002042 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fdbe 	bl	8002b80 <RCC_SetFlashLatencyFromMSIRange>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e3ba      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800200e:	4b73      	ldr	r3, [pc, #460]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a72      	ldr	r2, [pc, #456]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b70      	ldr	r3, [pc, #448]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	496d      	ldr	r1, [pc, #436]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202c:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	4968      	ldr	r1, [pc, #416]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
 8002040:	e025      	b.n	800208e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002042:	4b66      	ldr	r3, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b63      	ldr	r3, [pc, #396]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4960      	ldr	r1, [pc, #384]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002060:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	495b      	ldr	r1, [pc, #364]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fd7e 	bl	8002b80 <RCC_SetFlashLatencyFromMSIRange>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e37a      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208e:	f000 fc81 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002092:	4602      	mov	r2, r0
 8002094:	4b51      	ldr	r3, [pc, #324]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4950      	ldr	r1, [pc, #320]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 80020a0:	5ccb      	ldrb	r3, [r1, r3]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a4e      	ldr	r2, [pc, #312]	; (80021e4 <HAL_RCC_OscConfig+0x278>)
 80020ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020ae:	4b4e      	ldr	r3, [pc, #312]	; (80021e8 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fd2a 	bl	8000b0c <HAL_InitTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d052      	beq.n	8002168 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	e35e      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d032      	beq.n	8002134 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020ce:	4b43      	ldr	r3, [pc, #268]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a42      	ldr	r2, [pc, #264]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020da:	f7fe fdff 	bl	8000cdc <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e2:	f7fe fdfb 	bl	8000cdc <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e347      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020f4:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a35      	ldr	r2, [pc, #212]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4930      	ldr	r1, [pc, #192]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	492b      	ldr	r1, [pc, #172]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
 8002132:	e01a      	b.n	800216a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a28      	ldr	r2, [pc, #160]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002140:	f7fe fdcc 	bl	8000cdc <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002148:	f7fe fdc8 	bl	8000cdc <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e314      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1dc>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d073      	beq.n	800225e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d005      	beq.n	8002188 <HAL_RCC_OscConfig+0x21c>
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d10e      	bne.n	80021a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d10b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d063      	beq.n	800225c <HAL_RCC_OscConfig+0x2f0>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d15f      	bne.n	800225c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e2f1      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x24c>
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e025      	b.n	8002204 <HAL_RCC_OscConfig+0x298>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c0:	d114      	bne.n	80021ec <HAL_RCC_OscConfig+0x280>
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a02      	ldr	r2, [pc, #8]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e013      	b.n	8002204 <HAL_RCC_OscConfig+0x298>
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08005850 	.word	0x08005850
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004
 80021ec:	4ba0      	ldr	r3, [pc, #640]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a9f      	ldr	r2, [pc, #636]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b9d      	ldr	r3, [pc, #628]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a9c      	ldr	r2, [pc, #624]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fd66 	bl	8000cdc <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe fd62 	bl	8000cdc <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e2ae      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002226:	4b92      	ldr	r3, [pc, #584]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x2a8>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fd52 	bl	8000cdc <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe fd4e 	bl	8000cdc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e29a      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224e:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x2d0>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d060      	beq.n	800232c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d005      	beq.n	800227c <HAL_RCC_OscConfig+0x310>
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d119      	bne.n	80022aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d116      	bne.n	80022aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800227c:	4b7c      	ldr	r3, [pc, #496]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_OscConfig+0x328>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e277      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	4973      	ldr	r1, [pc, #460]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a8:	e040      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d023      	beq.n	80022fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b2:	4b6f      	ldr	r3, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6e      	ldr	r2, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7fe fd0d 	bl	8000cdc <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c6:	f7fe fd09 	bl	8000cdc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e255      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d8:	4b65      	ldr	r3, [pc, #404]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	4b62      	ldr	r3, [pc, #392]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	495f      	ldr	r1, [pc, #380]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
 80022f8:	e018      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5c      	ldr	r2, [pc, #368]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fce9 	bl	8000cdc <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7fe fce5 	bl	8000cdc <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e231      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d03c      	beq.n	80023b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01c      	beq.n	800237a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002340:	4b4b      	ldr	r3, [pc, #300]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002346:	4a4a      	ldr	r2, [pc, #296]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7fe fcc4 	bl	8000cdc <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7fe fcc0 	bl	8000cdc <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e20c      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 800236c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ef      	beq.n	8002358 <HAL_RCC_OscConfig+0x3ec>
 8002378:	e01b      	b.n	80023b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 800237c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002380:	4a3b      	ldr	r2, [pc, #236]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238a:	f7fe fca7 	bl	8000cdc <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002392:	f7fe fca3 	bl	8000cdc <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1ef      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1ef      	bne.n	8002392 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80a6 	beq.w	800250c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023c4:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10d      	bne.n	80023ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	4a26      	ldr	r2, [pc, #152]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80023d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023da:	6593      	str	r3, [r2, #88]	; 0x58
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e8:	2301      	movs	r3, #1
 80023ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x508>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d118      	bne.n	800242a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <HAL_RCC_OscConfig+0x508>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_RCC_OscConfig+0x508>)
 80023fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002404:	f7fe fc6a 	bl	8000cdc <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240c:	f7fe fc66 	bl	8000cdc <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1b2      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_RCC_OscConfig+0x508>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <HAL_RCC_OscConfig+0x4d8>
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002442:	e029      	b.n	8002498 <HAL_RCC_OscConfig+0x52c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b05      	cmp	r3, #5
 800244a:	d115      	bne.n	8002478 <HAL_RCC_OscConfig+0x50c>
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	4a03      	ldr	r2, [pc, #12]	; (8002470 <HAL_RCC_OscConfig+0x504>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800246c:	e014      	b.n	8002498 <HAL_RCC_OscConfig+0x52c>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
 8002478:	4b9a      	ldr	r3, [pc, #616]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	4a99      	ldr	r2, [pc, #612]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002488:	4b96      	ldr	r3, [pc, #600]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	4a95      	ldr	r2, [pc, #596]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d016      	beq.n	80024ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7fe fc1c 	bl	8000cdc <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a6:	e00a      	b.n	80024be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a8:	f7fe fc18 	bl	8000cdc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e162      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024be:	4b89      	ldr	r3, [pc, #548]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 80024c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ed      	beq.n	80024a8 <HAL_RCC_OscConfig+0x53c>
 80024cc:	e015      	b.n	80024fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe fc05 	bl	8000cdc <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fc01 	bl	8000cdc <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e14b      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ec:	4b7d      	ldr	r3, [pc, #500]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1ed      	bne.n	80024d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fa:	7ffb      	ldrb	r3, [r7, #31]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002500:	4b78      	ldr	r3, [pc, #480]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	4a77      	ldr	r2, [pc, #476]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d03c      	beq.n	8002592 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01c      	beq.n	800255a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002520:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002526:	4a6f      	ldr	r2, [pc, #444]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fbd4 	bl	8000cdc <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002538:	f7fe fbd0 	bl	8000cdc <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e11c      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800254a:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 800254c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ef      	beq.n	8002538 <HAL_RCC_OscConfig+0x5cc>
 8002558:	e01b      	b.n	8002592 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800255a:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 800255c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002560:	4a60      	ldr	r2, [pc, #384]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fbb7 	bl	8000cdc <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002572:	f7fe fbb3 	bl	8000cdc <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0ff      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002584:	4b57      	ldr	r3, [pc, #348]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ef      	bne.n	8002572 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80f3 	beq.w	8002782 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	f040 80c9 	bne.w	8002738 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025a6:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f003 0203 	and.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d12c      	bne.n	8002614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	3b01      	subs	r3, #1
 80025c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d123      	bne.n	8002614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d11b      	bne.n	8002614 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d113      	bne.n	8002614 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	3b01      	subs	r3, #1
 80025fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d109      	bne.n	8002614 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	3b01      	subs	r3, #1
 800260e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d06b      	beq.n	80026ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d062      	beq.n	80026e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800261a:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0ac      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800262a:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2d      	ldr	r2, [pc, #180]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002634:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002636:	f7fe fb51 	bl	8000cdc <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe fb4d 	bl	8000cdc <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e099      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002650:	4b24      	ldr	r3, [pc, #144]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_RCC_OscConfig+0x77c>)
 8002662:	4013      	ands	r3, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800266c:	3a01      	subs	r2, #1
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	4311      	orrs	r1, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002676:	0212      	lsls	r2, r2, #8
 8002678:	4311      	orrs	r1, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800267e:	0852      	lsrs	r2, r2, #1
 8002680:	3a01      	subs	r2, #1
 8002682:	0552      	lsls	r2, r2, #21
 8002684:	4311      	orrs	r1, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	3a01      	subs	r2, #1
 800268e:	0652      	lsls	r2, r2, #25
 8002690:	4311      	orrs	r1, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002696:	06d2      	lsls	r2, r2, #27
 8002698:	430a      	orrs	r2, r1
 800269a:	4912      	ldr	r1, [pc, #72]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 800269c:	4313      	orrs	r3, r2
 800269e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 80026a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026b8:	f7fe fb10 	bl	8000cdc <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe fb0c 	bl	8000cdc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e058      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_RCC_OscConfig+0x778>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026de:	e050      	b.n	8002782 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e04f      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
 80026e4:	40021000 	.word	0x40021000
 80026e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_RCC_OscConfig+0x820>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d144      	bne.n	8002782 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <HAL_RCC_OscConfig+0x820>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a23      	ldr	r2, [pc, #140]	; (800278c <HAL_RCC_OscConfig+0x820>)
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002702:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002704:	4b21      	ldr	r3, [pc, #132]	; (800278c <HAL_RCC_OscConfig+0x820>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a20      	ldr	r2, [pc, #128]	; (800278c <HAL_RCC_OscConfig+0x820>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002710:	f7fe fae4 	bl	8000cdc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fae0 	bl	8000cdc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e02c      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_RCC_OscConfig+0x820>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x7ac>
 8002736:	e024      	b.n	8002782 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d01f      	beq.n	800277e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCC_OscConfig+0x820>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_RCC_OscConfig+0x820>)
 8002744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fac7 	bl	8000cdc <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fac3 	bl	8000cdc <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e00f      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_OscConfig+0x820>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_OscConfig+0x820>)
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	4905      	ldr	r1, [pc, #20]	; (800278c <HAL_RCC_OscConfig+0x820>)
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_RCC_OscConfig+0x824>)
 8002778:	4013      	ands	r3, r2
 800277a:	60cb      	str	r3, [r1, #12]
 800277c:	e001      	b.n	8002782 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	feeefffc 	.word	0xfeeefffc

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0e7      	b.n	8002978 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b75      	ldr	r3, [pc, #468]	; (8002980 <HAL_RCC_ClockConfig+0x1ec>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d910      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b72      	ldr	r3, [pc, #456]	; (8002980 <HAL_RCC_ClockConfig+0x1ec>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4970      	ldr	r1, [pc, #448]	; (8002980 <HAL_RCC_ClockConfig+0x1ec>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b6e      	ldr	r3, [pc, #440]	; (8002980 <HAL_RCC_ClockConfig+0x1ec>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0cf      	b.n	8002978 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d908      	bls.n	8002806 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4960      	ldr	r1, [pc, #384]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d04c      	beq.n	80028ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b03      	cmp	r3, #3
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281a:	4b5a      	ldr	r3, [pc, #360]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d121      	bne.n	800286a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e0a6      	b.n	8002978 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002832:	4b54      	ldr	r3, [pc, #336]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d115      	bne.n	800286a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e09a      	b.n	8002978 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800284a:	4b4e      	ldr	r3, [pc, #312]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e08e      	b.n	8002978 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800285a:	4b4a      	ldr	r3, [pc, #296]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e086      	b.n	8002978 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b46      	ldr	r3, [pc, #280]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4943      	ldr	r1, [pc, #268]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800287c:	f7fe fa2e 	bl	8000cdc <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe fa2a 	bl	8000cdc <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e06e      	b.n	8002978 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d010      	beq.n	80028da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	4b31      	ldr	r3, [pc, #196]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d208      	bcs.n	80028da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	492b      	ldr	r1, [pc, #172]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_RCC_ClockConfig+0x1ec>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d210      	bcs.n	800290a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x1ec>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 0207 	bic.w	r2, r3, #7
 80028f0:	4923      	ldr	r1, [pc, #140]	; (8002980 <HAL_RCC_ClockConfig+0x1ec>)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f8:	4b21      	ldr	r3, [pc, #132]	; (8002980 <HAL_RCC_ClockConfig+0x1ec>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d001      	beq.n	800290a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e036      	b.n	8002978 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4918      	ldr	r1, [pc, #96]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d009      	beq.n	8002948 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4910      	ldr	r1, [pc, #64]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002948:	f000 f824 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <HAL_RCC_ClockConfig+0x1f0>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	490b      	ldr	r1, [pc, #44]	; (8002988 <HAL_RCC_ClockConfig+0x1f4>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
 8002964:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1f8>)
 8002966:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1fc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe f8cd 	bl	8000b0c <HAL_InitTick>
 8002972:	4603      	mov	r3, r0
 8002974:	72fb      	strb	r3, [r7, #11]

  return status;
 8002976:	7afb      	ldrb	r3, [r7, #11]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40022000 	.word	0x40022000
 8002984:	40021000 	.word	0x40021000
 8002988:	08005850 	.word	0x08005850
 800298c:	20000000 	.word	0x20000000
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a2:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ac:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x34>
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d121      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d11e      	bne.n	8002a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029c8:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029d4:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	e005      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029e4:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029f0:	4a2b      	ldr	r2, [pc, #172]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10d      	bne.n	8002a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d102      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e004      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d134      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a22:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d003      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0xac>
 8002a38:	e005      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a3c:	617b      	str	r3, [r7, #20]
      break;
 8002a3e:	e005      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a42:	617b      	str	r3, [r7, #20]
      break;
 8002a44:	e002      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	617b      	str	r3, [r7, #20]
      break;
 8002a4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	3301      	adds	r3, #1
 8002a58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	fb03 f202 	mul.w	r2, r3, r2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	0e5b      	lsrs	r3, r3, #25
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a8c:	69bb      	ldr	r3, [r7, #24]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08005868 	.word	0x08005868
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ac8:	f7ff fff0 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4904      	ldr	r1, [pc, #16]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08005860 	.word	0x08005860

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002af4:	f7ff ffda 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0adb      	lsrs	r3, r3, #11
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40021000 	.word	0x40021000
 8002b18:	08005860 	.word	0x08005860

08002b1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	220f      	movs	r2, #15
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0203 	and.w	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_GetClockConfig+0x5c>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_RCC_GetClockConfig+0x60>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0207 	and.w	r2, r3, #7
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40022000 	.word	0x40022000

08002b80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b98:	f7ff f984 	bl	8001ea4 <HAL_PWREx_GetVoltageRange>
 8002b9c:	6178      	str	r0, [r7, #20]
 8002b9e:	e014      	b.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	4a24      	ldr	r2, [pc, #144]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6593      	str	r3, [r2, #88]	; 0x58
 8002bac:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bb8:	f7ff f974 	bl	8001ea4 <HAL_PWREx_GetVoltageRange>
 8002bbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d10b      	bne.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d919      	bls.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2ba0      	cmp	r3, #160	; 0xa0
 8002bdc:	d902      	bls.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bde:	2302      	movs	r3, #2
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	e013      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be4:	2301      	movs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	e010      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d902      	bls.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	e00a      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b80      	cmp	r3, #128	; 0x80
 8002bfa:	d102      	bne.n	8002c02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	e004      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b70      	cmp	r3, #112	; 0x70
 8002c06:	d101      	bne.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c08:	2301      	movs	r3, #1
 8002c0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 0207 	bic.w	r2, r3, #7
 8002c14:	4909      	ldr	r1, [pc, #36]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40022000 	.word	0x40022000

08002c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c48:	2300      	movs	r3, #0
 8002c4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d031      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c64:	d01a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c6a:	d814      	bhi.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d009      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c74:	d10f      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c76:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a5c      	ldr	r2, [pc, #368]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c82:	e00c      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fa44 	bl	8003118 <RCCEx_PLLSAI1_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c94:	e003      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	74fb      	strb	r3, [r7, #19]
      break;
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca4:	4b51      	ldr	r3, [pc, #324]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb2:	494e      	ldr	r1, [pc, #312]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cba:	e001      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 809e 	beq.w	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cd2:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	4a3f      	ldr	r2, [pc, #252]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf4:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a39      	ldr	r2, [pc, #228]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d10:	f7fd ffe4 	bl	8000cdc <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d16:	e009      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d18:	f7fd ffe0 	bl	8000cdc <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d902      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	74fb      	strb	r3, [r7, #19]
        break;
 8002d2a:	e005      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d2c:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ef      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d15a      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01e      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d019      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d86:	4a19      	ldr	r2, [pc, #100]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fd ffa0 	bl	8000cdc <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da0:	f7fd ff9c 	bl	8000cdc <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d902      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	74fb      	strb	r3, [r7, #19]
            break;
 8002db6:	e006      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ec      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dda:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002de2:	e009      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
 8002de8:	e006      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	7cfb      	ldrb	r3, [r7, #19]
 8002df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df8:	7c7b      	ldrb	r3, [r7, #17]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b9e      	ldr	r3, [pc, #632]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e02:	4a9d      	ldr	r2, [pc, #628]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e16:	4b98      	ldr	r3, [pc, #608]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f023 0203 	bic.w	r2, r3, #3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	4994      	ldr	r1, [pc, #592]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e38:	4b8f      	ldr	r3, [pc, #572]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f023 020c 	bic.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	498c      	ldr	r1, [pc, #560]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e5a:	4b87      	ldr	r3, [pc, #540]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	4983      	ldr	r1, [pc, #524]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e7c:	4b7e      	ldr	r3, [pc, #504]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	497b      	ldr	r1, [pc, #492]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	4972      	ldr	r1, [pc, #456]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ec0:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	496a      	ldr	r1, [pc, #424]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ee2:	4b65      	ldr	r3, [pc, #404]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef0:	4961      	ldr	r1, [pc, #388]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f04:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	4959      	ldr	r1, [pc, #356]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f26:	4b54      	ldr	r3, [pc, #336]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	4950      	ldr	r1, [pc, #320]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	4948      	ldr	r1, [pc, #288]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f6a:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f70:	f023 0203 	bic.w	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	493f      	ldr	r1, [pc, #252]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d028      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f8c:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9a:	4937      	ldr	r1, [pc, #220]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002faa:	d106      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fac:	4b32      	ldr	r3, [pc, #200]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a31      	ldr	r2, [pc, #196]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb6:	60d3      	str	r3, [r2, #12]
 8002fb8:	e011      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f8a4 	bl	8003118 <RCCEx_PLLSAI1_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d028      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	491f      	ldr	r1, [pc, #124]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003008:	d106      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003014:	60d3      	str	r3, [r2, #12]
 8003016:	e011      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003020:	d10c      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3304      	adds	r3, #4
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f875 	bl	8003118 <RCCEx_PLLSAI1_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003032:	7cfb      	ldrb	r3, [r7, #19]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d02b      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	4908      	ldr	r1, [pc, #32]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003066:	d109      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a02      	ldr	r2, [pc, #8]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800306e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003072:	60d3      	str	r3, [r2, #12]
 8003074:	e014      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3304      	adds	r3, #4
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f000 f843 	bl	8003118 <RCCEx_PLLSAI1_Config>
 8003092:	4603      	mov	r3, r0
 8003094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003096:	7cfb      	ldrb	r3, [r7, #19]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01c      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	4916      	ldr	r1, [pc, #88]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ca:	d10c      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	2102      	movs	r1, #2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f820 	bl	8003118 <RCCEx_PLLSAI1_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003100:	4904      	ldr	r1, [pc, #16]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003108:	7cbb      	ldrb	r3, [r7, #18]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000

08003118 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003126:	4b74      	ldr	r3, [pc, #464]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d018      	beq.n	8003164 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003132:	4b71      	ldr	r3, [pc, #452]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0203 	and.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d10d      	bne.n	800315e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
       ||
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800314a:	4b6b      	ldr	r3, [pc, #428]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
       ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d047      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	e044      	b.n	80031ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d018      	beq.n	800319e <RCCEx_PLLSAI1_Config+0x86>
 800316c:	2b03      	cmp	r3, #3
 800316e:	d825      	bhi.n	80031bc <RCCEx_PLLSAI1_Config+0xa4>
 8003170:	2b01      	cmp	r3, #1
 8003172:	d002      	beq.n	800317a <RCCEx_PLLSAI1_Config+0x62>
 8003174:	2b02      	cmp	r3, #2
 8003176:	d009      	beq.n	800318c <RCCEx_PLLSAI1_Config+0x74>
 8003178:	e020      	b.n	80031bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800317a:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11d      	bne.n	80031c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318a:	e01a      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800318c:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d116      	bne.n	80031c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800319c:	e013      	b.n	80031c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800319e:	4b56      	ldr	r3, [pc, #344]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10f      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031aa:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ba:	e006      	b.n	80031ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      break;
 80031c0:	e004      	b.n	80031cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031c2:	bf00      	nop
 80031c4:	e002      	b.n	80031cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10d      	bne.n	80031ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031d2:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	430b      	orrs	r3, r1
 80031e8:	4943      	ldr	r1, [pc, #268]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d17c      	bne.n	80032ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031f4:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003200:	f7fd fd6c 	bl	8000cdc <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003206:	e009      	b.n	800321c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003208:	f7fd fd68 	bl	8000cdc <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d902      	bls.n	800321c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	73fb      	strb	r3, [r7, #15]
        break;
 800321a:	e005      	b.n	8003228 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ef      	bne.n	8003208 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d15f      	bne.n	80032ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d110      	bne.n	8003256 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800323c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6892      	ldr	r2, [r2, #8]
 8003244:	0211      	lsls	r1, r2, #8
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68d2      	ldr	r2, [r2, #12]
 800324a:	06d2      	lsls	r2, r2, #27
 800324c:	430a      	orrs	r2, r1
 800324e:	492a      	ldr	r1, [pc, #168]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]
 8003254:	e027      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d112      	bne.n	8003282 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800325c:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003264:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6892      	ldr	r2, [r2, #8]
 800326c:	0211      	lsls	r1, r2, #8
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6912      	ldr	r2, [r2, #16]
 8003272:	0852      	lsrs	r2, r2, #1
 8003274:	3a01      	subs	r2, #1
 8003276:	0552      	lsls	r2, r2, #21
 8003278:	430a      	orrs	r2, r1
 800327a:	491f      	ldr	r1, [pc, #124]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800327c:	4313      	orrs	r3, r2
 800327e:	610b      	str	r3, [r1, #16]
 8003280:	e011      	b.n	80032a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800328a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6892      	ldr	r2, [r2, #8]
 8003292:	0211      	lsls	r1, r2, #8
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6952      	ldr	r2, [r2, #20]
 8003298:	0852      	lsrs	r2, r2, #1
 800329a:	3a01      	subs	r2, #1
 800329c:	0652      	lsls	r2, r2, #25
 800329e:	430a      	orrs	r2, r1
 80032a0:	4915      	ldr	r1, [pc, #84]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fd fd13 	bl	8000cdc <HAL_GetTick>
 80032b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032b8:	e009      	b.n	80032ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ba:	f7fd fd0f 	bl	8000cdc <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d902      	bls.n	80032ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	73fb      	strb	r3, [r7, #15]
          break;
 80032cc:	e005      	b.n	80032da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ef      	beq.n	80032ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4903      	ldr	r1, [pc, #12]	; (80032f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000

080032fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e049      	b.n	80033a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f841 	bl	80033aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4610      	mov	r0, r2
 800333c:	f000 f9e4 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d001      	beq.n	80033d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e040      	b.n	800345a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_TIM_Base_Start_IT+0xa8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00e      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x58>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003402:	d009      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x58>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_TIM_Base_Start_IT+0xac>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x58>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_TIM_Base_Start_IT+0xb0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d115      	bne.n	8003444 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_TIM_Base_Start_IT+0xb4>)
 8003420:	4013      	ands	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b06      	cmp	r3, #6
 8003428:	d015      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x96>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d011      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003442:	e008      	b.n	8003456 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e000      	b.n	8003458 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400
 8003470:	40014000 	.word	0x40014000
 8003474:	00010007 	.word	0x00010007

08003478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b02      	cmp	r3, #2
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0202 	mvn.w	r2, #2
 80034a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f905 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8f7 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f908 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d122      	bne.n	8003528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0204 	mvn.w	r2, #4
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2202      	movs	r2, #2
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8db 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8cd 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8de 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b08      	cmp	r3, #8
 8003534:	d122      	bne.n	800357c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b08      	cmp	r3, #8
 8003542:	d11b      	bne.n	800357c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0208 	mvn.w	r2, #8
 800354c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2204      	movs	r2, #4
 8003552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8b1 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 8003568:	e005      	b.n	8003576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8a3 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8b4 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b10      	cmp	r3, #16
 8003588:	d122      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b10      	cmp	r3, #16
 8003596:	d11b      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0210 	mvn.w	r2, #16
 80035a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2208      	movs	r2, #8
 80035a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f887 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 80035bc:	e005      	b.n	80035ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f879 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f88a 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d10e      	bne.n	80035fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0201 	mvn.w	r2, #1
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd f9a0 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d10e      	bne.n	8003628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d107      	bne.n	8003628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8e8 	bl	80037f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003636:	d10e      	bne.n	8003656 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b80      	cmp	r3, #128	; 0x80
 8003644:	d107      	bne.n	8003656 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800364e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8db 	bl	800380c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d10e      	bne.n	8003682 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d107      	bne.n	8003682 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f838 	bl	80036f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b20      	cmp	r3, #32
 800368e:	d10e      	bne.n	80036ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b20      	cmp	r3, #32
 800369c:	d107      	bne.n	80036ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0220 	mvn.w	r2, #32
 80036a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f89b 	bl	80037e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a2e      	ldr	r2, [pc, #184]	; (80037d4 <TIM_Base_SetConfig+0xcc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d007      	beq.n	8003730 <TIM_Base_SetConfig+0x28>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d003      	beq.n	8003730 <TIM_Base_SetConfig+0x28>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <TIM_Base_SetConfig+0xd0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d108      	bne.n	8003742 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <TIM_Base_SetConfig+0xcc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00f      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d00b      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <TIM_Base_SetConfig+0xd0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d007      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <TIM_Base_SetConfig+0xd4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <TIM_Base_SetConfig+0xd8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <TIM_Base_SetConfig+0xcc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d007      	beq.n	80037b8 <TIM_Base_SetConfig+0xb0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <TIM_Base_SetConfig+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_Base_SetConfig+0xb0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <TIM_Base_SetConfig+0xd8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d103      	bne.n	80037c0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	615a      	str	r2, [r3, #20]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400

080037e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e040      	b.n	80038b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd f906 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f82c 	bl	80038bc <UART_SetConfig>
 8003864:	4603      	mov	r3, r0
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e022      	b.n	80038b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 faa6 	bl	8003dc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800388a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800389a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fb2d 	bl	8003f0c <UART_CheckIdleState>
 80038b2:	4603      	mov	r3, r0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b08a      	sub	sp, #40	; 0x28
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	431a      	orrs	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4ba5      	ldr	r3, [pc, #660]	; (8003b80 <UART_SetConfig+0x2c4>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a9a      	ldr	r2, [pc, #616]	; (8003b84 <UART_SetConfig+0x2c8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	4313      	orrs	r3, r2
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a91      	ldr	r2, [pc, #580]	; (8003b88 <UART_SetConfig+0x2cc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d126      	bne.n	8003994 <UART_SetConfig+0xd8>
 8003946:	4b91      	ldr	r3, [pc, #580]	; (8003b8c <UART_SetConfig+0x2d0>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b03      	cmp	r3, #3
 8003952:	d81b      	bhi.n	800398c <UART_SetConfig+0xd0>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <UART_SetConfig+0xa0>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	0800396d 	.word	0x0800396d
 8003960:	0800397d 	.word	0x0800397d
 8003964:	08003975 	.word	0x08003975
 8003968:	08003985 	.word	0x08003985
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003972:	e0d6      	b.n	8003b22 <UART_SetConfig+0x266>
 8003974:	2302      	movs	r3, #2
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397a:	e0d2      	b.n	8003b22 <UART_SetConfig+0x266>
 800397c:	2304      	movs	r3, #4
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003982:	e0ce      	b.n	8003b22 <UART_SetConfig+0x266>
 8003984:	2308      	movs	r3, #8
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398a:	e0ca      	b.n	8003b22 <UART_SetConfig+0x266>
 800398c:	2310      	movs	r3, #16
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003992:	e0c6      	b.n	8003b22 <UART_SetConfig+0x266>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a7d      	ldr	r2, [pc, #500]	; (8003b90 <UART_SetConfig+0x2d4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d138      	bne.n	8003a10 <UART_SetConfig+0x154>
 800399e:	4b7b      	ldr	r3, [pc, #492]	; (8003b8c <UART_SetConfig+0x2d0>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d82d      	bhi.n	8003a08 <UART_SetConfig+0x14c>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <UART_SetConfig+0xf8>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	08003a09 	.word	0x08003a09
 80039bc:	08003a09 	.word	0x08003a09
 80039c0:	08003a09 	.word	0x08003a09
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003a09 	.word	0x08003a09
 80039cc:	08003a09 	.word	0x08003a09
 80039d0:	08003a09 	.word	0x08003a09
 80039d4:	080039f1 	.word	0x080039f1
 80039d8:	08003a09 	.word	0x08003a09
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	08003a09 	.word	0x08003a09
 80039e4:	08003a01 	.word	0x08003a01
 80039e8:	2300      	movs	r3, #0
 80039ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ee:	e098      	b.n	8003b22 <UART_SetConfig+0x266>
 80039f0:	2302      	movs	r3, #2
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f6:	e094      	b.n	8003b22 <UART_SetConfig+0x266>
 80039f8:	2304      	movs	r3, #4
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fe:	e090      	b.n	8003b22 <UART_SetConfig+0x266>
 8003a00:	2308      	movs	r3, #8
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a06:	e08c      	b.n	8003b22 <UART_SetConfig+0x266>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	e088      	b.n	8003b22 <UART_SetConfig+0x266>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5f      	ldr	r2, [pc, #380]	; (8003b94 <UART_SetConfig+0x2d8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d125      	bne.n	8003a66 <UART_SetConfig+0x1aa>
 8003a1a:	4b5c      	ldr	r3, [pc, #368]	; (8003b8c <UART_SetConfig+0x2d0>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a24:	2b30      	cmp	r3, #48	; 0x30
 8003a26:	d016      	beq.n	8003a56 <UART_SetConfig+0x19a>
 8003a28:	2b30      	cmp	r3, #48	; 0x30
 8003a2a:	d818      	bhi.n	8003a5e <UART_SetConfig+0x1a2>
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d00a      	beq.n	8003a46 <UART_SetConfig+0x18a>
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d814      	bhi.n	8003a5e <UART_SetConfig+0x1a2>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <UART_SetConfig+0x182>
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d008      	beq.n	8003a4e <UART_SetConfig+0x192>
 8003a3c:	e00f      	b.n	8003a5e <UART_SetConfig+0x1a2>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a44:	e06d      	b.n	8003b22 <UART_SetConfig+0x266>
 8003a46:	2302      	movs	r3, #2
 8003a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4c:	e069      	b.n	8003b22 <UART_SetConfig+0x266>
 8003a4e:	2304      	movs	r3, #4
 8003a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a54:	e065      	b.n	8003b22 <UART_SetConfig+0x266>
 8003a56:	2308      	movs	r3, #8
 8003a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5c:	e061      	b.n	8003b22 <UART_SetConfig+0x266>
 8003a5e:	2310      	movs	r3, #16
 8003a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a64:	e05d      	b.n	8003b22 <UART_SetConfig+0x266>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a4b      	ldr	r2, [pc, #300]	; (8003b98 <UART_SetConfig+0x2dc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d125      	bne.n	8003abc <UART_SetConfig+0x200>
 8003a70:	4b46      	ldr	r3, [pc, #280]	; (8003b8c <UART_SetConfig+0x2d0>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a7c:	d016      	beq.n	8003aac <UART_SetConfig+0x1f0>
 8003a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a80:	d818      	bhi.n	8003ab4 <UART_SetConfig+0x1f8>
 8003a82:	2b80      	cmp	r3, #128	; 0x80
 8003a84:	d00a      	beq.n	8003a9c <UART_SetConfig+0x1e0>
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d814      	bhi.n	8003ab4 <UART_SetConfig+0x1f8>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <UART_SetConfig+0x1d8>
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d008      	beq.n	8003aa4 <UART_SetConfig+0x1e8>
 8003a92:	e00f      	b.n	8003ab4 <UART_SetConfig+0x1f8>
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e042      	b.n	8003b22 <UART_SetConfig+0x266>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e03e      	b.n	8003b22 <UART_SetConfig+0x266>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e03a      	b.n	8003b22 <UART_SetConfig+0x266>
 8003aac:	2308      	movs	r3, #8
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e036      	b.n	8003b22 <UART_SetConfig+0x266>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e032      	b.n	8003b22 <UART_SetConfig+0x266>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	; (8003b84 <UART_SetConfig+0x2c8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d12a      	bne.n	8003b1c <UART_SetConfig+0x260>
 8003ac6:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <UART_SetConfig+0x2d0>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ad0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ad4:	d01a      	beq.n	8003b0c <UART_SetConfig+0x250>
 8003ad6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ada:	d81b      	bhi.n	8003b14 <UART_SetConfig+0x258>
 8003adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae0:	d00c      	beq.n	8003afc <UART_SetConfig+0x240>
 8003ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae6:	d815      	bhi.n	8003b14 <UART_SetConfig+0x258>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <UART_SetConfig+0x238>
 8003aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af0:	d008      	beq.n	8003b04 <UART_SetConfig+0x248>
 8003af2:	e00f      	b.n	8003b14 <UART_SetConfig+0x258>
 8003af4:	2300      	movs	r3, #0
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e012      	b.n	8003b22 <UART_SetConfig+0x266>
 8003afc:	2302      	movs	r3, #2
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e00e      	b.n	8003b22 <UART_SetConfig+0x266>
 8003b04:	2304      	movs	r3, #4
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e00a      	b.n	8003b22 <UART_SetConfig+0x266>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e006      	b.n	8003b22 <UART_SetConfig+0x266>
 8003b14:	2310      	movs	r3, #16
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e002      	b.n	8003b22 <UART_SetConfig+0x266>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <UART_SetConfig+0x2c8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	f040 808b 	bne.w	8003c44 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d834      	bhi.n	8003ba0 <UART_SetConfig+0x2e4>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0x280>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003ba1 	.word	0x08003ba1
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003ba1 	.word	0x08003ba1
 8003b4c:	08003b6f 	.word	0x08003b6f
 8003b50:	08003ba1 	.word	0x08003ba1
 8003b54:	08003ba1 	.word	0x08003ba1
 8003b58:	08003ba1 	.word	0x08003ba1
 8003b5c:	08003b77 	.word	0x08003b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b60:	f7fe ffb0 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8003b64:	61f8      	str	r0, [r7, #28]
        break;
 8003b66:	e021      	b.n	8003bac <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <UART_SetConfig+0x2e0>)
 8003b6a:	61fb      	str	r3, [r7, #28]
        break;
 8003b6c:	e01e      	b.n	8003bac <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6e:	f7fe ff11 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8003b72:	61f8      	str	r0, [r7, #28]
        break;
 8003b74:	e01a      	b.n	8003bac <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7a:	61fb      	str	r3, [r7, #28]
        break;
 8003b7c:	e016      	b.n	8003bac <UART_SetConfig+0x2f0>
 8003b7e:	bf00      	nop
 8003b80:	efff69f3 	.word	0xefff69f3
 8003b84:	40008000 	.word	0x40008000
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40004400 	.word	0x40004400
 8003b94:	40004800 	.word	0x40004800
 8003b98:	40004c00 	.word	0x40004c00
 8003b9c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003baa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80fa 	beq.w	8003da8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d305      	bcc.n	8003bd0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d903      	bls.n	8003bd8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bd6:	e0e7      	b.n	8003da8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	461c      	mov	r4, r3
 8003bde:	4615      	mov	r5, r2
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	022b      	lsls	r3, r5, #8
 8003bea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bee:	0222      	lsls	r2, r4, #8
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	6849      	ldr	r1, [r1, #4]
 8003bf4:	0849      	lsrs	r1, r1, #1
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	4688      	mov	r8, r1
 8003bfa:	4681      	mov	r9, r0
 8003bfc:	eb12 0a08 	adds.w	sl, r2, r8
 8003c00:	eb43 0b09 	adc.w	fp, r3, r9
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c12:	4650      	mov	r0, sl
 8003c14:	4659      	mov	r1, fp
 8003c16:	f7fc fae3 	bl	80001e0 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4613      	mov	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c28:	d308      	bcc.n	8003c3c <UART_SetConfig+0x380>
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c30:	d204      	bcs.n	8003c3c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	e0b5      	b.n	8003da8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c42:	e0b1      	b.n	8003da8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4c:	d15d      	bne.n	8003d0a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d827      	bhi.n	8003ca6 <UART_SetConfig+0x3ea>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <UART_SetConfig+0x3a0>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c81 	.word	0x08003c81
 8003c60:	08003c89 	.word	0x08003c89
 8003c64:	08003c91 	.word	0x08003c91
 8003c68:	08003ca7 	.word	0x08003ca7
 8003c6c:	08003c97 	.word	0x08003c97
 8003c70:	08003ca7 	.word	0x08003ca7
 8003c74:	08003ca7 	.word	0x08003ca7
 8003c78:	08003ca7 	.word	0x08003ca7
 8003c7c:	08003c9f 	.word	0x08003c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c80:	f7fe ff20 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8003c84:	61f8      	str	r0, [r7, #28]
        break;
 8003c86:	e014      	b.n	8003cb2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c88:	f7fe ff32 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8003c8c:	61f8      	str	r0, [r7, #28]
        break;
 8003c8e:	e010      	b.n	8003cb2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c90:	4b4c      	ldr	r3, [pc, #304]	; (8003dc4 <UART_SetConfig+0x508>)
 8003c92:	61fb      	str	r3, [r7, #28]
        break;
 8003c94:	e00d      	b.n	8003cb2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c96:	f7fe fe7d 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8003c9a:	61f8      	str	r0, [r7, #28]
        break;
 8003c9c:	e009      	b.n	8003cb2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca2:	61fb      	str	r3, [r7, #28]
        break;
 8003ca4:	e005      	b.n	8003cb2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d077      	beq.n	8003da8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	005a      	lsls	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	441a      	add	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0f      	cmp	r3, #15
 8003cd2:	d916      	bls.n	8003d02 <UART_SetConfig+0x446>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cda:	d212      	bcs.n	8003d02 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f023 030f 	bic.w	r3, r3, #15
 8003ce4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	8afb      	ldrh	r3, [r7, #22]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	8afa      	ldrh	r2, [r7, #22]
 8003cfe:	60da      	str	r2, [r3, #12]
 8003d00:	e052      	b.n	8003da8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d08:	e04e      	b.n	8003da8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d827      	bhi.n	8003d62 <UART_SetConfig+0x4a6>
 8003d12:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <UART_SetConfig+0x45c>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d3d 	.word	0x08003d3d
 8003d1c:	08003d45 	.word	0x08003d45
 8003d20:	08003d4d 	.word	0x08003d4d
 8003d24:	08003d63 	.word	0x08003d63
 8003d28:	08003d53 	.word	0x08003d53
 8003d2c:	08003d63 	.word	0x08003d63
 8003d30:	08003d63 	.word	0x08003d63
 8003d34:	08003d63 	.word	0x08003d63
 8003d38:	08003d5b 	.word	0x08003d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d3c:	f7fe fec2 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8003d40:	61f8      	str	r0, [r7, #28]
        break;
 8003d42:	e014      	b.n	8003d6e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7fe fed4 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8003d48:	61f8      	str	r0, [r7, #28]
        break;
 8003d4a:	e010      	b.n	8003d6e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <UART_SetConfig+0x508>)
 8003d4e:	61fb      	str	r3, [r7, #28]
        break;
 8003d50:	e00d      	b.n	8003d6e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d52:	f7fe fe1f 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8003d56:	61f8      	str	r0, [r7, #28]
        break;
 8003d58:	e009      	b.n	8003d6e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5e:	61fb      	str	r3, [r7, #28]
        break;
 8003d60:	e005      	b.n	8003d6e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d019      	beq.n	8003da8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	085a      	lsrs	r2, r3, #1
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b0f      	cmp	r3, #15
 8003d8c:	d909      	bls.n	8003da2 <UART_SetConfig+0x4e6>
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d205      	bcs.n	8003da2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
 8003da0:	e002      	b.n	8003da8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003db4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3728      	adds	r7, #40	; 0x28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc2:	bf00      	nop
 8003dc4:	00f42400 	.word	0x00f42400

08003dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01a      	beq.n	8003ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec6:	d10a      	bne.n	8003ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f1c:	f7fc fede 	bl	8000cdc <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d10e      	bne.n	8003f4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f82d 	bl	8003f9e <UART_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e023      	b.n	8003f96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d10e      	bne.n	8003f7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f817 	bl	8003f9e <UART_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e00d      	b.n	8003f96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b09c      	sub	sp, #112	; 0x70
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	4613      	mov	r3, r2
 8003fac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fae:	e0a5      	b.n	80040fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	f000 80a1 	beq.w	80040fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fc fe8f 	bl	8000cdc <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d302      	bcc.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d13e      	bne.n	800404e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fe0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ff4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e6      	bne.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	663b      	str	r3, [r7, #96]	; 0x60
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004022:	64ba      	str	r2, [r7, #72]	; 0x48
 8004024:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e5      	bne.n	8004002 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e067      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d04f      	beq.n	80040fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406a:	d147      	bne.n	80040fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004074:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800408a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
 8004096:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e6      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3308      	adds	r3, #8
 80040ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	613b      	str	r3, [r7, #16]
   return(result);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	66bb      	str	r3, [r7, #104]	; 0x68
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3308      	adds	r3, #8
 80040c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040c8:	623a      	str	r2, [r7, #32]
 80040ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	69f9      	ldr	r1, [r7, #28]
 80040ce:	6a3a      	ldr	r2, [r7, #32]
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e5      	bne.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e010      	b.n	800411e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	429a      	cmp	r2, r3
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	429a      	cmp	r2, r3
 8004118:	f43f af4a 	beq.w	8003fb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3770      	adds	r7, #112	; 0x70
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004126:	b480      	push	{r7}
 8004128:	b085      	sub	sp, #20
 800412a:	af00      	add	r7, sp, #0
 800412c:	4603      	mov	r3, r0
 800412e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004138:	2b84      	cmp	r3, #132	; 0x84
 800413a:	d005      	beq.n	8004148 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800413c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	3303      	adds	r3, #3
 8004146:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004148:	68fb      	ldr	r3, [r7, #12]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800415a:	f000 faf5 	bl	8004748 <vTaskStartScheduler>
  
  return osOK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}

08004164 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af04      	add	r7, sp, #16
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d020      	beq.n	80041b8 <osThreadCreate+0x54>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01c      	beq.n	80041b8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685c      	ldr	r4, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691e      	ldr	r6, [r3, #16]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ffc8 	bl	8004126 <makeFreeRtosPriority>
 8004196:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041a0:	9202      	str	r2, [sp, #8]
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	9100      	str	r1, [sp, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	4632      	mov	r2, r6
 80041aa:	4629      	mov	r1, r5
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 f8ed 	bl	800438c <xTaskCreateStatic>
 80041b2:	4603      	mov	r3, r0
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e01c      	b.n	80041f2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685c      	ldr	r4, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041c4:	b29e      	uxth	r6, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff ffaa 	bl	8004126 <makeFreeRtosPriority>
 80041d2:	4602      	mov	r2, r0
 80041d4:	f107 030c 	add.w	r3, r7, #12
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	9200      	str	r2, [sp, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4632      	mov	r2, r6
 80041e0:	4629      	mov	r1, r5
 80041e2:	4620      	mov	r0, r4
 80041e4:	f000 f92f 	bl	8004446 <xTaskCreate>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e000      	b.n	80041f4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041fc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <osDelay+0x16>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	e000      	b.n	8004214 <osDelay+0x18>
 8004212:	2301      	movs	r3, #1
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fa63 	bl	80046e0 <vTaskDelay>
  
  return osOK;
 800421a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f103 0208 	add.w	r2, r3, #8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f103 0208 	add.w	r2, r3, #8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f103 0208 	add.w	r2, r3, #8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	601a      	str	r2, [r3, #0]
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d103      	bne.n	80042e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e00c      	b.n	8004300 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3308      	adds	r3, #8
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	e002      	b.n	80042f4 <vListInsert+0x2e>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d2f6      	bcs.n	80042ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	601a      	str	r2, [r3, #0]
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6892      	ldr	r2, [r2, #8]
 800434e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6852      	ldr	r2, [r2, #4]
 8004358:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	429a      	cmp	r2, r3
 8004362:	d103      	bne.n	800436c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	1e5a      	subs	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af04      	add	r7, sp, #16
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	61fb      	str	r3, [r7, #28]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043d2:	23b4      	movs	r3, #180	; 0xb4
 80043d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2bb4      	cmp	r3, #180	; 0xb4
 80043da:	d00a      	beq.n	80043f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	61bb      	str	r3, [r7, #24]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01e      	beq.n	8004438 <xTaskCreateStatic+0xac>
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004408:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	2202      	movs	r2, #2
 800440e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004412:	2300      	movs	r3, #0
 8004414:	9303      	str	r3, [sp, #12]
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	9302      	str	r3, [sp, #8]
 800441a:	f107 0314 	add.w	r3, r7, #20
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f850 	bl	80044d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004432:	f000 f8eb 	bl	800460c <prvAddNewTaskToReadyList>
 8004436:	e001      	b.n	800443c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800443c:	697b      	ldr	r3, [r7, #20]
	}
 800443e:	4618      	mov	r0, r3
 8004440:	3728      	adds	r7, #40	; 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08c      	sub	sp, #48	; 0x30
 800444a:	af04      	add	r7, sp, #16
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fef4 	bl	8005248 <pvPortMalloc>
 8004460:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004468:	20b4      	movs	r0, #180	; 0xb4
 800446a:	f000 feed 	bl	8005248 <pvPortMalloc>
 800446e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
 800447c:	e005      	b.n	800448a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800447e:	6978      	ldr	r0, [r7, #20]
 8004480:	f000 ffae 	bl	80053e0 <vPortFree>
 8004484:	e001      	b.n	800448a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d017      	beq.n	80044c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004498:	88fa      	ldrh	r2, [r7, #6]
 800449a:	2300      	movs	r3, #0
 800449c:	9303      	str	r3, [sp, #12]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f80e 	bl	80044d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044b4:	69f8      	ldr	r0, [r7, #28]
 80044b6:	f000 f8a9 	bl	800460c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	e002      	b.n	80044c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295
 80044c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044c6:	69bb      	ldr	r3, [r7, #24]
	}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044e8:	3b01      	subs	r3, #1
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f023 0307 	bic.w	r3, r3, #7
 80044f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	617b      	str	r3, [r7, #20]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01f      	beq.n	800455e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	e012      	b.n	800454a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	7819      	ldrb	r1, [r3, #0]
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	3334      	adds	r3, #52	; 0x34
 8004534:	460a      	mov	r2, r1
 8004536:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d006      	beq.n	8004552 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	3301      	adds	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b0f      	cmp	r3, #15
 800454e:	d9e9      	bls.n	8004524 <prvInitialiseNewTask+0x54>
 8004550:	e000      	b.n	8004554 <prvInitialiseNewTask+0x84>
			{
				break;
 8004552:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800455c:	e003      	b.n	8004566 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	2b06      	cmp	r3, #6
 800456a:	d901      	bls.n	8004570 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800456c:	2306      	movs	r3, #6
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800457a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	2200      	movs	r2, #0
 8004580:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	3304      	adds	r3, #4
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fe6c 	bl	8004264 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	3318      	adds	r3, #24
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fe67 	bl	8004264 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	f1c3 0207 	rsb	r2, r3, #7
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	334c      	adds	r3, #76	; 0x4c
 80045c0:	2260      	movs	r2, #96	; 0x60
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 f84f 	bl	8005668 <memset>
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	4a0c      	ldr	r2, [pc, #48]	; (8004600 <prvInitialiseNewTask+0x130>)
 80045ce:	651a      	str	r2, [r3, #80]	; 0x50
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <prvInitialiseNewTask+0x134>)
 80045d4:	655a      	str	r2, [r3, #84]	; 0x54
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <prvInitialiseNewTask+0x138>)
 80045da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	69b8      	ldr	r0, [r7, #24]
 80045e2:	f000 fc1f 	bl	8004e24 <pxPortInitialiseStack>
 80045e6:	4602      	mov	r2, r0
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045f8:	bf00      	nop
 80045fa:	3720      	adds	r7, #32
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	080058b8 	.word	0x080058b8
 8004604:	080058d8 	.word	0x080058d8
 8004608:	08005898 	.word	0x08005898

0800460c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004614:	f000 fd36 	bl	8005084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004618:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <prvAddNewTaskToReadyList+0xb8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	4a29      	ldr	r2, [pc, #164]	; (80046c4 <prvAddNewTaskToReadyList+0xb8>)
 8004620:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004622:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <prvAddNewTaskToReadyList+0xbc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800462a:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <prvAddNewTaskToReadyList+0xbc>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <prvAddNewTaskToReadyList+0xb8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d110      	bne.n	800465a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004638:	f000 facc 	bl	8004bd4 <prvInitialiseTaskLists>
 800463c:	e00d      	b.n	800465a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800463e:	4b23      	ldr	r3, [pc, #140]	; (80046cc <prvAddNewTaskToReadyList+0xc0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <prvAddNewTaskToReadyList+0xbc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	429a      	cmp	r2, r3
 8004652:	d802      	bhi.n	800465a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004654:	4a1c      	ldr	r2, [pc, #112]	; (80046c8 <prvAddNewTaskToReadyList+0xbc>)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800465a:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <prvAddNewTaskToReadyList+0xc4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3301      	adds	r3, #1
 8004660:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <prvAddNewTaskToReadyList+0xc4>)
 8004662:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	2201      	movs	r2, #1
 800466a:	409a      	lsls	r2, r3
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <prvAddNewTaskToReadyList+0xc8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4313      	orrs	r3, r2
 8004672:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <prvAddNewTaskToReadyList+0xc8>)
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <prvAddNewTaskToReadyList+0xcc>)
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7ff fdf6 	bl	800427e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004692:	f000 fd27 	bl	80050e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <prvAddNewTaskToReadyList+0xc0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00e      	beq.n	80046bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <prvAddNewTaskToReadyList+0xbc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d207      	bcs.n	80046bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <prvAddNewTaskToReadyList+0xd0>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000588 	.word	0x20000588
 80046c8:	20000488 	.word	0x20000488
 80046cc:	20000594 	.word	0x20000594
 80046d0:	200005a4 	.word	0x200005a4
 80046d4:	20000590 	.word	0x20000590
 80046d8:	2000048c 	.word	0x2000048c
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d017      	beq.n	8004722 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046f2:	4b13      	ldr	r3, [pc, #76]	; (8004740 <vTaskDelay+0x60>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <vTaskDelay+0x30>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60bb      	str	r3, [r7, #8]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004710:	f000 f884 	bl	800481c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004714:	2100      	movs	r1, #0
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fb1e 	bl	8004d58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800471c:	f000 f88c 	bl	8004838 <xTaskResumeAll>
 8004720:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <vTaskDelay+0x64>)
 800472a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200005b0 	.word	0x200005b0
 8004744:	e000ed04 	.word	0xe000ed04

08004748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004756:	463a      	mov	r2, r7
 8004758:	1d39      	adds	r1, r7, #4
 800475a:	f107 0308 	add.w	r3, r7, #8
 800475e:	4618      	mov	r0, r3
 8004760:	f7fb ff62 	bl	8000628 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	9202      	str	r2, [sp, #8]
 800476c:	9301      	str	r3, [sp, #4]
 800476e:	2300      	movs	r3, #0
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	460a      	mov	r2, r1
 8004776:	4921      	ldr	r1, [pc, #132]	; (80047fc <vTaskStartScheduler+0xb4>)
 8004778:	4821      	ldr	r0, [pc, #132]	; (8004800 <vTaskStartScheduler+0xb8>)
 800477a:	f7ff fe07 	bl	800438c <xTaskCreateStatic>
 800477e:	4603      	mov	r3, r0
 8004780:	4a20      	ldr	r2, [pc, #128]	; (8004804 <vTaskStartScheduler+0xbc>)
 8004782:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004784:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <vTaskStartScheduler+0xbc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e001      	b.n	8004796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d11b      	bne.n	80047d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	613b      	str	r3, [r7, #16]
}
 80047ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047b0:	4b15      	ldr	r3, [pc, #84]	; (8004808 <vTaskStartScheduler+0xc0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	334c      	adds	r3, #76	; 0x4c
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <vTaskStartScheduler+0xc4>)
 80047b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <vTaskStartScheduler+0xc8>)
 80047bc:	f04f 32ff 	mov.w	r2, #4294967295
 80047c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047c2:	4b14      	ldr	r3, [pc, #80]	; (8004814 <vTaskStartScheduler+0xcc>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <vTaskStartScheduler+0xd0>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047ce:	f000 fbb7 	bl	8004f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047d2:	e00e      	b.n	80047f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047da:	d10a      	bne.n	80047f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	60fb      	str	r3, [r7, #12]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <vTaskStartScheduler+0xa8>
}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	08005848 	.word	0x08005848
 8004800:	08004ba5 	.word	0x08004ba5
 8004804:	200005ac 	.word	0x200005ac
 8004808:	20000488 	.word	0x20000488
 800480c:	20000010 	.word	0x20000010
 8004810:	200005a8 	.word	0x200005a8
 8004814:	20000594 	.word	0x20000594
 8004818:	2000058c 	.word	0x2000058c

0800481c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004820:	4b04      	ldr	r3, [pc, #16]	; (8004834 <vTaskSuspendAll+0x18>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	4a03      	ldr	r2, [pc, #12]	; (8004834 <vTaskSuspendAll+0x18>)
 8004828:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800482a:	bf00      	nop
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	200005b0 	.word	0x200005b0

08004838 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004846:	4b41      	ldr	r3, [pc, #260]	; (800494c <xTaskResumeAll+0x114>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <xTaskResumeAll+0x2c>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	603b      	str	r3, [r7, #0]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004864:	f000 fc0e 	bl	8005084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004868:	4b38      	ldr	r3, [pc, #224]	; (800494c <xTaskResumeAll+0x114>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3b01      	subs	r3, #1
 800486e:	4a37      	ldr	r2, [pc, #220]	; (800494c <xTaskResumeAll+0x114>)
 8004870:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004872:	4b36      	ldr	r3, [pc, #216]	; (800494c <xTaskResumeAll+0x114>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d161      	bne.n	800493e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800487a:	4b35      	ldr	r3, [pc, #212]	; (8004950 <xTaskResumeAll+0x118>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d05d      	beq.n	800493e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004882:	e02e      	b.n	80048e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004884:	4b33      	ldr	r3, [pc, #204]	; (8004954 <xTaskResumeAll+0x11c>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3318      	adds	r3, #24
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fd51 	bl	8004338 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3304      	adds	r3, #4
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fd4c 	bl	8004338 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	2201      	movs	r2, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <xTaskResumeAll+0x120>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <xTaskResumeAll+0x120>)
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4a27      	ldr	r2, [pc, #156]	; (800495c <xTaskResumeAll+0x124>)
 80048c0:	441a      	add	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7ff fcd8 	bl	800427e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <xTaskResumeAll+0x128>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	429a      	cmp	r2, r3
 80048da:	d302      	bcc.n	80048e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80048dc:	4b21      	ldr	r3, [pc, #132]	; (8004964 <xTaskResumeAll+0x12c>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048e2:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <xTaskResumeAll+0x11c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1cc      	bne.n	8004884 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048f0:	f000 fa12 	bl	8004d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048f4:	4b1c      	ldr	r3, [pc, #112]	; (8004968 <xTaskResumeAll+0x130>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d010      	beq.n	8004922 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004900:	f000 f836 	bl	8004970 <xTaskIncrementTick>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <xTaskResumeAll+0x12c>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3b01      	subs	r3, #1
 8004914:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f1      	bne.n	8004900 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800491c:	4b12      	ldr	r3, [pc, #72]	; (8004968 <xTaskResumeAll+0x130>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <xTaskResumeAll+0x12c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800492a:	2301      	movs	r3, #1
 800492c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800492e:	4b0f      	ldr	r3, [pc, #60]	; (800496c <xTaskResumeAll+0x134>)
 8004930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800493e:	f000 fbd1 	bl	80050e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004942:	68bb      	ldr	r3, [r7, #8]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200005b0 	.word	0x200005b0
 8004950:	20000588 	.word	0x20000588
 8004954:	20000548 	.word	0x20000548
 8004958:	20000590 	.word	0x20000590
 800495c:	2000048c 	.word	0x2000048c
 8004960:	20000488 	.word	0x20000488
 8004964:	2000059c 	.word	0x2000059c
 8004968:	20000598 	.word	0x20000598
 800496c:	e000ed04 	.word	0xe000ed04

08004970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497a:	4b4e      	ldr	r3, [pc, #312]	; (8004ab4 <xTaskIncrementTick+0x144>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f040 808e 	bne.w	8004aa0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004984:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <xTaskIncrementTick+0x148>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800498c:	4a4a      	ldr	r2, [pc, #296]	; (8004ab8 <xTaskIncrementTick+0x148>)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d120      	bne.n	80049da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004998:	4b48      	ldr	r3, [pc, #288]	; (8004abc <xTaskIncrementTick+0x14c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	603b      	str	r3, [r7, #0]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <xTaskIncrementTick+0x46>
 80049b8:	4b40      	ldr	r3, [pc, #256]	; (8004abc <xTaskIncrementTick+0x14c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	4b40      	ldr	r3, [pc, #256]	; (8004ac0 <xTaskIncrementTick+0x150>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a3e      	ldr	r2, [pc, #248]	; (8004abc <xTaskIncrementTick+0x14c>)
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4a3e      	ldr	r2, [pc, #248]	; (8004ac0 <xTaskIncrementTick+0x150>)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b3d      	ldr	r3, [pc, #244]	; (8004ac4 <xTaskIncrementTick+0x154>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	4a3c      	ldr	r2, [pc, #240]	; (8004ac4 <xTaskIncrementTick+0x154>)
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	f000 f99f 	bl	8004d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049da:	4b3b      	ldr	r3, [pc, #236]	; (8004ac8 <xTaskIncrementTick+0x158>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d348      	bcc.n	8004a76 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e4:	4b35      	ldr	r3, [pc, #212]	; (8004abc <xTaskIncrementTick+0x14c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ee:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <xTaskIncrementTick+0x158>)
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295
 80049f4:	601a      	str	r2, [r3, #0]
					break;
 80049f6:	e03e      	b.n	8004a76 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f8:	4b30      	ldr	r3, [pc, #192]	; (8004abc <xTaskIncrementTick+0x14c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d203      	bcs.n	8004a18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a10:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <xTaskIncrementTick+0x158>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a16:	e02e      	b.n	8004a76 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fc8b 	bl	8004338 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d004      	beq.n	8004a34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3318      	adds	r3, #24
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fc82 	bl	8004338 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	2201      	movs	r2, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	4b23      	ldr	r3, [pc, #140]	; (8004acc <xTaskIncrementTick+0x15c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	4a22      	ldr	r2, [pc, #136]	; (8004acc <xTaskIncrementTick+0x15c>)
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <xTaskIncrementTick+0x160>)
 8004a54:	441a      	add	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7ff fc0e 	bl	800427e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <xTaskIncrementTick+0x164>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d3b9      	bcc.n	80049e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a74:	e7b6      	b.n	80049e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a76:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <xTaskIncrementTick+0x164>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7c:	4914      	ldr	r1, [pc, #80]	; (8004ad0 <xTaskIncrementTick+0x160>)
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d901      	bls.n	8004a92 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a92:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <xTaskIncrementTick+0x168>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e004      	b.n	8004aaa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <xTaskIncrementTick+0x16c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	4a0d      	ldr	r2, [pc, #52]	; (8004adc <xTaskIncrementTick+0x16c>)
 8004aa8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004aaa:	697b      	ldr	r3, [r7, #20]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3718      	adds	r7, #24
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	200005b0 	.word	0x200005b0
 8004ab8:	2000058c 	.word	0x2000058c
 8004abc:	20000540 	.word	0x20000540
 8004ac0:	20000544 	.word	0x20000544
 8004ac4:	200005a0 	.word	0x200005a0
 8004ac8:	200005a8 	.word	0x200005a8
 8004acc:	20000590 	.word	0x20000590
 8004ad0:	2000048c 	.word	0x2000048c
 8004ad4:	20000488 	.word	0x20000488
 8004ad8:	2000059c 	.word	0x2000059c
 8004adc:	20000598 	.word	0x20000598

08004ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <vTaskSwitchContext+0xac>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aee:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <vTaskSwitchContext+0xb0>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004af4:	e044      	b.n	8004b80 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004af6:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <vTaskSwitchContext+0xb0>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <vTaskSwitchContext+0xb4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	fab3 f383 	clz	r3, r3
 8004b08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b0a:	7afb      	ldrb	r3, [r7, #11]
 8004b0c:	f1c3 031f 	rsb	r3, r3, #31
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	4921      	ldr	r1, [pc, #132]	; (8004b98 <vTaskSwitchContext+0xb8>)
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	607b      	str	r3, [r7, #4]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <vTaskSwitchContext+0x5a>
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4a14      	ldr	r2, [pc, #80]	; (8004b98 <vTaskSwitchContext+0xb8>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d104      	bne.n	8004b6c <vTaskSwitchContext+0x8c>
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <vTaskSwitchContext+0xbc>)
 8004b74:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b76:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <vTaskSwitchContext+0xbc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	334c      	adds	r3, #76	; 0x4c
 8004b7c:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <vTaskSwitchContext+0xc0>)
 8004b7e:	6013      	str	r3, [r2, #0]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	200005b0 	.word	0x200005b0
 8004b90:	2000059c 	.word	0x2000059c
 8004b94:	20000590 	.word	0x20000590
 8004b98:	2000048c 	.word	0x2000048c
 8004b9c:	20000488 	.word	0x20000488
 8004ba0:	20000010 	.word	0x20000010

08004ba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bac:	f000 f852 	bl	8004c54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <prvIdleTask+0x28>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d9f9      	bls.n	8004bac <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <prvIdleTask+0x2c>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bc8:	e7f0      	b.n	8004bac <prvIdleTask+0x8>
 8004bca:	bf00      	nop
 8004bcc:	2000048c 	.word	0x2000048c
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	e00c      	b.n	8004bfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <prvInitialiseTaskLists+0x60>)
 8004bec:	4413      	add	r3, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fb18 	bl	8004224 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d9ef      	bls.n	8004be0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c00:	480d      	ldr	r0, [pc, #52]	; (8004c38 <prvInitialiseTaskLists+0x64>)
 8004c02:	f7ff fb0f 	bl	8004224 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c06:	480d      	ldr	r0, [pc, #52]	; (8004c3c <prvInitialiseTaskLists+0x68>)
 8004c08:	f7ff fb0c 	bl	8004224 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c0c:	480c      	ldr	r0, [pc, #48]	; (8004c40 <prvInitialiseTaskLists+0x6c>)
 8004c0e:	f7ff fb09 	bl	8004224 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c12:	480c      	ldr	r0, [pc, #48]	; (8004c44 <prvInitialiseTaskLists+0x70>)
 8004c14:	f7ff fb06 	bl	8004224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c18:	480b      	ldr	r0, [pc, #44]	; (8004c48 <prvInitialiseTaskLists+0x74>)
 8004c1a:	f7ff fb03 	bl	8004224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <prvInitialiseTaskLists+0x78>)
 8004c20:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <prvInitialiseTaskLists+0x64>)
 8004c22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <prvInitialiseTaskLists+0x7c>)
 8004c26:	4a05      	ldr	r2, [pc, #20]	; (8004c3c <prvInitialiseTaskLists+0x68>)
 8004c28:	601a      	str	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	2000048c 	.word	0x2000048c
 8004c38:	20000518 	.word	0x20000518
 8004c3c:	2000052c 	.word	0x2000052c
 8004c40:	20000548 	.word	0x20000548
 8004c44:	2000055c 	.word	0x2000055c
 8004c48:	20000574 	.word	0x20000574
 8004c4c:	20000540 	.word	0x20000540
 8004c50:	20000544 	.word	0x20000544

08004c54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c5a:	e019      	b.n	8004c90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c5c:	f000 fa12 	bl	8005084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c60:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <prvCheckTasksWaitingTermination+0x50>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fb63 	bl	8004338 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <prvCheckTasksWaitingTermination+0x54>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <prvCheckTasksWaitingTermination+0x54>)
 8004c7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <prvCheckTasksWaitingTermination+0x58>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <prvCheckTasksWaitingTermination+0x58>)
 8004c84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c86:	f000 fa2d 	bl	80050e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f810 	bl	8004cb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <prvCheckTasksWaitingTermination+0x58>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e1      	bne.n	8004c5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	2000055c 	.word	0x2000055c
 8004ca8:	20000588 	.word	0x20000588
 8004cac:	20000570 	.word	0x20000570

08004cb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	334c      	adds	r3, #76	; 0x4c
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fce9 	bl	8005694 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fb85 	bl	80053e0 <vPortFree>
				vPortFree( pxTCB );
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fb82 	bl	80053e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cdc:	e018      	b.n	8004d10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d103      	bne.n	8004cf0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fb79 	bl	80053e0 <vPortFree>
	}
 8004cee:	e00f      	b.n	8004d10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d00a      	beq.n	8004d10 <prvDeleteTCB+0x60>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60fb      	str	r3, [r7, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <prvDeleteTCB+0x5e>
	}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <prvResetNextTaskUnblockTime+0x38>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <prvResetNextTaskUnblockTime+0x3c>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d30:	e008      	b.n	8004d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <prvResetNextTaskUnblockTime+0x38>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <prvResetNextTaskUnblockTime+0x3c>)
 8004d42:	6013      	str	r3, [r2, #0]
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000540 	.word	0x20000540
 8004d54:	200005a8 	.word	0x200005a8

08004d58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d62:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d68:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff fae2 	bl	8004338 <uxListRemove>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	2201      	movs	r2, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43da      	mvns	r2, r3
 8004d88:	4b21      	ldr	r3, [pc, #132]	; (8004e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	4a20      	ldr	r2, [pc, #128]	; (8004e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d10a      	bne.n	8004db0 <prvAddCurrentTaskToDelayedList+0x58>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3304      	adds	r3, #4
 8004da6:	4619      	mov	r1, r3
 8004da8:	481a      	ldr	r0, [pc, #104]	; (8004e14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004daa:	f7ff fa68 	bl	800427e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dae:	e026      	b.n	8004dfe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004db8:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d209      	bcs.n	8004ddc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dc8:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f7ff fa76 	bl	80042c6 <vListInsert>
}
 8004dda:	e010      	b.n	8004dfe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3304      	adds	r3, #4
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f7ff fa6c 	bl	80042c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dee:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d202      	bcs.n	8004dfe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004df8:	4a09      	ldr	r2, [pc, #36]	; (8004e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	6013      	str	r3, [r2, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	2000058c 	.word	0x2000058c
 8004e0c:	20000488 	.word	0x20000488
 8004e10:	20000590 	.word	0x20000590
 8004e14:	20000574 	.word	0x20000574
 8004e18:	20000544 	.word	0x20000544
 8004e1c:	20000540 	.word	0x20000540
 8004e20:	200005a8 	.word	0x200005a8

08004e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3b04      	subs	r3, #4
 8004e34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3b04      	subs	r3, #4
 8004e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3b04      	subs	r3, #4
 8004e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e54:	4a0c      	ldr	r2, [pc, #48]	; (8004e88 <pxPortInitialiseStack+0x64>)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3b14      	subs	r3, #20
 8004e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3b04      	subs	r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f06f 0202 	mvn.w	r2, #2
 8004e72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3b20      	subs	r3, #32
 8004e78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	08004e8d 	.word	0x08004e8d

08004e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e96:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <prvTaskExitError+0x54>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d00a      	beq.n	8004eb6 <prvTaskExitError+0x2a>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
}
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <prvTaskExitError+0x28>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60bb      	str	r3, [r7, #8]
}
 8004ec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004eca:	bf00      	nop
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0fc      	beq.n	8004ecc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ed2:	bf00      	nop
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	2000000c 	.word	0x2000000c
	...

08004ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <pxCurrentTCBConst2>)
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	f380 8809 	msr	PSP, r0
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8811 	msr	BASEPRI, r0
 8004f0a:	4770      	bx	lr
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst2>:
 8004f10:	20000488 	.word	0x20000488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f18:	4808      	ldr	r0, [pc, #32]	; (8004f3c <prvPortStartFirstTask+0x24>)
 8004f1a:	6800      	ldr	r0, [r0, #0]
 8004f1c:	6800      	ldr	r0, [r0, #0]
 8004f1e:	f380 8808 	msr	MSP, r0
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8814 	msr	CONTROL, r0
 8004f2a:	b662      	cpsie	i
 8004f2c:	b661      	cpsie	f
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	df00      	svc	0
 8004f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f3a:	bf00      	nop
 8004f3c:	e000ed08 	.word	0xe000ed08

08004f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f46:	4b46      	ldr	r3, [pc, #280]	; (8005060 <xPortStartScheduler+0x120>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a46      	ldr	r2, [pc, #280]	; (8005064 <xPortStartScheduler+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10a      	bne.n	8004f66 <xPortStartScheduler+0x26>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f66:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <xPortStartScheduler+0x120>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3f      	ldr	r2, [pc, #252]	; (8005068 <xPortStartScheduler+0x128>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10a      	bne.n	8004f86 <xPortStartScheduler+0x46>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60fb      	str	r3, [r7, #12]
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f86:	4b39      	ldr	r3, [pc, #228]	; (800506c <xPortStartScheduler+0x12c>)
 8004f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	22ff      	movs	r2, #255	; 0xff
 8004f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	4b31      	ldr	r3, [pc, #196]	; (8005070 <xPortStartScheduler+0x130>)
 8004fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fae:	4b31      	ldr	r3, [pc, #196]	; (8005074 <xPortStartScheduler+0x134>)
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fb4:	e009      	b.n	8004fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004fb6:	4b2f      	ldr	r3, [pc, #188]	; (8005074 <xPortStartScheduler+0x134>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	4a2d      	ldr	r2, [pc, #180]	; (8005074 <xPortStartScheduler+0x134>)
 8004fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b80      	cmp	r3, #128	; 0x80
 8004fd4:	d0ef      	beq.n	8004fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fd6:	4b27      	ldr	r3, [pc, #156]	; (8005074 <xPortStartScheduler+0x134>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1c3 0307 	rsb	r3, r3, #7
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d00a      	beq.n	8004ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60bb      	str	r3, [r7, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <xPortStartScheduler+0x134>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <xPortStartScheduler+0x134>)
 8005000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005002:	4b1c      	ldr	r3, [pc, #112]	; (8005074 <xPortStartScheduler+0x134>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800500a:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <xPortStartScheduler+0x134>)
 800500c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005016:	4b18      	ldr	r3, [pc, #96]	; (8005078 <xPortStartScheduler+0x138>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a17      	ldr	r2, [pc, #92]	; (8005078 <xPortStartScheduler+0x138>)
 800501c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <xPortStartScheduler+0x138>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a14      	ldr	r2, [pc, #80]	; (8005078 <xPortStartScheduler+0x138>)
 8005028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800502c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800502e:	f000 f8dd 	bl	80051ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <xPortStartScheduler+0x13c>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005038:	f000 f8fc 	bl	8005234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800503c:	4b10      	ldr	r3, [pc, #64]	; (8005080 <xPortStartScheduler+0x140>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0f      	ldr	r2, [pc, #60]	; (8005080 <xPortStartScheduler+0x140>)
 8005042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005048:	f7ff ff66 	bl	8004f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800504c:	f7ff fd48 	bl	8004ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8005050:	f7ff ff1c 	bl	8004e8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	e000ed00 	.word	0xe000ed00
 8005064:	410fc271 	.word	0x410fc271
 8005068:	410fc270 	.word	0x410fc270
 800506c:	e000e400 	.word	0xe000e400
 8005070:	200005b4 	.word	0x200005b4
 8005074:	200005b8 	.word	0x200005b8
 8005078:	e000ed20 	.word	0xe000ed20
 800507c:	2000000c 	.word	0x2000000c
 8005080:	e000ef34 	.word	0xe000ef34

08005084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	607b      	str	r3, [r7, #4]
}
 800509c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800509e:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <vPortEnterCritical+0x58>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3301      	adds	r3, #1
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <vPortEnterCritical+0x58>)
 80050a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <vPortEnterCritical+0x58>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d10f      	bne.n	80050d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortEnterCritical+0x5c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	603b      	str	r3, [r7, #0]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <vPortEnterCritical+0x4a>
	}
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	2000000c 	.word	0x2000000c
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ea:	4b12      	ldr	r3, [pc, #72]	; (8005134 <vPortExitCritical+0x50>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <vPortExitCritical+0x24>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	607b      	str	r3, [r7, #4]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <vPortExitCritical+0x50>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3b01      	subs	r3, #1
 800510e:	4a09      	ldr	r2, [pc, #36]	; (8005134 <vPortExitCritical+0x50>)
 8005110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005112:	4b08      	ldr	r3, [pc, #32]	; (8005134 <vPortExitCritical+0x50>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d105      	bne.n	8005126 <vPortExitCritical+0x42>
 800511a:	2300      	movs	r3, #0
 800511c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	2000000c 	.word	0x2000000c
	...

08005140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005140:	f3ef 8009 	mrs	r0, PSP
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <pxCurrentTCBConst>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f01e 0f10 	tst.w	lr, #16
 8005150:	bf08      	it	eq
 8005152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	6010      	str	r0, [r2, #0]
 800515c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005164:	f380 8811 	msr	BASEPRI, r0
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f7ff fcb6 	bl	8004ae0 <vTaskSwitchContext>
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	f380 8811 	msr	BASEPRI, r0
 800517c:	bc09      	pop	{r0, r3}
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	6808      	ldr	r0, [r1, #0]
 8005182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005186:	f01e 0f10 	tst.w	lr, #16
 800518a:	bf08      	it	eq
 800518c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005190:	f380 8809 	msr	PSP, r0
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w

080051a0 <pxCurrentTCBConst>:
 80051a0:	20000488 	.word	0x20000488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	607b      	str	r3, [r7, #4]
}
 80051c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051c2:	f7ff fbd5 	bl	8004970 <xTaskIncrementTick>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <SysTick_Handler+0x40>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f383 8811 	msr	BASEPRI, r3
}
 80051de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051f0:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <vPortSetupTimerInterrupt+0x34>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <vPortSetupTimerInterrupt+0x38>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051fc:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <vPortSetupTimerInterrupt+0x3c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0a      	ldr	r2, [pc, #40]	; (800522c <vPortSetupTimerInterrupt+0x40>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	099b      	lsrs	r3, r3, #6
 8005208:	4a09      	ldr	r2, [pc, #36]	; (8005230 <vPortSetupTimerInterrupt+0x44>)
 800520a:	3b01      	subs	r3, #1
 800520c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800520e:	4b04      	ldr	r3, [pc, #16]	; (8005220 <vPortSetupTimerInterrupt+0x34>)
 8005210:	2207      	movs	r2, #7
 8005212:	601a      	str	r2, [r3, #0]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	e000e010 	.word	0xe000e010
 8005224:	e000e018 	.word	0xe000e018
 8005228:	20000000 	.word	0x20000000
 800522c:	10624dd3 	.word	0x10624dd3
 8005230:	e000e014 	.word	0xe000e014

08005234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005244 <vPortEnableVFP+0x10>
 8005238:	6801      	ldr	r1, [r0, #0]
 800523a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800523e:	6001      	str	r1, [r0, #0]
 8005240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005242:	bf00      	nop
 8005244:	e000ed88 	.word	0xe000ed88

08005248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08a      	sub	sp, #40	; 0x28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005250:	2300      	movs	r3, #0
 8005252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005254:	f7ff fae2 	bl	800481c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005258:	4b5b      	ldr	r3, [pc, #364]	; (80053c8 <pvPortMalloc+0x180>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005260:	f000 f920 	bl	80054a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005264:	4b59      	ldr	r3, [pc, #356]	; (80053cc <pvPortMalloc+0x184>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	f040 8093 	bne.w	8005398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01d      	beq.n	80052b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005278:	2208      	movs	r2, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4413      	add	r3, r2
 800527e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	2b00      	cmp	r3, #0
 8005288:	d014      	beq.n	80052b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f023 0307 	bic.w	r3, r3, #7
 8005290:	3308      	adds	r3, #8
 8005292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <pvPortMalloc+0x6c>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	617b      	str	r3, [r7, #20]
}
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d06e      	beq.n	8005398 <pvPortMalloc+0x150>
 80052ba:	4b45      	ldr	r3, [pc, #276]	; (80053d0 <pvPortMalloc+0x188>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d869      	bhi.n	8005398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052c4:	4b43      	ldr	r3, [pc, #268]	; (80053d4 <pvPortMalloc+0x18c>)
 80052c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052c8:	4b42      	ldr	r3, [pc, #264]	; (80053d4 <pvPortMalloc+0x18c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ce:	e004      	b.n	80052da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d903      	bls.n	80052ec <pvPortMalloc+0xa4>
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1f1      	bne.n	80052d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052ec:	4b36      	ldr	r3, [pc, #216]	; (80053c8 <pvPortMalloc+0x180>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d050      	beq.n	8005398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2208      	movs	r2, #8
 80052fc:	4413      	add	r3, r2
 80052fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	1ad2      	subs	r2, r2, r3
 8005310:	2308      	movs	r3, #8
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	429a      	cmp	r2, r3
 8005316:	d91f      	bls.n	8005358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <pvPortMalloc+0xf8>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	613b      	str	r3, [r7, #16]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	1ad2      	subs	r2, r2, r3
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005352:	69b8      	ldr	r0, [r7, #24]
 8005354:	f000 f908 	bl	8005568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005358:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <pvPortMalloc+0x188>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <pvPortMalloc+0x188>)
 8005364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005366:	4b1a      	ldr	r3, [pc, #104]	; (80053d0 <pvPortMalloc+0x188>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <pvPortMalloc+0x190>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d203      	bcs.n	800537a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005372:	4b17      	ldr	r3, [pc, #92]	; (80053d0 <pvPortMalloc+0x188>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <pvPortMalloc+0x190>)
 8005378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <pvPortMalloc+0x184>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	431a      	orrs	r2, r3
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800538e:	4b13      	ldr	r3, [pc, #76]	; (80053dc <pvPortMalloc+0x194>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3301      	adds	r3, #1
 8005394:	4a11      	ldr	r2, [pc, #68]	; (80053dc <pvPortMalloc+0x194>)
 8005396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005398:	f7ff fa4e 	bl	8004838 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <pvPortMalloc+0x174>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	60fb      	str	r3, [r7, #12]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <pvPortMalloc+0x172>
	return pvReturn;
 80053bc:	69fb      	ldr	r3, [r7, #28]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3728      	adds	r7, #40	; 0x28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	2000117c 	.word	0x2000117c
 80053cc:	20001190 	.word	0x20001190
 80053d0:	20001180 	.word	0x20001180
 80053d4:	20001174 	.word	0x20001174
 80053d8:	20001184 	.word	0x20001184
 80053dc:	20001188 	.word	0x20001188

080053e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d04d      	beq.n	800548e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053f2:	2308      	movs	r3, #8
 80053f4:	425b      	negs	r3, r3
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4413      	add	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	4b24      	ldr	r3, [pc, #144]	; (8005498 <vPortFree+0xb8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4013      	ands	r3, r2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <vPortFree+0x44>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60fb      	str	r3, [r7, #12]
}
 8005420:	bf00      	nop
 8005422:	e7fe      	b.n	8005422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00a      	beq.n	8005442 <vPortFree+0x62>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	60bb      	str	r3, [r7, #8]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <vPortFree+0xb8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01e      	beq.n	800548e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d11a      	bne.n	800548e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <vPortFree+0xb8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	43db      	mvns	r3, r3
 8005462:	401a      	ands	r2, r3
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005468:	f7ff f9d8 	bl	800481c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <vPortFree+0xbc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4413      	add	r3, r2
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <vPortFree+0xbc>)
 8005478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800547a:	6938      	ldr	r0, [r7, #16]
 800547c:	f000 f874 	bl	8005568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005480:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <vPortFree+0xc0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	4a06      	ldr	r2, [pc, #24]	; (80054a0 <vPortFree+0xc0>)
 8005488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800548a:	f7ff f9d5 	bl	8004838 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800548e:	bf00      	nop
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20001190 	.word	0x20001190
 800549c:	20001180 	.word	0x20001180
 80054a0:	2000118c 	.word	0x2000118c

080054a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80054ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054b0:	4b27      	ldr	r3, [pc, #156]	; (8005550 <prvHeapInit+0xac>)
 80054b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00c      	beq.n	80054d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3307      	adds	r3, #7
 80054c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0307 	bic.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <prvHeapInit+0xac>)
 80054d4:	4413      	add	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054dc:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <prvHeapInit+0xb0>)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <prvHeapInit+0xb0>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	4413      	add	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054f0:	2208      	movs	r2, #8
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0307 	bic.w	r3, r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a15      	ldr	r2, [pc, #84]	; (8005558 <prvHeapInit+0xb4>)
 8005504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005506:	4b14      	ldr	r3, [pc, #80]	; (8005558 <prvHeapInit+0xb4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800550e:	4b12      	ldr	r3, [pc, #72]	; (8005558 <prvHeapInit+0xb4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	1ad2      	subs	r2, r2, r3
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvHeapInit+0xb4>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a0a      	ldr	r2, [pc, #40]	; (800555c <prvHeapInit+0xb8>)
 8005532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	4a09      	ldr	r2, [pc, #36]	; (8005560 <prvHeapInit+0xbc>)
 800553a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <prvHeapInit+0xc0>)
 800553e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005542:	601a      	str	r2, [r3, #0]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	200005bc 	.word	0x200005bc
 8005554:	20001174 	.word	0x20001174
 8005558:	2000117c 	.word	0x2000117c
 800555c:	20001184 	.word	0x20001184
 8005560:	20001180 	.word	0x20001180
 8005564:	20001190 	.word	0x20001190

08005568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005570:	4b28      	ldr	r3, [pc, #160]	; (8005614 <prvInsertBlockIntoFreeList+0xac>)
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e002      	b.n	800557c <prvInsertBlockIntoFreeList+0x14>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d8f7      	bhi.n	8005576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4413      	add	r3, r2
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	d108      	bne.n	80055aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	441a      	add	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d118      	bne.n	80055f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <prvInsertBlockIntoFreeList+0xb0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d00d      	beq.n	80055e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	441a      	add	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e008      	b.n	80055f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055e6:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <prvInsertBlockIntoFreeList+0xb0>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e003      	b.n	80055f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d002      	beq.n	8005606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20001174 	.word	0x20001174
 8005618:	2000117c 	.word	0x2000117c

0800561c <__libc_init_array>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	4d0d      	ldr	r5, [pc, #52]	; (8005654 <__libc_init_array+0x38>)
 8005620:	4c0d      	ldr	r4, [pc, #52]	; (8005658 <__libc_init_array+0x3c>)
 8005622:	1b64      	subs	r4, r4, r5
 8005624:	10a4      	asrs	r4, r4, #2
 8005626:	2600      	movs	r6, #0
 8005628:	42a6      	cmp	r6, r4
 800562a:	d109      	bne.n	8005640 <__libc_init_array+0x24>
 800562c:	4d0b      	ldr	r5, [pc, #44]	; (800565c <__libc_init_array+0x40>)
 800562e:	4c0c      	ldr	r4, [pc, #48]	; (8005660 <__libc_init_array+0x44>)
 8005630:	f000 f8e4 	bl	80057fc <_init>
 8005634:	1b64      	subs	r4, r4, r5
 8005636:	10a4      	asrs	r4, r4, #2
 8005638:	2600      	movs	r6, #0
 800563a:	42a6      	cmp	r6, r4
 800563c:	d105      	bne.n	800564a <__libc_init_array+0x2e>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	f855 3b04 	ldr.w	r3, [r5], #4
 8005644:	4798      	blx	r3
 8005646:	3601      	adds	r6, #1
 8005648:	e7ee      	b.n	8005628 <__libc_init_array+0xc>
 800564a:	f855 3b04 	ldr.w	r3, [r5], #4
 800564e:	4798      	blx	r3
 8005650:	3601      	adds	r6, #1
 8005652:	e7f2      	b.n	800563a <__libc_init_array+0x1e>
 8005654:	08005900 	.word	0x08005900
 8005658:	08005900 	.word	0x08005900
 800565c:	08005900 	.word	0x08005900
 8005660:	08005904 	.word	0x08005904

08005664 <__retarget_lock_acquire_recursive>:
 8005664:	4770      	bx	lr

08005666 <__retarget_lock_release_recursive>:
 8005666:	4770      	bx	lr

08005668 <memset>:
 8005668:	4402      	add	r2, r0
 800566a:	4603      	mov	r3, r0
 800566c:	4293      	cmp	r3, r2
 800566e:	d100      	bne.n	8005672 <memset+0xa>
 8005670:	4770      	bx	lr
 8005672:	f803 1b01 	strb.w	r1, [r3], #1
 8005676:	e7f9      	b.n	800566c <memset+0x4>

08005678 <cleanup_glue>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	460c      	mov	r4, r1
 800567c:	6809      	ldr	r1, [r1, #0]
 800567e:	4605      	mov	r5, r0
 8005680:	b109      	cbz	r1, 8005686 <cleanup_glue+0xe>
 8005682:	f7ff fff9 	bl	8005678 <cleanup_glue>
 8005686:	4621      	mov	r1, r4
 8005688:	4628      	mov	r0, r5
 800568a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800568e:	f000 b869 	b.w	8005764 <_free_r>
	...

08005694 <_reclaim_reent>:
 8005694:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <_reclaim_reent+0xb4>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4283      	cmp	r3, r0
 800569a:	b570      	push	{r4, r5, r6, lr}
 800569c:	4604      	mov	r4, r0
 800569e:	d051      	beq.n	8005744 <_reclaim_reent+0xb0>
 80056a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056a2:	b143      	cbz	r3, 80056b6 <_reclaim_reent+0x22>
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d14a      	bne.n	8005740 <_reclaim_reent+0xac>
 80056aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ac:	6819      	ldr	r1, [r3, #0]
 80056ae:	b111      	cbz	r1, 80056b6 <_reclaim_reent+0x22>
 80056b0:	4620      	mov	r0, r4
 80056b2:	f000 f857 	bl	8005764 <_free_r>
 80056b6:	6961      	ldr	r1, [r4, #20]
 80056b8:	b111      	cbz	r1, 80056c0 <_reclaim_reent+0x2c>
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 f852 	bl	8005764 <_free_r>
 80056c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80056c2:	b111      	cbz	r1, 80056ca <_reclaim_reent+0x36>
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 f84d 	bl	8005764 <_free_r>
 80056ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056cc:	b111      	cbz	r1, 80056d4 <_reclaim_reent+0x40>
 80056ce:	4620      	mov	r0, r4
 80056d0:	f000 f848 	bl	8005764 <_free_r>
 80056d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80056d6:	b111      	cbz	r1, 80056de <_reclaim_reent+0x4a>
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 f843 	bl	8005764 <_free_r>
 80056de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80056e0:	b111      	cbz	r1, 80056e8 <_reclaim_reent+0x54>
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 f83e 	bl	8005764 <_free_r>
 80056e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80056ea:	b111      	cbz	r1, 80056f2 <_reclaim_reent+0x5e>
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 f839 	bl	8005764 <_free_r>
 80056f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80056f4:	b111      	cbz	r1, 80056fc <_reclaim_reent+0x68>
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 f834 	bl	8005764 <_free_r>
 80056fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056fe:	b111      	cbz	r1, 8005706 <_reclaim_reent+0x72>
 8005700:	4620      	mov	r0, r4
 8005702:	f000 f82f 	bl	8005764 <_free_r>
 8005706:	69a3      	ldr	r3, [r4, #24]
 8005708:	b1e3      	cbz	r3, 8005744 <_reclaim_reent+0xb0>
 800570a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800570c:	4620      	mov	r0, r4
 800570e:	4798      	blx	r3
 8005710:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005712:	b1b9      	cbz	r1, 8005744 <_reclaim_reent+0xb0>
 8005714:	4620      	mov	r0, r4
 8005716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800571a:	f7ff bfad 	b.w	8005678 <cleanup_glue>
 800571e:	5949      	ldr	r1, [r1, r5]
 8005720:	b941      	cbnz	r1, 8005734 <_reclaim_reent+0xa0>
 8005722:	3504      	adds	r5, #4
 8005724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005726:	2d80      	cmp	r5, #128	; 0x80
 8005728:	68d9      	ldr	r1, [r3, #12]
 800572a:	d1f8      	bne.n	800571e <_reclaim_reent+0x8a>
 800572c:	4620      	mov	r0, r4
 800572e:	f000 f819 	bl	8005764 <_free_r>
 8005732:	e7ba      	b.n	80056aa <_reclaim_reent+0x16>
 8005734:	680e      	ldr	r6, [r1, #0]
 8005736:	4620      	mov	r0, r4
 8005738:	f000 f814 	bl	8005764 <_free_r>
 800573c:	4631      	mov	r1, r6
 800573e:	e7ef      	b.n	8005720 <_reclaim_reent+0x8c>
 8005740:	2500      	movs	r5, #0
 8005742:	e7ef      	b.n	8005724 <_reclaim_reent+0x90>
 8005744:	bd70      	pop	{r4, r5, r6, pc}
 8005746:	bf00      	nop
 8005748:	20000010 	.word	0x20000010

0800574c <__malloc_lock>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__malloc_lock+0x8>)
 800574e:	f7ff bf89 	b.w	8005664 <__retarget_lock_acquire_recursive>
 8005752:	bf00      	nop
 8005754:	20001194 	.word	0x20001194

08005758 <__malloc_unlock>:
 8005758:	4801      	ldr	r0, [pc, #4]	; (8005760 <__malloc_unlock+0x8>)
 800575a:	f7ff bf84 	b.w	8005666 <__retarget_lock_release_recursive>
 800575e:	bf00      	nop
 8005760:	20001194 	.word	0x20001194

08005764 <_free_r>:
 8005764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005766:	2900      	cmp	r1, #0
 8005768:	d044      	beq.n	80057f4 <_free_r+0x90>
 800576a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800576e:	9001      	str	r0, [sp, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f1a1 0404 	sub.w	r4, r1, #4
 8005776:	bfb8      	it	lt
 8005778:	18e4      	addlt	r4, r4, r3
 800577a:	f7ff ffe7 	bl	800574c <__malloc_lock>
 800577e:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <_free_r+0x94>)
 8005780:	9801      	ldr	r0, [sp, #4]
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	b933      	cbnz	r3, 8005794 <_free_r+0x30>
 8005786:	6063      	str	r3, [r4, #4]
 8005788:	6014      	str	r4, [r2, #0]
 800578a:	b003      	add	sp, #12
 800578c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005790:	f7ff bfe2 	b.w	8005758 <__malloc_unlock>
 8005794:	42a3      	cmp	r3, r4
 8005796:	d908      	bls.n	80057aa <_free_r+0x46>
 8005798:	6825      	ldr	r5, [r4, #0]
 800579a:	1961      	adds	r1, r4, r5
 800579c:	428b      	cmp	r3, r1
 800579e:	bf01      	itttt	eq
 80057a0:	6819      	ldreq	r1, [r3, #0]
 80057a2:	685b      	ldreq	r3, [r3, #4]
 80057a4:	1949      	addeq	r1, r1, r5
 80057a6:	6021      	streq	r1, [r4, #0]
 80057a8:	e7ed      	b.n	8005786 <_free_r+0x22>
 80057aa:	461a      	mov	r2, r3
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	b10b      	cbz	r3, 80057b4 <_free_r+0x50>
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	d9fa      	bls.n	80057aa <_free_r+0x46>
 80057b4:	6811      	ldr	r1, [r2, #0]
 80057b6:	1855      	adds	r5, r2, r1
 80057b8:	42a5      	cmp	r5, r4
 80057ba:	d10b      	bne.n	80057d4 <_free_r+0x70>
 80057bc:	6824      	ldr	r4, [r4, #0]
 80057be:	4421      	add	r1, r4
 80057c0:	1854      	adds	r4, r2, r1
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	d1e0      	bne.n	800578a <_free_r+0x26>
 80057c8:	681c      	ldr	r4, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	6053      	str	r3, [r2, #4]
 80057ce:	4421      	add	r1, r4
 80057d0:	6011      	str	r1, [r2, #0]
 80057d2:	e7da      	b.n	800578a <_free_r+0x26>
 80057d4:	d902      	bls.n	80057dc <_free_r+0x78>
 80057d6:	230c      	movs	r3, #12
 80057d8:	6003      	str	r3, [r0, #0]
 80057da:	e7d6      	b.n	800578a <_free_r+0x26>
 80057dc:	6825      	ldr	r5, [r4, #0]
 80057de:	1961      	adds	r1, r4, r5
 80057e0:	428b      	cmp	r3, r1
 80057e2:	bf04      	itt	eq
 80057e4:	6819      	ldreq	r1, [r3, #0]
 80057e6:	685b      	ldreq	r3, [r3, #4]
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	bf04      	itt	eq
 80057ec:	1949      	addeq	r1, r1, r5
 80057ee:	6021      	streq	r1, [r4, #0]
 80057f0:	6054      	str	r4, [r2, #4]
 80057f2:	e7ca      	b.n	800578a <_free_r+0x26>
 80057f4:	b003      	add	sp, #12
 80057f6:	bd30      	pop	{r4, r5, pc}
 80057f8:	20001198 	.word	0x20001198

080057fc <_init>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	bf00      	nop
 8005800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005802:	bc08      	pop	{r3}
 8005804:	469e      	mov	lr, r3
 8005806:	4770      	bx	lr

08005808 <_fini>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	bf00      	nop
 800580c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580e:	bc08      	pop	{r3}
 8005810:	469e      	mov	lr, r3
 8005812:	4770      	bx	lr
